package com.ssafy.d3v.backend.mock;

import com.ssafy.d3v.backend.question.application.port.QuestionRepository;
import com.ssafy.d3v.backend.question.domain.Question;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class FakeQuestionRepository implements QuestionRepository {

    private final AtomicInteger autoGeneratedId = new AtomicInteger(0);
    private final List<Question> data = Collections.synchronizedList(new ArrayList<>());


    @Override
    public Optional<Question> findById(Integer questionId) {
        return data.stream().filter(item -> item.getQuestionId() == questionId).findAny();
    }

    @Override
    public Question save(Question question) {
        if (question.getQuestionId() == null || question.getQuestionId() == 0) {
            Question newQuestion = Question.builder()
                    .questionId(autoGeneratedId.incrementAndGet())
                    .content(question.getContent())
                    .standardAnswer(question.getStandardAnswer())
                    .build();
            data.add(newQuestion);
            return newQuestion;
        } else {
            data.removeIf(item -> Objects.equals(item.getQuestionId(), question.getQuestionId()));
            data.add(question);
            return question;
        }
    }


}
