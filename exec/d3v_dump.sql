--
-- PostgreSQL database dump
--

-- Dumped from database version 17.2 (Debian 17.2-1.pgdg120+1)
-- Dumped by pg_dump version 17.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: answer; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.answer (
    answer_id bigint NOT NULL,
    access_level character varying(255) NOT NULL,
    content text NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    member_id bigint NOT NULL,
    question_id bigint NOT NULL,
    CONSTRAINT answer_access_level_check CHECK (((access_level)::text = ANY ((ARRAY['PUBLIC'::character varying, 'PROTECTED'::character varying, 'PRIVATE'::character varying])::text[])))
);


ALTER TABLE public.answer OWNER TO d3v3lop3rs;

--
-- Name: answer_answer_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.answer ALTER COLUMN answer_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.answer_answer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: article; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.article (
    article_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    deleted_at timestamp(6) without time zone,
    updated_at timestamp(6) without time zone NOT NULL,
    comment_count integer,
    content text,
    title character varying(255),
    view integer,
    category_id bigint NOT NULL,
    member_id bigint NOT NULL
);


ALTER TABLE public.article OWNER TO d3v3lop3rs;

--
-- Name: article_article_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.article ALTER COLUMN article_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.article_article_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: article_image; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.article_image (
    article_image_id bigint NOT NULL,
    image_url character varying(255) NOT NULL,
    origin_image_name character varying(255) NOT NULL,
    article_id bigint NOT NULL
);


ALTER TABLE public.article_image OWNER TO d3v3lop3rs;

--
-- Name: article_image_article_image_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.article_image ALTER COLUMN article_image_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.article_image_article_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: bookmark; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.bookmark (
    bookmark_id bigint NOT NULL,
    access_level character varying(255) NOT NULL,
    description character varying(255),
    name character varying(255) NOT NULL,
    member_id bigint NOT NULL,
    CONSTRAINT bookmark_access_level_check CHECK (((access_level)::text = ANY ((ARRAY['PUBLIC'::character varying, 'PROTECTED'::character varying, 'PRIVATE'::character varying])::text[])))
);


ALTER TABLE public.bookmark OWNER TO d3v3lop3rs;

--
-- Name: bookmark_bookmark_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.bookmark ALTER COLUMN bookmark_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.bookmark_bookmark_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: bookmark_question; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.bookmark_question (
    bookmark_question_id bigint NOT NULL,
    bookmark_id bigint NOT NULL,
    question_id bigint NOT NULL
);


ALTER TABLE public.bookmark_question OWNER TO d3v3lop3rs;

--
-- Name: bookmark_question_bookmark_question_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.bookmark_question ALTER COLUMN bookmark_question_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.bookmark_question_bookmark_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: category; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.category (
    category_id bigint NOT NULL,
    name character varying(255),
    CONSTRAINT category_name_check CHECK (((name)::text = ANY ((ARRAY['JOB_REVIEW'::character varying, 'QUESTION_REVIEW'::character varying, 'INFO_SHARING'::character varying, 'ETC'::character varying])::text[])))
);


ALTER TABLE public.category OWNER TO d3v3lop3rs;

--
-- Name: category_category_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.category ALTER COLUMN category_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.category_category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.comment (
    comment_id integer NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    deleted_at timestamp(6) without time zone,
    updated_at timestamp(6) without time zone NOT NULL,
    content character varying(255),
    article_id bigint NOT NULL,
    member_id bigint NOT NULL
);


ALTER TABLE public.comment OWNER TO d3v3lop3rs;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.comment ALTER COLUMN comment_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: feedback; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.feedback (
    feedback_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    deleted_at timestamp(6) without time zone,
    updated_at timestamp(6) without time zone NOT NULL,
    content character varying(255) NOT NULL,
    answer_id bigint NOT NULL,
    member_id bigint NOT NULL
);


ALTER TABLE public.feedback OWNER TO d3v3lop3rs;

--
-- Name: feedback_feedback_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.feedback ALTER COLUMN feedback_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.feedback_feedback_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: follow; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.follow (
    follow_id bigint NOT NULL,
    follower_id bigint NOT NULL,
    following_id bigint NOT NULL
);


ALTER TABLE public.follow OWNER TO d3v3lop3rs;

--
-- Name: follow_follow_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.follow ALTER COLUMN follow_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.follow_follow_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: history; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.history (
    history_id bigint NOT NULL,
    count integer NOT NULL,
    date date NOT NULL,
    member_id bigint NOT NULL
);


ALTER TABLE public.history OWNER TO d3v3lop3rs;

--
-- Name: history_history_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.history ALTER COLUMN history_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.history_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: job; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.job (
    job_id bigint NOT NULL,
    job_role character varying(255) NOT NULL,
    CONSTRAINT job_job_role_check CHECK (((job_role)::text = ANY ((ARRAY['FRONTEND'::character varying, 'BACKEND'::character varying, 'FULLSTACK'::character varying, 'ANDROID'::character varying, 'IOS'::character varying, 'DBA'::character varying, 'DEVOPS'::character varying, 'INFRA'::character varying, 'DATA_SCIENCE'::character varying, 'AI_ENGINEER'::character varying, 'SYSTEM_ENGINEER'::character varying, 'GAME_DEVELOPMENT'::character varying, 'EMBEDDED'::character varying, 'SECURITY'::character varying, 'BLOCKCHAIN'::character varying, 'TESTING'::character varying, 'CLOUD_ARCHITECTURE'::character varying, 'PROJECT_MANAGER'::character varying])::text[])))
);


ALTER TABLE public.job OWNER TO d3v3lop3rs;

--
-- Name: job_job_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.job ALTER COLUMN job_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.job_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: job_skill; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.job_skill (
    job_skill_id bigint NOT NULL,
    job_id bigint NOT NULL,
    skill_id bigint NOT NULL
);


ALTER TABLE public.job_skill OWNER TO d3v3lop3rs;

--
-- Name: job_skill_job_skill_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.job_skill ALTER COLUMN job_skill_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.job_skill_job_skill_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: likes; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.likes (
    likes_id bigint NOT NULL,
    answer_id bigint NOT NULL,
    member_id bigint NOT NULL
);


ALTER TABLE public.likes OWNER TO d3v3lop3rs;

--
-- Name: likes_likes_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.likes ALTER COLUMN likes_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.likes_likes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: member; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.member (
    member_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    deleted_at timestamp(6) without time zone,
    updated_at timestamp(6) without time zone NOT NULL,
    email character varying(63) NOT NULL,
    favorite_job character varying(255),
    github_url character varying(255),
    max_streak bigint,
    nickname character varying(15) NOT NULL,
    ongoing_streak bigint,
    password character varying(255),
    profile_img character varying(255),
    provider_type character varying(255),
    role character varying(255),
    CONSTRAINT member_favorite_job_check CHECK (((favorite_job)::text = ANY ((ARRAY['FRONTEND'::character varying, 'BACKEND'::character varying, 'FULLSTACK'::character varying, 'ANDROID'::character varying, 'IOS'::character varying, 'DBA'::character varying, 'DEVOPS'::character varying, 'INFRA'::character varying, 'DATA_SCIENCE'::character varying, 'AI_ENGINEER'::character varying, 'SYSTEM_ENGINEER'::character varying, 'GAME_DEVELOPMENT'::character varying, 'EMBEDDED'::character varying, 'SECURITY'::character varying, 'BLOCKCHAIN'::character varying, 'TESTING'::character varying, 'CLOUD_ARCHITECTURE'::character varying, 'PROJECT_MANAGER'::character varying])::text[]))),
    CONSTRAINT member_provider_type_check CHECK (((provider_type)::text = ANY ((ARRAY['LOCAL'::character varying, 'GOOGLE'::character varying, 'NAVER'::character varying, 'KAKAO'::character varying])::text[]))),
    CONSTRAINT member_role_check CHECK (((role)::text = ANY ((ARRAY['ROLE_USER'::character varying, 'ROLE_ADMIN'::character varying])::text[])))
);


ALTER TABLE public.member OWNER TO d3v3lop3rs;

--
-- Name: member_member_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.member ALTER COLUMN member_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.member_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: question; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.question (
    question_id bigint NOT NULL,
    answer_average double precision DEFAULT 0.0,
    answer_count bigint DEFAULT 0,
    challenge_count bigint DEFAULT 0,
    content text NOT NULL,
    standard_answer text NOT NULL
);


ALTER TABLE public.question OWNER TO d3v3lop3rs;

--
-- Name: question_job; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.question_job (
    question_job_id bigint NOT NULL,
    job_id bigint NOT NULL,
    question_id bigint NOT NULL
);


ALTER TABLE public.question_job OWNER TO d3v3lop3rs;

--
-- Name: question_job_question_job_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.question_job ALTER COLUMN question_job_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.question_job_question_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: question_question_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.question ALTER COLUMN question_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.question_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: question_skill; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.question_skill (
    question_skill bigint NOT NULL,
    question_id bigint NOT NULL,
    skill_id bigint NOT NULL
);


ALTER TABLE public.question_skill OWNER TO d3v3lop3rs;

--
-- Name: question_skill_question_skill_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.question_skill ALTER COLUMN question_skill ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.question_skill_question_skill_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: served_question; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.served_question (
    served_question_id bigint NOT NULL,
    is_daily boolean,
    is_solved boolean,
    served_at date,
    member_id bigint NOT NULL,
    question_id bigint NOT NULL
);


ALTER TABLE public.served_question OWNER TO d3v3lop3rs;

--
-- Name: served_question_served_question_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.served_question ALTER COLUMN served_question_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.served_question_served_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: skill; Type: TABLE; Schema: public; Owner: d3v3lop3rs
--

CREATE TABLE public.skill (
    skill_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    CONSTRAINT skill_name_check CHECK (((name)::text = ANY ((ARRAY['C'::character varying, 'C_PLUS'::character varying, 'C_SHARP'::character varying, 'JAVA'::character varying, 'JAVASCRIPT'::character varying, 'HTML'::character varying, 'CSS'::character varying, 'PYTHON'::character varying, 'GO'::character varying, 'NETWORK'::character varying, 'DATABASE'::character varying, 'ALGORITHM'::character varying, 'DATA_STRUCTURE'::character varying, 'OPERATING_SYSTEM'::character varying, 'REACT'::character varying, 'VUE'::character varying, 'ANGULAR'::character varying, 'TYPESCRIPT'::character varying, 'SASS'::character varying, 'SPRING'::character varying, 'SPRING_BOOT'::character varying, 'NODE_JS'::character varying, 'EXPRESS'::character varying, 'DJANGO'::character varying, 'FLASK'::character varying, 'RUBY'::character varying, 'SWIFT'::character varying, 'KOTLIN'::character varying, 'FLUTTER'::character varying, 'REACT_NATIVE'::character varying, 'OBJECTIVE_C'::character varying, 'MYSQL'::character varying, 'POSTGRESQL'::character varying, 'MONGODB'::character varying, 'ORACLE'::character varying, 'SQLITE'::character varying, 'REDIS'::character varying, 'MARIADB'::character varying, 'DOCKER'::character varying, 'KUBERNETES'::character varying, 'AWS'::character varying, 'AZURE'::character varying, 'GCP'::character varying, 'TERRAFORM'::character varying, 'ANSIBLE'::character varying, 'JENKINS'::character varying, 'GITHUB_ACTION'::character varying, 'GITLAB_RUNNER'::character varying, 'R'::character varying, 'NUMPY'::character varying, 'PANDAS'::character varying, 'TENSORFLOW'::character varying, 'PYTORCH'::character varying, 'MATPLOTLIB'::character varying, 'SCIKIT_LEARN'::character varying, 'HADOOP'::character varying, 'SPARK'::character varying, 'KERAS'::character varying, 'MLLIB'::character varying, 'OPENCV'::character varying, 'NLTK'::character varying, 'UNITY'::character varying, 'UNREAL_ENGINE'::character varying, 'GODOT'::character varying, 'BLENDER'::character varying, 'ASSEMBLY'::character varying, 'MICROCONTROLLERS'::character varying, 'RTOS'::character varying, 'IOT'::character varying, 'KALI_LINUX'::character varying, 'WIRESHARK'::character varying, 'METASPLOIT'::character varying, 'BURP_SUITE'::character varying, 'NMAP'::character varying, 'OWASP'::character varying, 'ENCRYPTION'::character varying, 'SOLIDITY'::character varying, 'ETHEREUM'::character varying, 'HYPERLEDGER'::character varying, 'WEB3_JS'::character varying, 'TRUFFLE'::character varying, 'GANACHE'::character varying, 'JUNIT'::character varying, 'SELENIUM'::character varying, 'CUCUMBER'::character varying, 'TESTING'::character varying, 'APPIUM'::character varying, 'GRAPHQL'::character varying, 'SQL'::character varying, 'HEADLESS_CMS'::character varying, 'GATSBY'::character varying, 'NEXT_JS'::character varying, 'LINUX_KERNEL'::character varying, 'WEBSOCKET'::character varying, 'D3_JS'::character varying, 'SERVERLESS_FRAMEWORK'::character varying, 'BERT'::character varying, 'WEBPACK'::character varying, 'MODULE_FEDERATION'::character varying, 'GRAPHICS'::character varying, 'RUST'::character varying, 'WEBASSEMBLY'::character varying, 'APOLLO'::character varying, 'KIBANA'::character varying, 'LOGSTASH'::character varying, 'ELASTICSEARCH'::character varying, 'NUXT'::character varying, 'JETPACK'::character varying, 'GIT'::character varying, 'KAFKA'::character varying, 'DART'::character varying, 'DESIGN_PATTERN'::character varying, 'HTTP'::character varying, 'TCP'::character varying, 'UDP'::character varying, 'REST'::character varying, 'DATABASE_OPTIMIZATION'::character varying, 'INDEXING'::character varying, 'VIRTUAL_MEMORY'::character varying, 'MEMORY_MANAGEMENT'::character varying, 'OAUTH'::character varying, 'AUTHENTICATION'::character varying, 'API_SECURITY'::character varying, 'VIRTUALIZATION'::character varying, 'CONTAINERIZATION'::character varying, 'BLOCKCHAIN'::character varying, 'CRYPTOCURRENCY'::character varying, 'DISTRIBUTED_SYSTEMS'::character varying, 'MACHINE_LEARNING'::character varying, 'STATISTICAL_LEARNING'::character varying, 'MODEL_EVALUATION'::character varying, 'VIRTUAL_DOM'::character varying, 'DISTRIBUTED_COMPUTING'::character varying, 'SYSTEM_DESIGN'::character varying, 'CONSISTENCY'::character varying, 'TLS'::character varying, 'SSL'::character varying, 'NETWORK_SECURITY'::character varying, 'VERSION_CONTROL'::character varying, 'COLLABORATION'::character varying, 'TREE_STRUCTURES'::character varying, 'CONTAINER_ORCHESTRATION'::character varying, 'CLOUD_NATIVE'::character varying, 'TRANSACTIONS'::character varying, 'DATA_INTEGRITY'::character varying, 'FUNCTIONAL_PROGRAMMING'::character varying, 'HASKELL'::character varying, 'SCALA'::character varying, 'PATHFINDING'::character varying, 'AI'::character varying, 'GARBAGE_COLLECTION'::character varying, 'WEB_SECURITY'::character varying, 'BROWSER_APIS'::character varying, 'MAPREDUCE'::character varying, 'DATABASE_INDEXING'::character varying, 'JWT'::character varying, 'RXJS'::character varying, 'REACTIVE_PROGRAMMING'::character varying, 'ASYNCHRONOUS_PROGRAMMING'::character varying, 'LOAD_BALANCING'::character varying, 'SCALABILITY'::character varying, 'DESIGN_PATTERNS'::character varying, 'INVERSION_OF_CONTROL'::character varying, 'PROBABILISTIC_DATA_STRUCTURES'::character varying, 'SPACE_EFFICIENCY'::character varying, 'GRPC'::character varying, 'PROTOCOL_BUFFERS'::character varying, 'INFORMATION_RETRIEVAL'::character varying, 'FULL_TEXT_SEARCH'::character varying, 'CQRS'::character varying, 'EVENT_SOURCING'::character varying, 'GOLANG'::character varying, 'CONCURRENCY'::character varying, 'PARALLEL_PROGRAMMING'::character varying, 'SERVERLESS'::character varying, 'AWS_LAMBDA'::character varying, 'FAAS'::character varying, 'NOSQL'::character varying, 'DISTRIBUTED_DATABASES'::character varying, 'PERFORMANCE_OPTIMIZATION'::character varying, 'COMPUTATIONAL_COMPLEXITY'::character varying, 'MESSAGE_QUEUES'::character varying, 'EVENT_DRIVEN_ARCHITECTURE'::character varying, 'MEMORY_SAFETY'::character varying, 'CI_CD'::character varying, 'GITLAB_CI'::character varying, 'API_GATEWAY'::character varying, 'DISTRIBUTED_LEDGER'::character varying, 'NGINX'::character varying, 'REVERSE_PROXY'::character varying, 'SOLID_PRINCIPLES'::character varying, 'OBJECT_ORIENTED_DESIGN'::character varying, 'STREAM_PROCESSING'::character varying, 'QUBITS'::character varying, 'QUANTUM_GATES'::character varying, 'REDUX'::character varying, 'STATE_MANAGEMENT'::character varying, 'CONFIGURATION_MANAGEMENT'::character varying, 'CACHING'::character varying, 'MEMCACHED'::character varying, 'DEEP_LEARNING'::character varying, 'WEBRTC'::character varying, 'P2P'::character varying, 'ISTIO'::character varying, 'SERVICE_MESH'::character varying, 'RDD'::character varying, 'DAG'::character varying, 'WORKFLOW_ORCHESTRATION'::character varying, 'ACID'::character varying, 'BASE'::character varying, 'PWA'::character varying, 'SERVICE_WORKERS'::character varying, 'SMART_CONTRACTS'::character varying, 'ZERO_KNOWLEDGE_PROOFS'::character varying, 'PRIVACY'::character varying, 'COROUTINES'::character varying, 'APACHE_CASSANDRA'::character varying, 'INFLUXDB'::character varying, 'DATA_STORAGE'::character varying, 'WORKSPACE'::character varying, 'ENVIRONMENT_MANAGEMENT'::character varying, 'FEDERATION'::character varying, 'OWNERSHIP'::character varying, 'SHARDING'::character varying, 'DATA_PERSISTENCE'::character varying, 'APACHE_FLINK'::character varying, 'QUERY_DSL'::character varying, 'AGGREGATION_FRAMEWORK'::character varying, 'GRPC_WEB'::character varying, 'HTTP2'::character varying, 'CALICO'::character varying, 'COLUMNAR_FORMAT'::character varying, 'DATA_PROCESSING'::character varying, 'FIBER'::character varying, 'RENDERING_OPTIMIZATION'::character varying, 'KSQLDB'::character varying, 'CONTEXT'::character varying, 'DATALOADER'::character varying, 'AUTOSCALING'::character varying, 'RESOURCE_MANAGEMENT'::character varying, 'GOSSIP_PROTOCOL'::character varying, 'MULTITHREADING'::character varying, 'GRAPHICS_PROGRAMMING'::character varying, 'SOFTWARE_ENGINEERING'::character varying, 'SECURITY'::character varying, 'WEB'::character varying, 'COMPUTER_ARCHITECTURE'::character varying])::text[])))
);


ALTER TABLE public.skill OWNER TO d3v3lop3rs;

--
-- Name: skill_skill_id_seq; Type: SEQUENCE; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE public.skill ALTER COLUMN skill_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.skill_skill_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: answer; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.answer (answer_id, access_level, content, created_at, member_id, question_id) FROM stdin;
1	PUBLIC	ddd	2025-02-18 10:50:50.719716	1	452
2	PUBLIC	DFS란 순환 알고리즘으로 트리나 그래프를 탐색할 때 깊이를 우선적으로 탐색하는 기법입니다.\nDFS는 하나의 시 노드에서 자식 노드들을 순서대로 확인하면서 탐색을 진행합니다.	2025-02-18 14:28:25.338351	2	311
3	PUBLIC	IDK	2025-02-18 14:29:43.030257	2	426
4	PUBLIC	IDK	2025-02-18 14:31:49.986026	2	387
5	PUBLIC	IDK	2025-02-18 14:32:07.813541	2	393
6	PUBLIC	ios::sync_with_stdio(false);을 선언하여 C언어의 입출력과 동기화를 끊어 속도를 향상 시킬 수 있습니다. 하지만 C언어 스타일의 입출력 함수인 scanf, printf와 C++ 스타일의 입출력 함수인 cin, cout 을 동시에 사용하면 안됩니다.\n또한 cin.tie(NULL);을 선언하여 cout과의 동기화를 끊어 속도를 향상 시킬 수 있습니다.	2025-02-18 14:57:12.623058	3	393
7	PUBLIC	하나의 큰 문제를 여러 개의 작은 문제로 쪼개서 푸는 알고리즘 기법 중 하나로, 메모이제이션을 사용하여 중복되는 부분 구조를 한 번만 계산하여 최적화합니다. 분할 정복 알고리즘과 문제를 쪼갠다는 점에서 비슷해 보일 수 있지만 분할 정복은 쪼개진 작은 문제들이 중복되지 않는 점에서 큰 차이점이 있습니다.\nDP의 대표적인 예시로는 피보나치 수열, 배낭 문제, 타일 채우기, 계단 오르기, LIS 등이 있습니다.	2025-02-18 16:13:29.399345	3	315
8	PUBLIC	운영체제(Operating System, OS)는 컴퓨터 하드웨어와 소프트웨어 간의 중재자 역할을 하며, 자원 관리와 사용자 인터페이스를 제공합니다. 주요 기능으로는 프로세스 관리, 메모리 관리, 파일 시스템 관리, 디바이스 관리, 보안 등이 있습니다. 운영체제는 멀티태스킹, 자원 효율화, 데이터 보호를 통해 안정적이고 효율적인 시스템 운영을 지원합니다. 대표적인 운영체제로는 Windows, Linux, macOS, Android 등이 있습니다.	2025-02-18 17:48:14.006961	3	334
9	PUBLIC	운영체제(Operating System, OS)는 컴퓨터 하드웨어와 소프트웨어 간의 중재자 역할을 하며, 자원 관리와 사용자 인터페이스를 제공합니다. 주요 기능으로는 프로세스 관리, 메모리 관리, 파일 시스템 관리, 디바이스 관리, 보안 등이 있습니다. 운영체제는 멀티태스킹, 자원 효율화, 데이터 보호를 통해 안정적이고 효율적인 시스템 운영을 지원합니다. 대표적인 운영체제로는 Windows, Linux, macOS, Android 등이 있습니다.	2025-02-18 18:01:01.604669	3	334
10	PUBLIC	직렬화는 여러가지 일을 동시에 처리하지 않고 순서를 정해 순차적으로 일을 실행하는 것입니다.	2025-02-19 00:27:27.929524	6	399
11	PUBLIC	bean에 따라 범위가 달라집니다.	2025-02-19 00:28:04.39438	6	376
12	PUBLIC	프로세스는 작업 단위이고, 스레드는 프로세스의 실행 흐름입니다.	2025-02-19 00:36:52.602366	6	335
13	PUBLIC	rest api는 서버와 클라이언트 간의 통신하는 방식으로 http method로 데이터 처리 방식을 표기하고 url로 처리할 데이터들을 표기하는 방식으로 사용합니다.	2025-02-19 00:51:12.10823	6	413
14	PROTECTED	DFS는 깊이 우선 탐색으로 경우의 수를 찾아서 확인하는 경우 자주 사용하는 알고리즘입니다.	2025-02-19 00:53:02.317184	6	311
15	PUBLIC	spring에서 제공하는 기본 서브넷입니다. \nspring에 들어오는 요청은 dispatcherservlet을 이용하여 요청을 처리합니다.	2025-02-19 01:17:56.939768	6	452
16	PUBLIC	IDK	2025-02-19 03:04:34.423191	5	303
17	PUBLIC	삽입 정렬은 정렬된 부분에 새로운 요소를 적절한 위치에 삽입하는 방식의 정렬 알고리즘입니다. 이미 정렬된 부분과 비교하며 적절한 위치를 찾아 삽입하는 과정을 반복합니다. 평균 및 최악의 경우 O(n^2)의 시간 복잡도를 가지지만, 거의 정렬된 경우 O(n)까지 성능이 향상됩니다. 적은 데이터셋이나 정렬이 거의 완료된 데이터에서 효과적입니다.	2025-02-19 03:04:39.917575	5	303
18	PUBLIC	SQL 인젝션은 말이죠...... IDK	2025-02-19 03:09:51.558654	6	351
19	PUBLIC	dtd	2025-02-19 03:26:51.538209	7	356
20	PUBLIC	처음 들어봐요.... IDK	2025-02-19 03:52:04.909816	3	434
21	PROTECTED	dp는 알고리즘에서 자주 나오는데 큰 문제를 작은 단위로 나눠서 해결하는 방식으로 처리합니다. 점화식을 세워서 주로 풉니다.	2025-02-19 03:57:04.211825	6	315
22	PUBLIC	dispatcher servlet은 http 요청을 처리하고 적절한 컨트롤러를 전달하는 방식으로 동작합니다.	2025-02-19 03:57:52.255543	6	452
23	PUBLIC	둘 다 http 메서드인데 get은 데이터를 조회할때 사용하고 post는 데이터를 생성할 때 사용합니다.\n\nget은 query param이나 path variable로 요청 데이터를 전달할 수 있고 request body로는 요청 데이터 전달이 불가능한 반면\npost는 request body를 포함한 모든 방식으로 요청 데이터 전달이 가능합니다.	2025-02-19 04:04:18.773463	6	6
24	PUBLIC	garbage collection은 java 내에 사용이 되지 않는 데이터를 지워주는 역할을 합니다.\n사용되지 않는 데이터를 지워 메모리의 빈 공간을 만드는 데 도움이 됩니다.\n\n동작 방식에 대해서는 잘 모르겟습니다.	2025-02-19 04:07:30.094213	6	59
25	PUBLIC	Web Server는 웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(html, css, 이미지 등)를 제공해주는 컴퓨터 프로그램입니다.\nWAS는 Web Application Server의 줄임말로 DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠(PHP, ASP, JSP, Servlet 등)를 제공하기 위해 만들어진 Application Server입니다.	2025-02-19 04:25:16.789033	3	414
26	PUBLIC	디스패처 서블릿의 dispatch는 "보내다"라는 뜻을 가지고 있습니다. 그리고 이러한 단어를 포함하는 디스패처 서블릿은 HTTP 프로토콜로 들어오는 모든 요청을 가장 먼저 받아 적합한 컨트롤러에 위임해주는 프론트 컨트롤러(Front Controller)라고 정의할 수 있습니다.	2025-02-19 04:31:12.411216	3	452
27	PUBLIC	이이잉 몰라	2025-02-19 04:55:39.160955	9	63
28	PUBLIC	오버라이딩은 상위 클래스의 메서드를 재정의 하는 것이고 오버로딩은 같은 클래스 내에 동일한 메서드 이름을 가지지만 매개변수의 타입, 개수를 다르게 구현할 수 있는 것을 의미합니다.	2025-02-19 05:37:42.562554	9	63
29	PUBLIC	데이터를 관리하는 방식 중 하나로 하드디스크와 같은 곳에 데이터를 관리합니다.	2025-02-19 05:38:27.915514	6	348
30	PROTECTED	캐시 메모리는 CPU와 메인 메모리 간의 속도 차이를 줄이기 위해 사용되는 고속 메모리입니다. 주로 자주 사용되거나 접근될 가능성이 높은 데이터를 임시 저장하여 CPU가 이를 빠르게 처리할 수 있도록 돕습니다	2025-02-19 05:38:30.990523	3	320
31	PUBLIC	주기억장치보다 더 큰 용량의 프로그램을 실행하기 위해 프로그램의 일부만 주기억장치에 적재하여 사용합니다. 이를 가상메모리 기법이라 합니다.\n페이징 기법으로 메모리를 관리하는 운영체제에서 필요한 페이지가 주기억장치에 적재되지 않았을 때 어떤 페이지 프레임을 선택하여 교체할 것인지 결정하는 방법을 페이지 교체 알고리즘이라고 합니다. LRU, LFU, FIFO, OPT 등의 방법이 있습니다.	2025-02-19 05:41:48.896628	9	346
32	PUBLIC	기수 정렬(Radix Sort)은 숫자의 자릿수를 기준으로 정렬하는 알고리즘으로, 비교 연산 없이 데이터를 정렬합니다. 낮은 자릿수(LSD)부터 높은 자릿수(MSD)까지 순차적으로 정렬하며, 각 단계에서 안정 정렬(Stable Sort)을 사용합니다. 주로 계수 정렬(Counting Sort)을 활용하여 구현되며, 시간 복잡도는 O(dn)입니다.	2025-02-19 05:44:39.887039	3	307
38	PUBLIC	아..저는 ec2와 s3를 이용하여 aws 인프라를 구축해본 적이 있습니다.	2025-02-19 05:50:22.819224	6	130
33	PUBLIC	global 키워드는 변수를 선언하면 전역변수로 간주됩니다. 그에 반해 nonlocal 키워드로 변수를 선언하면 본인의 스코프 바깥 방향으로 가장 가까운 변수를 찾습니다. 이 경우 전역 변수는 제외됩니다.	2025-02-19 05:44:51.542796	9	118
34	PUBLIC	HTTP 는 typertext transpart protocol의 약자로 인터넷에서 데이터를 통신하는 방식입니다.\nhttps는 http에 ssl을 적용하여 데이터 통신 시에 데이터를 암호화 하여 전달하는 방식으로 더 안전하기 때문에 https를 사용하는 것을 더 권장하고 있습니다.	2025-02-19 05:45:31.568787	6	4
35	PUBLIC	잘 모르겠어요 IDK	2025-02-19 05:46:30.506025	3	434
36	PUBLIC	내부 단편화는 할당된 메모리 블록 내부에 사용되지 않는 공간이 생기는 현상으로, 주로 고정 크기 블록에서 발생합니다. 외부 단편화는 메모리가 여러 조각으로 나뉘어 총 여유 공간은 충분하지만 연속적인 큰 공간을 확보하지 못하는 문제입니다. 내부 단편화는 블록 크기를 조정하거나 가변 크기 할당 방식으로 줄일 수 있습니다. 외부 단편화는 메모리 압축(compaction)이나 페이징 기법으로 해결할 수 있습니다. 두 문제 모두 효율적인 메모리 관리를 위해 중요한 고려 사항입니다.	2025-02-19 05:48:41.496714	3	434
37	PRIVATE	AWS를 활용한 경험은 주로 클라우드 인프라 구축과 운영에 중점을 둡니다. Amazon EC2, S3, RDS 등을 사용해 애플리케이션을 배포하고 데이터 저장소를 관리했습니다. IAM을 통해 보안 정책을 설정하고, Auto Scaling과 CloudWatch로 리소스를 모니터링하며 효율성을 높였습니다. Lambda와 API Gateway를 활용해 서버리스 아키텍처를 구현한 경험도 있습니다. 이러한 작업을 통해 클라우드 기반 애플리케이션의 확장성과 안정성을 확보했습니다.	2025-02-19 05:50:22.678147	3	130
39	PUBLIC	IDK	2025-02-19 06:15:38.643763	9	474
40	PUBLIC	TCP와 UDP는 ...	2025-02-19 09:25:33.22315	2	2
41	PUBLIC	배열? 그게 뭐에요? 기찬가 ㅋㅋ	2025-02-19 09:39:26.044158	1	324
42	PUBLIC	아하 인덱스가 그런거구나~	2025-02-19 09:39:35.880247	1	324
43	PUBLIC	둘다 수정하는 메서드..?	2025-02-19 09:41:46.771435	5	411
44	PUBLIC	죄송합니다.. 이 질문은 잘 모르겠어요....	2025-02-19 09:42:09.88946	5	411
45	PUBLIC	둘 다 http 메서드 중 수정을 할 때 사용하는 메서드 입니다.	2025-02-19 09:42:43.098476	5	411
46	PUBLIC	앞 둘다 http 메소드 인데요 전철에서 정할 때 사용하는 메서드인 반면에 패치는 일부데이터 만수동 할 때 사용하는 카드입니다	2025-02-19 09:45:05.639687	5	411
47	PUBLIC	앞 둘다 http 메소드 인데요 put은 전체를 수정할 때 사용하는 메서드인 반면에 패치는 일부데이터 만 수정 할 때 사용하는 메서드입니다.	2025-02-19 09:46:25.626625	5	411
48	PUBLIC	S는 안전하다~!~	2025-02-19 10:00:39.963637	1	4
49	PUBLIC	ks;lvdkl;	2025-02-19 10:00:56.098465	6	303
50	PUBLIC	IDK	2025-02-19 10:00:56.729498	3	84
51	PUBLIC	tcp는 tc로 시작하고 udp는 ud로 시작함	2025-02-19 10:01:08.703664	1	2
52	PUBLIC	IDK	2025-02-19 10:01:08.705507	3	83
53	PUBLIC	IDK	2025-02-19 10:01:08.803644	6	434
54	PUBLIC	IDK	2025-02-19 10:01:19.213104	3	85
55	PUBLIC	klf;ewkfl;ew	2025-02-19 10:01:22.337315	6	130
56	PUBLIC	인푸라푸라인푸라덴푸라	2025-02-19 10:01:29.22689	1	130
57	PUBLIC	IDK	2025-02-19 10:01:39.298501	3	86
58	PUBLIC	모르겠어요 ㅠㅠㅠ	2025-02-19 10:01:56.175596	3	89
59	PUBLIC	IDK	2025-02-19 10:02:06.683381	1	6
60	PUBLIC	IDK	2025-02-19 10:02:21.555196	3	87
61	PUBLIC	Spring Web MVC의 DispatcherServlet은 Front Controller 패턴을 구현한 핵심 컴포넌트로, 모든 HTTP 요청을 중앙에서 처리하고 적절한 핸들러로 위임합니다.\n클라이언트 요청을 수신하고, URL을 기반으로 적합한 컨트롤러를 찾기 위해 Handler Mapping을 사용합니다.\n매칭된 컨트롤러를 실행하기 위해 Handler Adapter를 통해 요청을 전달합니다.\n컨트롤러는 비즈니스 로직을 처리하고, 결과를 ModelAndView 객체로 반환합니다.\nDispatcherServlet은 View Resolver를 사용해 적절한 뷰를 결정하고 렌더링 작업을 수행합니다.\n최종적으로 생성된 응답 결과를 클라이언트에게 반환합니다	2025-02-19 10:04:20.679246	3	90
62	PUBLIC	최근 AWS 인프라를 구축하면서 EC2, RDS, Redis, Jenkins, GitLab, Docker를 활용한 CI/CD 파이프라인을 설계하고 배포 자동화를 구현했습니다. 보안 강화를 위해 SSH 키 관리 및 보안 그룹 최소 권한 원칙을 적용했고, 비용 최적화를 위해 RDS 자동 종료 및 Auto Scaling을 활용했습니다. 이를 통해 배포 속도를 단축하고 안정적인 서비스 운영 환경을 구축한 경험이 있습니다.	2025-02-19 10:04:25.174361	1	130
63	PUBLIC	DispatcherServlet은 Spring MVC의 핵심 컨트롤러로, 클라이언트의 요청을 받아 적절한 핸들러(Controller)로 전달하고, 반환된 결과를 ViewResolver를 통해 뷰로 변환하여 응답하는 역할을 합니다. 요청을 처리하는 과정에서 HandlerMapping을 이용해 적절한 컨트롤러를 찾고, HandlerAdapter를 통해 실행하며, 인터셉터 등의 기능도 수행할 수 있습니다. Spring의 프론트 컨트롤러 패턴을 구현한 서블릿으로, web.xml이나 @Configuration을 통해 설정됩니다.	2025-02-19 10:14:36.139893	1	452
64	PUBLIC	ㅇㅇㅇㅇㅇㅇㅇㅇㅇ히히이이잏	2025-02-19 10:23:08.843535	1	307
65	PUBLIC	패리티가 뭐지....?	2025-02-19 11:07:29.17292	2	322
66	PUBLIC	강한 결합과 느슨한 결합은 소프트웨어 설계에서 객체나 모듈 간의 의존성을 설명하는 개념으로 강한 결합은 두 객체나 모듈이 서로 직접적으로 의존하는 상태를 의미합니다. 이 경우, 한 객체의 변경이 다른 객체에 직접적인 영향을 미치며, 시스템 전체의 유연성과 재사용성이 낮아집니다. 반대로, 느슨한 결합은 의존성을 최소화하는 설계 방식으로 시스템의 유연성과 확장성을 높일 수 있습니다.	2025-02-19 16:56:51.823421	3	77
67	PRIVATE	우선순위 큐.	2025-02-20 00:03:14.352181	1	328
68	PUBLIC	리스트와 튜플의 차이는 바로바로~~~~ 리 스 트 !	2025-02-20 00:04:05.705463	1	107
69	PUBLIC	strategy pattern	2025-02-20 00:04:27.704925	1	123
70	PUBLIC	통신 프로토콜로...	2025-02-20 00:04:49.907196	2	2
71	PUBLIC	잘 모르겠어요.. IDK	2025-02-20 00:07:12.939064	3	397
72	PUBLIC	IDK	2025-02-20 01:11:17.611634	2	2
73	PUBLIC	ddd	2025-02-20 01:21:22.06828	6	509
74	PUBLIC	TCP는 연결 지향형 프로토콜이고 UDP는 데이터를 데이터그램단위로 전송하는 프로토콜입니다. TCP는 가상 회선을 만들어 신뢰성을 보장하도록(흐름 제어, 혼잡 제어, 오류 제어) 하는 프로토콜로 따로 신뢰성을 보장하기 위한 절차가 없는 UDP에 비해 속도가 느린편입니다. TCP는 그래서 파일전송과 같은 신뢰성이 중요한 서비스에 사용되고, UDP는 스트리밍, RTP와 같이 연속성이 더 중요한 서비스에 사용됩니다. +) 하지만 UDP도 신뢰성을 UDP자체에서 보장하지 않는 것 뿐이지, 개발자가 직접 신뢰성을 보장하도록 할 수 있습니다. 그래서 HTTP/3은 QUIC이라는 프로토콜을 기반으로 하는데, QUIC은 UDP를 기반으로 합니다. 즉, UDP 자체는 신뢰성을 보장하지 않지만, 추가적인 정의를 통해 신뢰성을 보장받을 수 있습니다.	2025-02-20 01:32:02.700334	2	2
75	PUBLIC	sure why not	2025-02-20 01:34:36.499908	10	492
76	PUBLIC	nullPointException 네 이놈	2025-02-20 01:34:57.255642	10	81
77	PUBLIC	List = [] / Tuple = () 아닌??????????????	2025-02-20 01:36:08.587799	10	107
78	PUBLIC	자바의 원시타입은 정수형, 실수형, 문자형, 논리형이 있습니다.\nint는 4바이트, long는 8바이트\nfloat는 4바이트, double는 8바이트\nchar는 2바이트\nboolean는 1바이트	2025-02-20 01:39:07.246104	3	67
79	PUBLIC	Primitive Type은 정수, 실수, 문자, 논리 리터럴 등 실제 데이터 값을 저장하는 타입이고,\nReference Type은 객체를 참조 하는 타입으로 메모리 번지 값을 통해 객체를 참조하는 타입이다.	2025-02-20 01:41:03.449021	3	397
80	PUBLIC	jwt는 하나의 인터넷 표준 방식으로 인증에 필요한 정보를 토큰에 담아 암호화시켜 사용하는 토큰입니다.	2025-02-20 01:43:50.313134	3	416
81	PUBLIC	ddd	2025-02-20 01:54:20.942004	6	519
82	PUBLIC	zzzzzzzzzzzz	2025-02-20 01:56:05.11915	1	307
83	PUBLIC	dddddddddddddd	2025-02-20 01:56:07.559351	1	307
84	PUBLIC	생성자 주입 사용 시 애플리케이션 구동 시점에 순환 참조 에러를 발생할 수 있습니다.	2025-02-20 02:00:06.342304	6	100
85	PUBLIC	null을 null null 하게 다루자!	2025-02-20 07:06:03.491161	10	81
86	PUBLIC	CPU 스케줄링이란 운영체제가 프로세스에 합리적으로 CPU 자원을 할당하는 정책을 만드는 것을 말합니다..	2025-02-20 16:09:22.124179	2	341
87	PUBLIC	나혜원 : 5분 전이라는데 어쩔건데!	2025-02-20 07:13:32.225614	10	81
88	PUBLIC	null 은 null null 하게 처리해요	2025-02-20 07:21:37.894726	10	81
89	PUBLIC	이분 탐색이란 전체를 탐색하는 것이 아니라 배열을 정렬한 후에 2개의 부분으로 나뉘어 각 부분의 경계를 확인하여 조건에 맞는 부분을 다시 탐색하는 방법을 말합니다.	2025-02-20 08:33:40.07777	2	309
90	PUBLIC	정확도(Accuracy)는 전체 데이터에서 모델이 올바르게 예측한 비율을 의미합니다. 하지만 데이터가 불균형할 경우 성능을 과대평가할 수 있습니다.\n\n예시를 들어서 설명을 해보고자 합니다. \n정밀도(Precision)는 모델이 스팸이라고 예측한 이메일 중 실제 스팸일 확률입니다. \n즉, 잘못된 긍정 예측(False Positive)을 줄이는 데 초점을 둡니다. \n반면, 재현율(Recall)은 실제 스팸 중 모델이 올바르게 찾아낸 비율을 의미합니다. \n중요한 데이터를 놓치지 않는 것이 핵심일 때 중요한 지표입니다.\n\n예를 들어, 스팸 필터 모델에서 정밀도가 높으면 정상 메일을 스팸으로 잘못 분류하는 경우(False Positive)가 적고, 재현율이 높으면 실제 스팸을 놓치는 경우(False Negative)가 적습니다.\n\nF1-score는 정밀도와 재현율의 조화 평균으로, 두 지표 간 균형을 맞출 때 사용합니다. 따라서 특정 상황에서는 높은 정밀도가 중요할 수도 있고, 높은 재현율이 더 필요할 수도 있어, 문제의 특성에 따라 적절한 지표를 선택해야 합니다.	2025-02-20 09:50:53.271521	13	523
91	PROTECTED	정확도(Accuracy)는 전체 데이터 중에서 모델이 맞게 예측한 비율을 의미합니다. 하지만 데이터의 불균형이 심하면 실제 성능보다 과대평가될 수 있습니다.\n\n예를 들어, 정밀도(Precision)는 모델이 스팸으로 예측한 이메일 중 실제로도 스팸인 비율을 나타냅니다. 즉, 정상 이메일을 스팸으로 잘못 분류하는(False Positive) 경우를 줄이는 것이 중요할 때 고려해야 할 지표입니다.\n\n반면, 재현율(Recall)은 실제 스팸 이메일 중에서 모델이 제대로 탐지한 비율을 의미합니다. 즉, 중요한 데이터를 놓치지 않는 것이 핵심일 경우 중요한 지표입니다.\n\n예를 들어, 스팸 필터에서 정밀도가 높다면 정상 이메일을 스팸으로 잘못 판단하는 경우가 적고, 재현율이 높다면 실제 스팸을 놓치는 경우(False Negative)가 적습니다.\n\nF1-score는 정밀도와 재현율의 조화 평균으로, 두 지표 간의 균형을 맞추는 데 유용합니다. 따라서 상황에 따라 정밀도를 높이는 것이 중요한지, 재현율을 높이는 것이 중요한지를 판단하고 적절한 지표를 선택해야 합니다.	2025-02-20 10:43:29.307868	13	523
92	PUBLIC	아악 인트 롱 따블 불리언 쇼츠 플롯	2025-02-20 10:57:08.011955	3	67
93	PUBLIC	다툼이 없도록 의견을 원할하게 조율해야 해요	2025-02-21 00:08:37.159861	3	466
94	PUBLIC	JOIN은 SQL에서 여러 테이블의 데이터를 결합할 때 사용하는 키워드입니다. 관계형 데이터베이스에서 테이블 간의 연관성을 활용해 필요한 데이터를 효율적으로 조회할 수 있도록 도와줍니다	2025-02-21 00:12:29.665537	10	29
95	PUBLIC	JOIN은 SQL(Structured Query Language)에서 관계형 데이터베이스 테이블을 조합하여 데이터를 조회할 때 사용되는 명령어입니다. 데이터베이스에서 여러 테이블을 연결하고 결합하는 데 유용하며, 주로 공통된 열(컬럼)을 기준으로 데이터를 합치는 작업을 수행합니다.	2025-02-21 00:13:21.6759	3	29
96	PUBLIC	조인은 두 개의 테이블을 서로 묶어서 하나의 결과를 만들어 내는 것을 말합니다.	2025-02-21 00:21:13.574561	13	350
97	PUBLIC	TTP와 HTTPS는 웹 통신 프로토콜로, 주요 차이는 보안성에 있습니다. HTTP는 데이터를 암호화하지 않고 전송하여 외부 공격에 취약하며, 기본적으로 80번 포트를 사용합니다. 반면, HTTPS는 SSL/TLS를 사용해 데이터를 암호화하며, 443번 포트를 사용해 보안과 기밀성을 보장합니다. HTTPS는 Google 같은 검색엔진에서 선호되어 SEO 측면에서도 유리합니다. 민감한 정보를 다룰 경우 HTTPS가 필수이며, 이는 현대 웹의 표준으로 자리 잡았습니다.	2025-02-21 00:24:51.819791	3	4
98	PUBLIC	팀원을 닥달합니다	2025-02-21 00:25:22.631137	3	465
99	PUBLIC	먼저 지연 원인을 분석하고 리소스 부족, 외부 의존성, 기술적 문제, 요구사항 변경 등 명확하게 원인은 분석하는 것이 중요합니다. 또 지연에 대해 팀원 및 이해관계자와 신속히 공유하고, 발생한 문제와 계획된 대응 방안을 투명하게 설명합니다. 소통은 신뢰를 유지하고 의사결정을 지원받는 데 중요합니다.	2025-02-21 00:26:28.194265	3	465
\.


--
-- Data for Name: article; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.article (article_id, created_at, deleted_at, updated_at, comment_count, content, title, view, category_id, member_id) FROM stdin;
3	2025-02-19 01:03:43.368188	\N	2025-02-20 18:08:45.57217	2	<p>요즘 취업 시장이 꽁꽁 얼어붙었다는데...</p><p>꽁꽁 얼어붙어..?</p><p>꽁꽁 얼어붙은 한강 위로 고양이가 걸어다닙니다.</p><p>꽁꽁 얼어붙은 취시(취업 시장이란 뜻) 위로 개백수가 걸어다닙니다..</p><p>흑흑</p>	취업 할 수 있을꽈..	72	4	2
2	2025-02-18 15:35:22.054193	\N	2025-02-19 05:58:21.567907	1	<p><span class="ql-size-huge">이렇게 멋진 날 안 뽑는다고?</span></p><p><span class="ql-size-huge">이렇게 멋진 날 안 뽑는다고?</span></p><p><span class="ql-size-huge">이렇게 멋진 날 안 뽑는다고?</span></p><p><span class="ql-size-huge">이렇게 멋진 날 안 뽑는다고?</span></p>	이렇게 멋진 날 안 뽑는다고?	19	4	3
5	2025-02-19 01:54:52.984808	\N	2025-02-21 00:53:05.269065	3	<p>재수에요</p><p>네 맞아요</p><p>저 재수해요!!!!!!!!!!!!!!</p>	혹시 리트라이라고 아세요?	20	4	1
1	2025-02-19 00:21:54.209091	\N	2025-02-20 16:54:39.517752	1	<p>그런게 있다면 저부터 좀 알려주세요</p><p>진지해요.</p>	취업 준비에 도움이 되는 정보 공유드립니다.	23	3	2
4	2025-02-19 00:40:33.210712	\N	2025-02-21 00:53:40.994832	1	<p>안녕하세요!</p><p>이제 막 가입했습니다..!!</p><p><br></p><p>팔로우 부탁드려요!!!!</p><p><br></p><p>from 올</p>	팔로우 부탁드려요><	10	4	6
6	2025-02-19 03:39:30.912842	\N	2025-02-21 03:03:25.562706	0	<p>여러분 다들 현대 오토에버 서류 썼나요~?</p><p><br></p><p>제가 오늘 현대 오토에버 기술 면접 후기를 공유드리고자 합니다!!</p><p><br></p><p>주목!</p><p>.</p><p>.</p><p>.</p><p>https://serylee.tistory.com/62</p>	[현대오토에버] 기술 면접 후기 공유드려요~	18	3	6
8	2025-02-19 10:31:00.686011	\N	2025-02-21 03:15:02.886516	1	<p>매일매일 데브 열심히 풀어야겠다</p>	나도 취업하고싶다... 또르르	13	4	3
13	2025-02-20 08:43:53.715475	\N	2025-02-21 00:20:27.669068	1	<p>cs 준비 다들 어떻게 하나요?</p>	cs 준비 다들 어떻게 하나요? 	18	3	6
12	2025-02-20 08:37:51.531185	\N	2025-02-21 00:20:31.076543	0	이 시간에도 cs 공부하는 당신 멋져요><	굿 이브닝	18	4	11
11	2025-02-20 08:28:09.821385	\N	2025-02-21 03:03:43.102669	0	<p>면접 긴장돼요</p><p>다들 준비 잘 하셨나요?</p>	하.. 면접 긴장돼요	14	4	11
10	2025-02-20 02:05:51.301826	\N	2025-02-21 03:24:52.991216	3	<p>오늘 점심 뭐먹지</p><p>메뉴 추천좀</p>	점메추 해주세요	36	4	11
14	2025-02-20 14:17:53.225646	\N	2025-02-21 03:25:31.754773	1	<p><span class="ql-size-huge">이번주 날씨 진짜 추워요</span></p><p><span class="ql-font-monospace">감기 조심하세요!</span></p><p><strong>요즘 아프면 눈물나여</strong></p><p><span style="color: rgb(230, 0, 0);">몸조심 마음조심 </span></p>	이번주 날씨	30	4	5
16	2025-02-21 02:07:47.23149	\N	2025-02-21 03:25:22.947639	2	<p>우리 노력한거 발표하는 날이라 너무 너무 긴장되지만 </p><p>너무 너무 신난당</p><p>다들 고생했어요 ~~~</p><p><br></p><p><br></p><p>질문은...</p>	오늘 D3V 발표날!	12	4	13
17	2025-02-21 02:08:01.784812	\N	2025-02-21 03:14:13.595896	0	<p>6반 여러분 7주 동안 다들 고생 많았어요~~</p>	다들 정말 고생 많았습니다!!!	9	4	3
15	2025-02-21 02:06:44.87309	\N	2025-02-21 03:24:38.289272	0	<p>모두 모두 화이팅하자요 ❤️</p>	아 떨리네요.. 발표가...	3	4	2
7	2025-02-19 04:00:41.696712	\N	2025-02-21 03:23:43.198081	0	<p>[삼성 SDS] 최종 합격 후기</p><p><br></p><p>삼성 SDS 면접 후기를 공유합니다!</p><p><br></p><p>저처럼 면접 준비하시는 분들께 도움이 되길 바랍니다.😊</p><p><br></p><p><br></p><p>📌 <b>1차 면접 (직무 면접 & 창의성 면접)</b></p><p><br></p><p>1차 면접은 주로 CS(Computer Science) 기본 개념을 평가하는 직무 면접과, 논리적인 사고력을 확인하는 창의성 면접으로 나뉩니다.</p><p><br></p><p>👨‍💻 <b>직무 면접</b></p><p>✔️ TCP와 UDP의 차이를 설명해보세요.</p><p>✔️ 데이터베이스 인덱스의 원리를 아시나요?</p><p>✔️ Deadlock이 발생하는 4가지 조건을 말해보세요.</p><p><br></p><p>👉 CS 개념을 단순히 암기하기보다는, <b>실제 프로젝트 경험과 연결</b>해서 답변하면 좋습니다!</p><p><br></p><p>🧠 <b>창의성 면접</b></p><p>✔️ 자율주행차가 사고를 냈을 때, AI는 어떻게 판단해야 할까요?</p><p>✔️ 본인이 개발한 서비스에서 장애가 발생하면 어떻게 대응하겠습니까?</p><p><br></p><p>👉 정답이 없는 질문이 많아, <b>논리적인 사고 과정</b>을 면접관에게 잘 설명하는 것이 중요합니다! 더 많은 답변은 D3V를 확인해주세요</p><p><br></p><p><br></p><p>📌 <b>2차 면접 (임원 면접)</b></p><p><br></p><p>2차 면접은 지원자의 인성과 조직 적합성을 평가하는 과정입니다.</p><p><br></p><p>✔️ 삼성 SDS를 선택한 이유는 무엇인가요?</p><p>✔️ 회사에서 가장 중요하게 생각하는 가치는 무엇이라고 생각하나요?</p><p>✔️ 협업 중 갈등을 겪은 경험이 있나요? 어떻게 해결했나요?</p><p><br></p><p>👉 삼성 SDS의 <b>최근 사업 방향</b>과 본인의 경험을 연결해서 답변하는 것이 합격의 핵심!</p><p><br></p><p><br></p><p>🔥 <b>최종 합격 꿀팁</b> 🔥</p><p><br></p><p>✔️ CS 개념은 단순 암기가 아닌, <b>실무 사례와 함께 설명</b>하기!</p><p>✔️ 창의성 면접에서는 논리적인 사고 과정을 명확하게 전달!</p><p>✔️ 삼성 SDS의 최근 사업을 파악하고, <b>내가 어떻게 기여할 수 있을지</b> 어필!</p><p><br></p><p>이제 남은 것은 여러분의 도전! 💪</p><p><br></p><p>모두 최종 합격 가자! </p>\n	[삼성 SDS] 최종 합격 후기	13528	1	6
9	2025-02-19 10:47:54.891279	\N	2025-02-21 03:24:59.290672	0	<p><br></p><p>삼성 SDS 면접 후기를 공유합니다!</p><p><br></p><p>저처럼 면접 준비하시는 분들께 도움이 되길 바랍니다.😊</p><p><br></p><p><br></p><p>📌 1차 면접 (직무 면접 &amp; 창의성 면접)</p><p><br></p><p>1차 면접은 주로 CS(Computer Science) 기본 개념을 평가하는 직무 면접과, 논리적인 사고력을 확인하는 창의성 면접으로 나뉩니다.</p><p><br></p><p>👨‍💻 직무 면접</p><p>✔️ TCP와 UDP의 차이를 설명해보세요.</p><p>✔️ 데이터베이스 인덱스의 원리를 아시나요?</p><p>✔️ Deadlock이 발생하는 4가지 조건을 말해보세요.</p><p><br></p><p>👉 CS 개념을 단순히 암기하기보다는, 실제 프로젝트 경험과 연결해서 답변하면 좋습니다!</p><p><br></p><p><br></p><p>🧠 창의성 면접</p><p>✔️ 자율주행차가 사고를 냈을 때, AI는 어떻게 판단해야 할까요?</p><p>✔️ 본인이 개발한 서비스에서 장애가 발생하면 어떻게 대응하겠습니까?</p><p><br></p><p>👉 정답이 없는 질문이 많아, 논리적인 사고 과정을 면접관에게 잘 설명하는 것이 중요합니다!</p><p><br></p><p><br></p><p>📌 2차 면접 (임원 면접)</p><p><br></p><p>2차 면접은 지원자의 인성과 조직 적합성을 평가하는 과정입니다.</p><p><br></p><p>✔️ 삼성 SDS를 선택한 이유는 무엇인가요?</p><p>✔️ 회사에서 가장 중요하게 생각하는 가치는 무엇이라고 생각하나요?</p><p>✔️ 협업 중 갈등을 겪은 경험이 있나요? 어떻게 해결했나요?</p><p><br></p><p>👉 삼성 SDS의 최근 사업 방향과 본인의 경험을 연결해서 답변하는 것이 합격의 핵심!</p><p><br></p><p><br></p><p>🔥 최종 합격 꿀팁 🔥</p><p><br></p><p>✔️ D3V와 함께 면접 준비하기!</p><p>✔️ 음성 녹음 기능으로 실전처럼 준비하기!</p><p>✔️ 가장 중요한 것은...!! 3개의 오늘의 문제로 꾸준하게 준비하기!!!</p><p><br></p><p>이제 남은 것은 여러분의 도전! 💪</p>	25년 상반기 삼성 SDS 합격 후기	39	1	6
\.


--
-- Data for Name: article_image; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.article_image (article_image_id, image_url, origin_image_name, article_id) FROM stdin;
2	https://d3v-image-bucket.s3.amazonaws.com/article/image/9e7a6a35-f%EC%9D%B4%EB%A0%87%EA%B2%8C%EB%A9%8B%EC%A7%84%EB%82%A0%EC%95%88%EB%BD%91%EB%8A%94%EB%8B%A4%EA%B3%A0.png	이렇게멋진날안뽑는다고.png	2
3	https://d3v-image-bucket.s3.amazonaws.com/article/image/077723ab-0%EB%82%98%EB%8A%94%EC%84%B1%EA%B3%B5%ED%95%9C%EB%8B%A4.jpg	나는성공한다.jpg	4
5	https://d3v-image-bucket.s3.amazonaws.com/article/image/567f0683-01689232305.png	1689232305.png	6
13	https://d3v-image-bucket.s3.amazonaws.com/article/image/318344e4-4001.png	001.png	14
14	https://d3v-image-bucket.s3.amazonaws.com/article/image/bf354a1c-c6F8B8C5F-F0E8-42C5-8256-8E2A84BE9D2D.jpg	6F8B8C5F-F0E8-42C5-8256-8E2A84BE9D2D.jpg	16
\.


--
-- Data for Name: bookmark; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.bookmark (bookmark_id, access_level, description, name, member_id) FROM stdin;
1	PUBLIC	기본 북마크입니다.	기본 북마크	4
2	PUBLIC	기본 북마크입니다.	기본 북마크	5
3	PROTECTED	정ㄹ렬	정렬	5
4	PRIVATE	정렬모음	정렬	1
5	PROTECTED	testtest	test	1
6	PUBLIC	기본 북마크입니다.	기본 북마크	6
7	PUBLIC	25년 상반기 취업 가좌!!	취뽀 가좌><	6
8	PROTECTED	친구공개	친구공개	1
9	PUBLIC	비공개	비공개	1
10	PUBLIC	공개	공개	1
14	PUBLIC	기본 북마크입니다.	기본 북마크	7
15	PUBLIC	기본 북마크입니다.	기본 북마크	8
16	PUBLIC	기본 북마크입니다.	기본 북마크	9
11	PROTECTED		친구공개ㅎㅎ	5
18	PUBLIC	기본 북마크입니다.	기본 북마크	10
19	PUBLIC	기본 북마크입니다.	기본 북마크	11
20	PROTECTED	친구	친구공개	11
21	PRIVATE	비공비공개	비공개	11
22	PUBLIC	공개용	공개북마크	11
23	PRIVATE		비공개	5
24	PROTECTED	스프링스프링스프링	스프링스프링	10
25	PROTECTED	ㅇㅇㅎㅇㅎㅇㅎ	ㅎㅇㅎㅇㅎㅇ	10
26	PRIVATE		ㅇㅇㅇ	10
27	PUBLIC	기본 북마크입니다.	기본 북마크	12
28	PUBLIC		기능	11
29	PRIVATE		허허	11
30	PUBLIC	기본 북마크입니다.	기본 북마크	13
31	PROTECTED	111	11	5
32	PRIVATE	222	22	5
33	PRIVATE	3333	33	5
34	PUBLIC	4444	44	5
35	PROTECTED	555	55	5
36	PROTECTED	777	66	5
37	PUBLIC	888	77	5
38	PRIVATE	888	88	5
39	PROTECTED	9999	99	5
\.


--
-- Data for Name: bookmark_question; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.bookmark_question (bookmark_question_id, bookmark_id, question_id) FROM stdin;
164	2	69
165	3	494
166	3	513
167	2	91
168	3	535
169	2	116
170	3	541
171	2	494
172	2	513
173	2	535
174	2	541
218	21	307
219	19	2
220	20	307
221	19	307
222	22	393
224	22	311
225	22	452
226	22	107
227	22	4
228	22	334
229	22	130
230	22	315
231	22	434
232	22	303
233	22	6
234	22	397
235	22	2
236	22	307
237	4	1
238	4	2
239	4	3
240	18	452
241	18	130
242	18	2
244	18	307
245	18	434
247	18	315
249	18	4
250	18	311
251	18	107
253	18	324
254	18	397
256	11	320
257	18	81
268	28	2
272	28	307
274	28	434
276	28	303
277	28	315
280	28	393
282	28	4
284	28	311
286	28	107
287	28	6
290	28	324
289	22	324
291	28	397
293	22	67
294	28	67
295	22	83
296	28	83
297	28	509
298	22	509
299	28	399
300	22	399
301	28	414
302	22	414
303	28	519
304	22	519
305	22	86
306	28	86
307	28	335
308	22	335
309	28	322
310	22	322
311	28	346
312	22	346
313	28	90
314	22	90
315	22	87
316	28	87
317	28	81
318	22	81
319	22	320
320	28	320
321	28	351
322	22	351
323	28	541
324	28	20
325	29	324
326	29	397
328	29	452
334	29	130
339	29	2
346	29	307
351	29	434
355	29	303
361	29	315
365	29	393
370	29	4
375	29	311
379	29	107
384	29	6
390	20	324
398	21	324
402	29	100
411	24	89
412	26	88
413	24	88
414	18	492
415	31	411
416	34	411
417	36	411
418	38	411
419	39	411
420	30	523
7	16	118
8	16	393
9	16	452
28	16	346
29	9	346
30	8	346
31	8	393
32	9	393
35	8	452
36	9	452
37	8	6
38	9	6
39	8	334
40	9	334
41	8	399
42	9	399
43	8	413
44	9	413
45	8	303
46	9	303
47	8	351
48	9	351
49	8	130
50	9	130
51	8	315
52	9	315
55	8	320
56	9	320
57	8	434
58	9	434
59	10	307
60	4	130
63	2	324
64	3	324
65	2	393
68	3	393
73	2	311
74	3	311
76	2	452
77	3	452
78	2	2
79	3	2
80	2	4
81	3	4
82	2	334
83	3	334
84	2	130
85	3	130
86	2	315
87	3	315
90	2	307
91	3	307
92	2	434
93	2	303
94	3	434
95	2	6
96	3	303
97	3	6
99	11	311
107	4	107
108	8	107
109	7	89
110	7	84
111	7	86
112	6	393
113	6	315
115	18	393
116	18	303
117	18	6
130	11	331
131	11	341
132	11	400
133	11	419
134	11	455
135	11	20
136	11	22
137	11	60
138	11	69
139	11	91
140	11	116
141	11	494
142	11	513
143	11	535
144	3	331
145	11	541
146	3	341
147	3	400
148	2	331
149	3	419
150	2	341
151	3	455
152	2	400
153	3	20
154	2	419
155	3	22
156	2	455
157	3	60
158	2	20
159	3	69
160	3	91
161	2	22
162	2	60
163	3	116
177	21	393
178	19	393
179	20	393
183	20	311
184	19	311
185	21	311
186	20	452
187	19	452
188	20	107
189	21	452
190	19	107
191	21	107
192	20	4
193	19	4
194	20	334
195	21	4
196	21	334
197	20	130
198	19	334
199	21	130
200	20	315
201	19	130
202	19	315
203	21	315
204	20	434
205	21	434
206	21	303
207	19	434
208	20	303
209	21	6
210	19	303
211	20	6
212	21	397
213	19	6
214	20	397
215	21	2
216	19	397
217	20	2
259	11	392
260	22	451
262	21	451
263	28	452
266	28	130
405	26	86
406	24	86
407	25	86
408	25	89
409	26	89
410	25	88
\.


--
-- Data for Name: category; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.category (category_id, name) FROM stdin;
1	JOB_REVIEW
2	QUESTION_REVIEW
3	INFO_SHARING
4	ETC
\.


--
-- Data for Name: comment; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.comment (comment_id, created_at, deleted_at, updated_at, content, article_id, member_id) FROM stdin;
1	2025-02-19 01:02:04.670361	\N	2025-02-19 01:02:04.670361	오... 스고이	2	2
2	2025-02-19 00:44:59.189068	\N	2025-02-19 00:44:59.189068	열심히 찾아볼게요..! 저희 친구해요!	1	6
3	2025-02-19 03:04:51.040968	\N	2025-02-19 03:04:51.040968	눈물...ㅠ	5	6
4	2025-02-19 04:01:49.1683	\N	2025-02-19 04:01:49.1683	싸피 수료 전에 싸탈하고 싶~~~돠!	3	6
5	2025-02-19 09:44:13.544834	\N	2025-02-19 09:44:13.544834	ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ	5	1
6	2025-02-20 00:35:23.651472	\N	2025-02-20 00:35:23.651472	여기 서비스 좋은 거 같아요 ㅎㅎ	8	4
7	2025-02-20 00:36:42.517797	\N	2025-02-20 00:36:54.234607	하지만 당신은 밈박사	3	4
8	2025-02-20 02:06:36.739092	\N	2025-02-20 02:06:36.739092	쌀국수 ㄱㄱ	10	5
10	2025-02-20 03:43:25.11863	\N	2025-02-20 03:43:25.11863	ㅎㅎ	10	5
11	2025-02-20 06:34:38.533094	\N	2025-02-20 06:34:38.533094	나 다시 돌아갈래!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	5	4
12	2025-02-20 08:05:15.560845	\N	2025-02-20 08:05:15.560845	ㅎㅎ	10	11
13	2025-02-20 08:27:41.514008	\N	2025-02-20 08:27:41.514008	ㅎㅎㅎ	4	11
14	2025-02-20 14:30:49.266271	\N	2025-02-20 14:30:49.266271	저는 데브에서 하루에 3개씩 주는 문제들을 무조건 풀어보는 방법으로 준비해요! ㅎㅎ\n꾸준히 하게 되어서 많이 도움이 되는 것 같아용 ㅎㅎ	13	2
15	2025-02-20 16:50:03.206764	\N	2025-02-20 16:50:03.206764	숙지하고 또 숙지해.	14	13
16	2025-02-21 02:08:22.91166	\N	2025-02-21 02:08:22.91166	nono	16	5
17	2025-02-21 02:09:29.715769	\N	2025-02-21 02:09:29.715769	아좌좌 	16	2
\.


--
-- Data for Name: feedback; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.feedback (feedback_id, created_at, deleted_at, updated_at, content, answer_id, member_id) FROM stdin;
1	2025-02-19 00:09:04.489826	\N	2025-02-19 00:09:04.489826	원래 C 언어를 하실 줄 아셨나요? 대단해요..	6	2
2	2025-02-19 00:36:06.429512	\N	2025-02-19 00:36:06.429512	왜 몰랐던거야 ㅠ	5	2
3	2025-02-19 03:04:55.201425	\N	2025-02-19 03:04:55.201425	허허	17	5
4	2025-02-19 03:09:12.149194	\N	2025-02-19 03:09:12.149194	정말... 인간 GPT다..! 멋져요~~~	6	6
5	2025-02-19 03:41:20.376196	\N	2025-02-19 03:41:20.376196	역시 비글님 대단하세요! 곧 취뽀 하시겠어요!	9	6
6	2025-02-19 03:54:06.788017	\N	2025-02-19 03:54:06.788017	우와....이뮤님 누구신가요??\n알고리즘 끝판왕 같으신데....	17	6
7	2025-02-19 04:32:16.404408	\N	2025-02-19 04:32:16.404408	정말 훌륭해요!	22	3
8	2025-02-20 10:57:51.484733	\N	2025-02-20 10:57:51.484733	잘하셨어요	63	3
9	2025-02-20 11:30:59.582401	\N	2025-02-20 11:30:59.582401	제대로 된 차이점을 잘 몰랐었는데 답변 잘 봤습니다!	90	6
10	2025-02-20 11:34:34.470897	\N	2025-02-20 11:34:34.470897	데이터 불균형이 심한 경우, 정확도를 과대평가하게 되는 이유를 수식적으로 설명할 수 있는지 궁금합니다!	90	6
11	2025-02-20 11:37:07.138129	\N	2025-02-20 16:53:51.363251	안녕하세요 olliee님 예를 들어서 설명하고싶습니다.\n암 데이터 같은 경우 암 걸린 사람이 많을까요?\n그렇지 않습니다. 암 데이터에서의 양성/음성처럼 데이터 비율의 불균형이 있는 경우 특정 값에 대한 학습을 더 많이 하기 때문에 모델의 정확도가 올라게 됩니다(정답을 잘 맞추기 때문이죠). 수식 같은 경우는 현재 사이트에서 작성하기 어렵지만, 예시를 들어서 말씀드리면 좀 괜찮을지요 ㅎㅎ?	90	13
12	2025-02-21 00:14:04.967733	\N	2025-02-21 00:14:04.967733	JOIN의 종류에 대해서도 말씀해주신다면 더 완벽한 답변이 될 것 같아요.	95	1
13	2025-02-21 00:28:02.505272	\N	2025-02-21 00:28:02.505272	간단 명료한 답변 좋았습니다. 하지만 좀 더 자세한 설명이 붙는다면 더 좋은 답변이 될 것 같습니다.	14	3
14	2025-02-21 00:28:14.660626	\N	2025-02-21 00:28:14.660626	완벽한 답변인 것 같아요!	2	3
15	2025-02-21 00:28:48.656204	\N	2025-02-21 00:28:48.656204	bbb	73	3
16	2025-02-21 00:55:25.779211	\N	2025-02-21 00:55:25.779211	좋은 답변 감사합니다! 참고할게요	63	5
17	2025-02-21 00:57:45.959011	\N	2025-02-21 00:57:45.959011	역시 와니님이에요. 깔끔한 답변 훌륭합니다. 이번 면접도 화이팅이에요!!	94	3
18	2025-02-21 00:58:29.476194	2025-02-21 00:58:37.716468	2025-02-21 00:58:37.716679	맞네요. 피드백 감사합니다!!	95	3
19	2025-02-21 03:26:41.694463	\N	2025-02-21 03:26:41.694463	우와\n공부 열심히 하셨네요!	63	5
\.


--
-- Data for Name: follow; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.follow (follow_id, follower_id, following_id) FROM stdin;
4	3	2
10	3	6
11	6	3
12	7	1
13	7	2
14	3	7
18	2	7
19	5	2
20	3	5
21	2	6
22	6	2
23	1	5
25	4	2
26	5	11
27	11	5
28	10	13
29	2	5
30	13	10
32	2	1
33	2	3
34	6	13
35	13	6
\.


--
-- Data for Name: history; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.history (history_id, count, date, member_id) FROM stdin;
1	1	2025-02-18	1
18	1	2025-02-19	7
4	9	2025-02-19	1
2	4	2025-02-18	2
5	2	2025-02-19	2
6	16	2025-02-19	3
10	0	2025-02-18	4
3	4	2025-02-18	3
11	0	2025-02-18	5
15	0	2025-02-19	4
16	7	2025-02-19	5
17	17	2025-02-19	6
19	5	2025-01-01	6
20	3	2025-01-02	6
21	7	2025-01-03	6
22	2	2025-01-04	6
23	2	2025-01-05	6
24	2	2025-01-06	6
25	2	2025-01-07	6
26	2	2025-01-08	6
27	2	2025-01-10	6
28	5	2025-01-11	6
29	3	2025-01-12	6
30	7	2025-01-13	6
31	2	2025-01-14	6
32	2	2025-01-15	6
33	2	2025-01-16	6
34	2	2025-01-17	6
35	2	2025-01-18	6
36	2	2025-01-19	6
37	0	2025-01-20	6
38	3	2025-01-21	6
39	7	2025-01-22	6
40	0	2025-01-23	6
41	2	2025-01-24	6
42	0	2025-01-25	6
43	2	2025-01-26	6
44	0	2025-01-27	6
45	1	2025-01-28	6
46	2	2025-01-29	6
47	0	2025-01-30	6
48	2	2025-01-31	6
49	5	2025-02-01	6
50	3	2025-02-02	6
51	7	2025-02-03	6
52	2	2025-02-04	6
53	2	2025-02-05	6
54	2	2025-02-06	6
55	2	2025-02-07	6
56	0	2025-02-08	6
57	2	2025-02-10	6
58	5	2025-02-11	6
59	3	2025-02-12	6
60	7	2025-02-13	6
61	2	2025-02-14	6
62	2	2025-02-15	6
63	0	2025-02-16	6
64	2	2025-02-17	6
65	2	2025-02-18	6
66	2	2024-02-10	6
67	5	2024-02-11	6
68	3	2024-02-12	6
69	7	2024-02-13	6
70	2	2024-02-14	6
71	2	2024-02-15	6
72	0	2024-02-16	6
73	2	2024-02-17	6
74	2	2024-02-18	6
75	2	2024-02-19	6
76	1	2024-02-20	6
77	3	2024-02-21	6
78	4	2024-02-22	6
79	2	2024-02-23	6
80	1	2024-02-24	6
81	0	2024-02-25	6
82	3	2024-02-26	6
83	2	2024-02-27	6
84	1	2024-02-28	6
85	2	2024-02-29	6
86	3	2024-03-01	6
87	4	2024-03-02	6
88	5	2024-03-03	6
89	2	2024-03-04	6
90	1	2024-03-05	6
91	0	2024-03-06	6
92	3	2024-03-07	6
93	2	2024-03-08	6
94	1	2024-03-09	6
95	4	2024-03-10	6
96	3	2024-03-11	6
97	2	2024-03-12	6
98	1	2024-03-13	6
99	2	2024-03-14	6
100	3	2024-03-15	6
101	4	2024-03-16	6
102	5	2024-03-17	6
103	2	2024-03-18	6
104	1	2024-03-19	6
105	0	2024-03-20	6
106	3	2024-03-21	6
107	2	2024-03-22	6
108	1	2024-03-23	6
109	4	2024-03-24	6
110	3	2024-03-25	6
111	2	2024-03-26	6
112	1	2024-03-27	6
113	2	2024-03-28	6
114	3	2024-03-29	6
115	4	2024-03-30	6
116	5	2024-03-31	6
117	2	2024-04-01	6
118	3	2024-04-02	6
119	4	2024-04-03	6
120	2	2024-04-04	6
121	1	2024-04-05	6
122	3	2024-04-06	6
123	0	2024-04-07	6
124	4	2024-04-08	6
125	5	2024-04-09	6
126	3	2024-04-10	6
127	1	2024-04-11	6
128	2	2024-04-12	6
129	4	2024-04-13	6
130	0	2024-04-14	6
131	3	2024-04-15	6
132	2	2024-04-16	6
133	1	2024-04-17	6
134	4	2024-04-18	6
135	3	2024-04-19	6
136	5	2024-04-20	6
137	0	2024-04-21	6
138	0	2024-04-22	6
139	3	2024-04-23	6
140	4	2024-04-24	6
141	2	2024-04-25	6
142	0	2024-04-26	6
143	5	2024-04-27	6
144	3	2024-04-28	6
145	4	2024-04-29	6
146	2	2024-04-30	6
147	3	2024-05-01	6
148	0	2024-05-02	6
149	2	2024-05-31	6
150	3	2024-06-01	6
151	0	2024-06-02	6
152	5	2024-06-03	6
153	2	2024-06-04	6
154	3	2024-06-05	6
155	0	2024-06-06	6
156	0	2024-06-07	6
157	1	2024-06-08	6
158	3	2024-06-09	6
159	5	2024-06-10	6
160	2	2024-06-11	6
161	4	2024-06-12	6
162	0	2024-06-13	6
163	0	2024-06-14	6
164	1	2024-06-15	6
165	2	2024-06-16	6
166	3	2024-06-17	6
167	4	2024-06-18	6
168	0	2024-06-19	6
169	3	2024-06-20	6
170	5	2024-06-21	6
171	2	2024-06-22	6
172	4	2024-06-23	6
173	0	2024-06-24	6
174	5	2024-06-25	6
175	1	2024-06-26	6
176	2	2024-06-27	6
177	3	2024-06-28	6
178	4	2024-06-29	6
179	2	2024-06-30	6
180	0	2024-07-01	6
181	4	2024-07-02	6
182	5	2024-07-03	6
183	2	2024-07-04	6
184	3	2024-07-05	6
185	4	2024-07-06	6
186	2	2024-07-07	6
187	1	2024-07-08	6
188	3	2024-07-09	6
189	5	2024-07-10	6
190	0	2024-07-11	6
191	4	2024-07-12	6
192	3	2024-07-13	6
193	5	2024-07-14	6
194	1	2024-07-15	6
195	2	2024-07-16	6
196	3	2024-07-17	6
197	4	2024-07-18	6
198	2	2024-07-19	6
199	3	2024-07-20	6
200	5	2024-07-21	6
201	2	2024-07-22	6
202	4	2024-07-23	6
203	3	2024-07-24	6
204	5	2024-07-25	6
205	0	2024-07-26	6
206	2	2024-07-27	6
207	0	2024-07-28	6
208	4	2024-07-29	6
209	2	2024-07-30	6
210	5	2024-07-31	6
211	3	2024-09-01	6
212	0	2024-09-02	6
213	5	2024-09-03	6
214	2	2024-09-04	6
215	3	2024-09-05	6
216	0	2024-09-06	6
217	1	2024-09-07	6
218	0	2024-09-08	6
219	3	2024-09-09	6
220	5	2024-09-10	6
221	2	2024-09-11	6
222	4	2024-09-12	6
223	0	2024-09-13	6
224	0	2024-09-14	6
225	0	2024-09-15	6
226	2	2024-09-16	6
227	3	2024-09-17	6
228	0	2024-09-18	6
229	0	2024-09-19	6
230	3	2024-09-20	6
231	5	2024-09-21	6
232	0	2024-09-22	6
233	0	2024-09-23	6
234	0	2024-09-24	6
235	5	2024-09-25	6
236	1	2024-09-26	6
237	2	2024-09-27	6
238	0	2024-09-28	6
239	4	2024-09-29	6
240	2	2024-09-30	6
241	0	2024-08-01	6
242	4	2024-08-02	6
243	5	2024-08-03	6
244	2	2024-08-04	6
245	3	2024-08-05	6
246	4	2024-08-06	6
247	2	2024-08-07	6
248	1	2024-08-08	6
249	3	2024-08-09	6
250	5	2024-08-10	6
251	0	2024-08-11	6
252	4	2024-08-12	6
253	3	2024-08-13	6
254	5	2024-08-14	6
255	1	2024-08-15	6
256	2	2024-08-16	6
257	3	2024-08-17	6
258	4	2024-08-18	6
259	2	2024-08-19	6
260	3	2024-08-20	6
261	5	2024-08-21	6
262	3	2024-08-22	6
263	4	2024-08-23	6
264	3	2024-08-24	6
265	5	2024-08-25	6
266	3	2024-08-26	6
267	2	2024-08-27	6
268	0	2024-08-28	6
269	3	2024-08-29	6
270	3	2024-08-30	6
271	5	2024-08-31	6
272	3	2024-11-01	6
273	0	2024-11-02	6
274	5	2024-11-03	6
275	0	2024-11-04	6
276	0	2024-11-05	6
277	0	2024-11-06	6
278	1	2024-11-07	6
279	0	2024-11-08	6
280	3	2024-11-09	6
281	5	2024-11-10	6
282	2	2024-11-11	6
283	4	2024-11-12	6
284	0	2024-11-13	6
285	0	2024-11-14	6
286	0	2024-11-15	6
287	2	2024-11-16	6
288	3	2024-11-17	6
289	0	2024-11-18	6
290	0	2024-11-19	6
291	3	2024-11-20	6
292	5	2024-11-21	6
293	0	2024-11-22	6
294	0	2024-11-23	6
295	0	2024-11-24	6
296	5	2024-11-25	6
297	1	2024-11-26	6
298	2	2024-11-27	6
299	0	2024-11-28	6
300	4	2024-11-29	6
301	2	2024-11-30	6
302	0	2024-10-01	6
303	4	2024-10-02	6
304	5	2024-10-03	6
305	2	2024-10-04	6
306	3	2024-10-05	6
307	4	2024-10-06	6
308	2	2024-10-07	6
309	1	2024-10-08	6
310	3	2024-10-09	6
311	5	2024-10-10	6
312	0	2024-10-11	6
313	4	2024-10-12	6
314	3	2024-10-13	6
315	5	2024-10-14	6
316	1	2024-10-15	6
317	2	2024-10-16	6
318	3	2024-10-17	6
319	4	2024-10-18	6
320	2	2024-10-19	6
321	3	2024-10-20	6
322	5	2024-10-21	6
323	3	2024-10-22	6
324	4	2024-10-23	6
325	3	2024-10-24	6
326	5	2024-10-25	6
327	3	2024-10-26	6
328	2	2024-10-27	6
329	0	2024-10-28	6
330	3	2024-10-29	6
331	3	2024-10-30	6
332	5	2024-10-31	6
333	0	2025-02-19	8
334	5	2025-02-19	9
339	0	2025-02-20	7
340	0	2025-02-20	8
341	0	2025-02-20	9
342	0	2025-02-20	4
343	5	2025-02-20	1
345	0	2025-02-20	11
338	3	2025-02-20	6
352	0	2025-02-20	5
357	0	2025-02-20	12
344	6	2025-02-20	10
335	5	2025-02-20	2
358	2	2025-02-20	13
336	5	2025-02-20	3
361	0	2025-02-21	8
362	0	2025-02-21	7
364	0	2025-02-21	1
366	0	2025-02-21	4
369	0	2025-02-21	12
370	0	2025-02-21	11
372	0	2025-02-21	5
376	0	2025-02-21	9
380	0	2025-02-21	2
384	0	2025-02-21	6
373	1	2025-02-21	10
379	1	2025-02-21	13
365	5	2025-02-21	3
\.


--
-- Data for Name: job; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.job (job_id, job_role) FROM stdin;
1	FRONTEND
2	BACKEND
3	FULLSTACK
4	ANDROID
5	IOS
6	DBA
7	DEVOPS
8	INFRA
9	DATA_SCIENCE
10	AI_ENGINEER
11	SYSTEM_ENGINEER
12	GAME_DEVELOPMENT
13	EMBEDDED
14	SECURITY
15	BLOCKCHAIN
16	TESTING
17	CLOUD_ARCHITECTURE
18	PROJECT_MANAGER
\.


--
-- Data for Name: job_skill; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.job_skill (job_skill_id, job_id, skill_id) FROM stdin;
1	1	12
2	2	12
3	3	12
4	1	247
5	2	247
6	3	247
7	1	13
8	2	13
9	3	13
10	1	14
11	2	14
12	17	14
13	3	14
14	1	11
15	2	11
16	6	11
17	3	11
18	1	245
19	2	245
20	6	245
21	14	11
22	14	245
23	3	245
24	1	10
25	2	10
26	17	10
27	3	10
28	14	244
29	2	244
30	2	20
31	1	244
32	3	244
33	7	244
34	2	112
35	1	112
36	3	112
37	1	20
38	13	1
39	13	2
40	2	4
41	1	5
42	3	5
43	2	246
44	1	246
45	3	246
46	14	246
47	1	16
48	1	15
49	2	5
50	2	8
51	2	1
52	2	2
53	2	3
54	1	4
55	1	8
56	1	1
57	1	2
58	1	3
59	3	4
60	3	8
61	3	1
62	3	2
63	3	3
64	17	11
197	18	244
198	15	126
199	16	245
200	16	185
201	7	86
202	12	112
203	12	243
204	12	62
205	12	63
206	12	235
207	12	242
208	12	150
209	12	12
210	12	10
211	12	120
212	4	28
213	4	108
214	4	242
215	4	36
216	6	28
217	6	36
218	4	120
219	5	27
220	5	192
221	5	120
222	5	112
223	5	158
224	5	242
225	5	11
226	6	27
227	9	129
228	9	130
229	9	131
230	9	233
231	9	201
232	9	150
111	8	10
112	13	14
113	8	11
114	9	11
115	13	12
116	13	13
117	1	22
118	2	22
119	3	22
120	9	8
121	2	192
122	1	192
123	3	192
124	2	86
125	16	86
126	2	41
127	8	41
128	17	41
129	2	160
130	8	160
131	17	160
132	2	190
133	8	190
134	17	190
135	9	10
136	2	39
137	2	142
138	8	39
139	8	142
140	8	185
141	7	185
142	7	10
253	11	93
254	11	105
255	11	104
256	11	124
257	11	125
258	11	119
259	11	120
260	11	10
261	11	39
262	11	40
263	11	142
264	11	114
265	11	180
266	11	189
267	11	190
268	11	41
269	11	239
270	11	185
271	11	46
272	11	186
273	11	198
274	11	138
275	4	12
276	4	247
277	4	13
278	4	14
279	4	11
280	4	245
281	4	10
282	5	12
283	5	247
284	5	13
285	5	14
286	5	11
287	5	245
288	5	10
289	6	12
290	6	247
291	6	13
292	6	14
293	6	11
294	6	245
295	6	10
296	7	12
297	7	247
298	7	13
299	7	14
300	7	11
301	7	245
302	7	10
303	8	12
304	8	247
305	8	13
306	8	14
307	8	11
308	8	245
309	8	10
310	9	12
311	9	247
312	9	13
313	9	14
314	9	11
315	9	245
316	9	10
317	10	12
318	10	247
319	10	13
320	10	14
321	10	11
322	10	245
323	10	10
324	11	12
325	11	247
326	11	13
327	11	14
328	11	11
329	11	245
330	11	10
331	12	12
332	12	247
333	12	13
334	12	14
335	12	11
336	12	245
337	12	10
338	13	12
339	13	247
340	13	13
341	13	14
342	13	11
343	13	245
344	13	10
345	14	12
346	14	247
347	14	13
348	14	14
349	14	11
350	14	245
351	14	10
352	15	12
353	15	247
354	15	13
355	15	14
356	15	11
357	15	245
358	15	10
359	16	12
360	16	247
361	16	13
362	16	14
363	16	11
364	16	245
365	16	10
366	17	12
367	17	247
368	17	13
369	17	14
370	17	11
371	17	245
372	17	10
\.


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.likes (likes_id, answer_id, member_id) FROM stdin;
1	5	2
2	7	3
3	8	3
4	6	6
6	9	6
7	22	3
8	15	3
11	26	5
12	22	5
13	15	5
14	1	5
15	6	5
16	5	5
17	32	3
18	32	1
19	63	3
20	90	6
22	63	13
23	90	13
24	14	3
25	94	3
26	95	3
\.


--
-- Data for Name: member; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.member (member_id, created_at, deleted_at, updated_at, email, favorite_job, github_url, max_streak, nickname, ongoing_streak, password, profile_img, provider_type, role) FROM stdin;
5	2025-02-18 18:32:34.284349	\N	2025-02-20 23:50:00.014111	erin90523@naver.com	FRONTEND		1	이뮤	0	$2a$10$ME2nNEYw8BZxGj/q5STVn.5zS9nQZRVxAIAKRbBhgDNTrHCmD6/Cq		LOCAL	ROLE_USER
10	2025-02-20 01:32:04.849809	\N	2025-02-20 23:50:00.021913	pkwmj44@gmail.com	DATA_SCIENCE		1	wannnnnne	1	$2a$10$nAWY7spzX71jw40n2UAQB.UF6FNFhGaeUFp2UHxEj60ssyI5xyhdS	https://d3v-image-bucket.s3.amazonaws.com/article/image/6b9ae5bb-8%EB%AC%B4%EC%86%8C%EC%8B%9D%EC%9D%B4%ED%9D%AC%EC%86%8C%EC%8B%9D.jpg	LOCAL	ROLE_USER
8	2025-02-19 04:34:07.004567	\N	2025-02-20 23:50:00.02904	ssafy1111@gmail.com	BACKEND	https://github.com/ssafy	0	SSAFY1111	0	$2a$10$1s6F0iDsL9WmcRti9gDnsOwfrmZpNB8t3cQmyLY96jnFtEohHDlDO	https://d3v-image-bucket.s3.amazonaws.com/article/image/1091a101-eD3V_Logo.png	LOCAL	ROLE_USER
7	2025-02-19 01:32:35.036341	\N	2025-02-20 23:50:00.036113	qwerty123@gmail.com	BACKEND	cupwan	1	waneee	0	$2a$10$ek0b2q27AmDmFiasrHWoUOpjx19jnVuFVzDl.ikhNyotwQTMOvUUG	https://d3v-image-bucket.s3.amazonaws.com/article/image/76627864-4%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-01-14%20111627.png	LOCAL	ROLE_USER
9	2025-02-19 04:36:53.722689	\N	2025-02-20 23:50:00.04129	ssafy12341234@gmail.com	BACKEND	https://Github.com	1	D3V's Owner	0	$2a$10$y1QJfJF6a/kNh8RNk/qfjuv/PlIO9FpE5JjiMTGMFF8vZj.Dq.1eq	https://d3v-image-bucket.s3.amazonaws.com/article/image/6e82ae5c-0%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-02-07%20165523.png	LOCAL	ROLE_USER
1	2025-02-18 10:49:30.710961	\N	2025-02-20 23:50:00.045643	ssafy123@gmail.com	BACKEND	ssafy@github.com	3	ssafy	3	$2a$10$F.J2VYgNITrW2Jq94fy5R.VY2775T78CF1/DaOhM5Q6k0LMuDwdKW	https://d3v-image-bucket.s3.amazonaws.com/article/image/78030b27-c%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-01-14%20111627.png	LOCAL	ROLE_USER
4	2025-02-18 17:33:00.418525	\N	2025-02-20 23:50:00.051071	pudding@gmail.com	FRONTEND	https://github.com/waterhyun	0	이모	0	$2a$10$/nRvMWv1ldgFnu5Fo8D5pez3SKCP5FgnCHDpCWY9ZlynbBVBts3eW	https://d3v-image-bucket.s3.amazonaws.com/article/image/6aa80f3b-aog-BD2109-23201.jpg	LOCAL	ROLE_USER
13	2025-02-20 07:19:01.611202	\N	2025-02-20 23:50:00.0565	puddingsuhyun@gmail.com	DATA_SCIENCE	https://github.com/waterhyun	1	초코이모	1	$2a$10$4S6gIpERUDsYsEG3Ll.HgeTn52ld.gsj.yB39Mv14tcORorx70xHi	https://d3v-image-bucket.s3.amazonaws.com/article/image/678f5587-4og-BD2109-23201.jpg	LOCAL	ROLE_USER
2	2025-02-18 13:38:16.893298	\N	2025-02-20 23:50:00.062856	oonggood00@gmail.com	FRONTEND		3	혜오오오옹	3	$2a$10$Y.O8ITIuPZg12qAKG4Y8re.Z3i1Pt7aKxptF47TQUoZNxRyxODq1m	https://d3v-image-bucket.s3.amazonaws.com/article/image/5ebbfa89-0image.png	LOCAL	ROLE_USER
12	2025-02-20 04:31:26.739404	\N	2025-02-20 23:50:00.068201	1eesuhyun521@gmail.com	DATA_SCIENCE	https://github.com/waterhyun	0	워터리	0	$2a$10$yDQNeVB8LeVc/MsY1mxbxuVSse2jmd61cdfPaZzs/OwyZaozrJcEC	https://d3v-image-bucket.s3.amazonaws.com/article/image/1b08751a-5image.png	LOCAL	ROLE_USER
11	2025-02-20 01:56:42.718404	\N	2025-02-20 23:50:00.072344	bookmarktest@gmail.com	AI_ENGINEER		0	북마크덕후	0	$2a$10$Mk2JiHEjxoeqFr7R7i/sC.8uL2WcttbCp7egO3Q0iK9Kuc/teHdy6		LOCAL	ROLE_USER
3	2025-02-18 14:45:03.260966	\N	2025-02-20 23:50:00.076689	ssafy321@gmail.com	PROJECT_MANAGER	https://github.com/beegle98	3	비글	3	$2a$10$YkSBvxvYSSD.WZcgnVU8xOdc8wAquFyio7YRmOeJAe4LSabWDa8/e	https://d3v-image-bucket.s3.amazonaws.com/article/image/1c790619-7%EC%9D%B4%EB%A0%87%EA%B2%8C%EB%A9%8B%EC%A7%84%EB%82%A0%EC%95%88%EB%BD%91%EB%8A%94%EB%8B%A4%EA%B3%A0.png	LOCAL	ROLE_USER
6	2025-02-19 00:22:35.04771	\N	2025-02-20 23:50:00.083127	by28287@gmail.com	BACKEND	https://github.com/BOYOUNG-KANG	17	olliee	4	$2a$10$C69gjNs90f4ttbqXa4gtvOP6t.pw8eH3maaok6yEC0A.Ls9Is0NBy	https://d3v-image-bucket.s3.amazonaws.com/article/image/f67da548-0%EB%82%B4%EA%B0%80%ED%95%B4%EB%83%84.png	LOCAL	ROLE_USER
\.


--
-- Data for Name: question; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.question (question_id, answer_average, answer_count, challenge_count, content, standard_answer) FROM stdin;
301	0	0	0	거품 정렬(Bubble Sort)에 대해 설명해주세요.	거품 정렬은 인접한 두 요소를 비교하여 큰 값을 오른쪽으로 이동시키는 방식의 정렬 알고리즘입니다. 한 번의 순회가 끝나면 가장 큰 값이 맨 끝으로 이동하며, 이를 반복하여 정렬합니다. 시간 복잡도는 최악과 평균 모두 O(n^2)이며, 데이터가 거의 정렬된 경우 O(n)까지 최적화될 수 있습니다. 그러나 효율성이 낮아 실무에서는 거의 사용되지 않습니다.
302	0	0	0	선택 정렬(Selection Sort)에 대해 설명해주세요.	선택 정렬은 배열에서 가장 작은 값을 선택하여 앞에서부터 정렬하는 방식의 정렬 알고리즘입니다. 전체 배열을 탐색하면서 최소값을 찾아 첫 번째 위치와 교환하고, 이를 반복하여 정렬합니다. 시간 복잡도는 O(n^2)이며, 데이터 이동 횟수가 적은 것이 특징입니다. 하지만 속도가 느려서 실제로는 잘 사용되지 않으며, 다른 정렬 알고리즘보다 비효율적입니다.
110	0	0	0	GIL에 대해 설명해주세요.	GIL(Global Interpreter Lock)은 CPython 인터프리터에서 여러 스레드가 동시에 파이썬 바이트코드를 실행하지 못하도록 제어하는 메커니즘입니다. 이는 메모리 관리의 안정성을 유지하지만, CPU 바운드 작업에서는 멀티코어 활용을 제한하여 성능 병목이 발생할 수 있습니다. 이를 극복하기 위해 멀티프로세싱 모듈이나 GIL을 해제하는 C 확장 라이브러리를 사용할 수 있습니다
304	0	0	0	퀵 정렬(Quick Sort)에 대해 설명해주세요.	퀵 정렬은 분할 정복(Divide and Conquer) 기법을 사용하는 효율적인 정렬 알고리즘입니다. 기준값(Pivot)을 설정한 뒤, 작은 값과 큰 값으로 나누어 정렬하는 과정을 반복합니다. 평균 시간 복잡도는 O(n log n)이며, 최악의 경우 O(n^2)이지만 적절한 피벗 선택으로 이를 방지할 수 있습니다. 실무에서 가장 많이 사용되는 정렬 알고리즘 중 하나입니다.
305	0	0	0	병합 정렬(Merge Sort)에 대해 설명해주세요.	병합 정렬은 분할 정복(Divide and Conquer) 방식을 활용하여 리스트를 반으로 나눈 후 정렬된 상태로 병합하는 알고리즘입니다. 분할 과정에서 O(log n), 병합 과정에서 O(n)의 시간 복잡도를 가지며, 전체 시간 복잡도는 O(n log n)입니다. 추가적인 메모리 공간이 필요하지만, 안정 정렬이므로 중요한 데이터 정렬에서 자주 사용됩니다.
306	0	0	0	힙 정렬(Heap Sort)에 대해 설명해주세요.	힙 정렬은 힙(Heap) 자료구조를 사용하여 최대 힙 또는 최소 힙을 구성한 후 정렬하는 방식입니다. 이진 힙(Binary Heap)을 기반으로 하며, 삽입과 삭제 연산이 O(log n)으로 이루어집니다. 전체 시간 복잡도는 O(n log n)이며, 추가적인 메모리 공간이 필요하지 않아 효율적입니다. 하지만 퀵 정렬에 비해 실무에서 덜 사용됩니다.
308	0	0	0	계수 정렬(Counting Sort)에 대해 설명해주세요.	계수 정렬은 데이터의 개수를 카운트하여 정렬하는 알고리즘으로, 비교 연산 없이 정렬을 수행할 수 있습니다. O(n + k)의 시간 복잡도를 가지며, k는 데이터의 최대값을 의미합니다. 매우 빠르지만, 값의 범위가 너무 크면 비효율적일 수 있으며, 추가적인 메모리 공간이 필요합니다. 주로 정수 값이 제한된 경우에 사용됩니다.
310	0	0	0	해시 테이블(Hash Table)에 대해 설명해주세요.	해시 테이블은 키-값 구조를 기반으로 데이터를 저장하고 조회하는 자료구조입니다. 해시 함수를 통해 키를 해시값으로 변환하여 빠르게 접근할 수 있으며, 평균적인 삽입 및 조회 속도는 O(1)입니다. 충돌이 발생할 수 있으며, 이를 해결하기 위해 체이닝(Chaining) 또는 개방 주소법(Open Addressing)을 사용합니다. 데이터 검색과 저장이 빠르기 때문에 다양한 애플리케이션에서 활용됩니다.
312	0	0	0	BFS에 대해 설명해주세요.	BFS(Breadth First Search)는 그래프 탐색 알고리즘으로, 한 노드에서 시작하여 인접한 노드를 먼저 방문하는 방식입니다. 큐(Queue)를 이용하여 구현되며, 최단 경로 탐색에 적합합니다. 시간 복잡도는 O(V+E)이며, 최단 경로 문제나 네트워크 흐름 문제에서 자주 사용됩니다. 하지만 메모리 사용량이 많을 수 있어 주의가 필요합니다.
313	0	0	0	최장 증가 수열(Longest Increasing Sequence)에 대해 설명해주세요.	최장 증가 수열(LIS)은 주어진 수열에서 가장 긴 증가하는 부분 수열을 찾는 문제입니다. DP를 사용하면 O(n^2), 이분 탐색과 함께 사용하면 O(n log n)으로 최적화할 수 있습니다. 동적 계획법을 활용하는 방식은 이전 값을 참조하여 최적의 값을 찾습니다. 주로 배열 정렬, 부분 수열 관련 문제에서 활용됩니다.
314	0	0	0	최소 공통 조상(Lowest Common Ancestor) 알고리즘에 대해 설명해주세요.	LCA(Lowest Common Ancestor) 알고리즘은 두 노드의 공통 조상 중 가장 가까운 조상을 찾는 알고리즘입니다. 트리를 활용하며, 희소 테이블(Sparse Table)과 DFS를 이용하면 O(log n)으로 최적화할 수 있습니다. 주로 네트워크 트리 구조, 계층적 데이터 구조에서 많이 사용됩니다. Union-Find를 활용한 방법도 존재하며, 특정한 경우에 유리합니다.
316	0	0	0	다익스트라(Dijkstra) 알고리즘에 대해 설명해주세요.	다익스트라 알고리즘은 가중치가 있는 그래프에서 한 정점에서 다른 모든 정점까지의 최단 경로를 찾는 알고리즘입니다. 우선순위 큐를 사용하면 O(E log V)의 시간 복잡도를 가지며, 음수 가중치가 있는 그래프에서는 사용할 수 없습니다. 네트워크 최적화, 지도 내비게이션 등의 문제에서 자주 활용됩니다. 벨만-포드 알고리즘과 비교하여 효율성이 높지만, 음수 간선 처리가 불가능합니다.
309	1	1	1	이분 탐색(Binary Search)에 대해 설명해주세요.	이분 탐색은 정렬된 배열에서 중간 값을 기준으로 반씩 나누어 검색하는 알고리즘입니다. 탐색 범위를 절반으로 줄이며 진행하기 때문에 시간 복잡도는 O(log n)으로 매우 효율적입니다. 정렬이 되어 있어야만 사용할 수 있으며, 재귀나 반복문을 이용해 구현할 수 있습니다. 데이터가 많을수록 선형 탐색보다 훨씬 빠르게 검색할 수 있습니다.
317	0	0	0	비트마스크(BitMask)에 대해 설명해주세요.	비트마스크는 정수의 비트 연산을 활용하여 집합 연산을 빠르게 수행하는 기법입니다. 특정 상태를 비트로 표현하여 공간과 시간을 절약할 수 있으며, 조합 최적화 문제에 자주 사용됩니다. AND, OR, XOR 등의 연산을 활용하여 특정 비트를 조작할 수 있습니다. 주로 상태 압축 DP, 부분 집합 문제, 그래프 문제에서 활용됩니다.
318	0	0	0	컴퓨터의 구성에 대해 설명해주세요.	컴퓨터는 중앙처리장치(CPU), 메모리, 저장장치, 입출력 장치로 구성됩니다. CPU는 연산을 수행하고, 메모리는 데이터를 임시 저장하며, 저장장치는 데이터를 영구 보관합니다. 입출력 장치는 사용자와 컴퓨터 간의 데이터 교환을 담당합니다. 각 구성 요소가 조화롭게 동작하여 컴퓨터 시스템이 원활히 작동합니다.
319	0	0	0	중앙처리장치(CPU) 작동 원리에 대해 설명해주세요.	CPU는 명령어를 해석하고 실행하는 컴퓨터의 핵심 장치입니다. 명령어 사이클(Fetch, Decode, Execute) 과정을 반복하며, ALU(연산 장치)와 레지스터를 활용하여 연산을 수행합니다. 클럭 속도가 빠를수록 연산 속도가 향상되며, 멀티코어 구조를 통해 병렬 처리가 가능합니다. 캐시 메모리를 활용하여 메모리 접근 속도를 최적화할 수 있습니다.
321	0	0	0	고정 소수점과 부동 소수점에 대해 설명해주세요.	고정 소수점은 정수 형태로 소수를 표현하는 방식으로, 정밀도는 높지만 표현 범위가 제한적입니다. 반면, 부동 소수점은 가수와 지수를 이용하여 더 넓은 수 범위를 표현할 수 있습니다. IEEE 754 표준을 따라 부동 소수점 연산이 이루어지며, 과학 계산 및 그래픽 처리에 주로 사용됩니다. 고정 소수점은 임베디드 시스템에서, 부동 소수점은 고성능 연산에서 주로 활용됩니다.
323	0	0	0	ARM 프로세서에 대해 설명해주세요.	ARM 프로세서는 저전력 고효율의 RISC(Reduced Instruction Set Computing) 기반 프로세서입니다. 주로 스마트폰, 태블릿, IoT 기기 등에 사용되며, 인텔의 x86 아키텍처보다 전력 효율성이 뛰어납니다. 최근에는 서버 및 고성능 컴퓨팅에도 ARM 프로세서가 활용되고 있습니다. 애플의 M1, M2 칩도 ARM 기반으로 설계되었습니다.
325	0	0	0	연결 리스트(Linked List)에 대해 설명해주세요.	연결 리스트는 각 노드가 데이터와 다음 노드를 가리키는 포인터를 포함하는 자료구조입니다. 배열과 달리 동적으로 크기를 조절할 수 있으며, 삽입과 삭제가 O(1)로 효율적입니다. 하지만 특정 인덱스 접근이 O(n)으로 느리며, 추가적인 메모리 공간(포인터)이 필요합니다. 단일, 이중, 원형 연결 리스트 등 다양한 변형이 존재합니다.
326	0	0	0	Array와 ArrayList, LinkedList의 차이에 대해 설명해주세요.	Array는 크기가 고정된 선형 자료구조로, O(1)로 빠른 접근이 가능합니다. ArrayList는 동적 배열로 크기를 자동으로 조절하며, 삽입과 삭제가 비교적 빠릅니다. LinkedList는 노드 간 연결로 이루어져 있으며, 삽입과 삭제가 O(1)로 효율적이지만 접근 속도가 느립니다. 데이터 크기와 수정 빈도에 따라 적절한 자료구조를 선택해야 합니다.
327	0	0	0	스택과 큐에 대해 설명해주세요.	스택(Stack)은 LIFO(Last In, First Out) 구조로, 가장 나중에 삽입된 요소가 먼저 제거됩니다. 반면 큐(Queue)는 FIFO(First In, First Out) 구조로, 먼저 삽입된 요소가 먼저 제거됩니다. 스택은 재귀 호출, 수식 계산 등에 사용되며, 큐는 작업 스케줄링, BFS 알고리즘 등에 활용됩니다. 구현 방식으로 배열 기반과 연결 리스트 기반이 있습니다.
329	0	0	0	트리(Tree)에 대해 설명해주세요.	트리는 계층적 구조를 가진 비선형 자료구조로, 루트 노드에서 여러 개의 하위 노드로 확장됩니다. 이진 트리, AVL 트리, B 트리 등 다양한 형태가 존재합니다. 이진 탐색 트리(BST)는 정렬된 데이터를 빠르게 검색할 수 있으며, 탐색, 삽입, 삭제가 평균적으로 O(log n)입니다. 파일 시스템, 데이터베이스 인덱스 등에 널리 활용됩니다.
330	0	0	0	이진탐색트리 (Binary Search Tree)에 대해 설명해주세요.	이진 탐색 트리(BST)는 왼쪽 서브트리는 작은 값, 오른쪽 서브트리는 큰 값을 가지는 구조입니다. 평균 탐색, 삽입, 삭제 시간 복잡도는 O(log n)이지만, 편향 트리인 경우 O(n)까지 증가할 수 있습니다. 이를 해결하기 위해 AVL 트리, 레드-블랙 트리와 같은 균형 트리가 존재합니다. 주로 데이터베이스, 검색 엔진 등에 활용됩니다.
322	1	1	1	패리티 비트와 해밍 코드에 대해 설명해주세요.	패리티 비트는 데이터 전송 중 오류를 감지하기 위한 방법으로, 짝수 패리티와 홀수 패리티가 있습니다. 하지만 오류 검출만 가능하고 수정은 불가능합니다. 해밍 코드는 다중 비트를 추가하여 오류를 검출하고 수정할 수 있는 방식으로, 단일 비트 오류를 자동으로 복구할 수 있습니다. 주로 네트워크 전송, 저장 장치의 데이터 무결성 유지에 활용됩니다.
324	2	2	1	배열 (Array)에 대해 설명해주세요.	배열은 동일한 데이터 타입의 요소들을 연속된 메모리 공간에 저장하는 자료구조입니다. 인덱스를 사용하여 빠르게 접근할 수 있어 O(1) 시간 복잡도로 검색이 가능합니다. 하지만 크기가 고정되어 있으며, 삽입과 삭제 시 배열의 재배치가 필요할 수 있습니다. 주로 리스트, 행렬 연산, 버퍼 관리 등에 활용됩니다.
328	1	1	1	힙(Heap)에 대해 설명해주세요.	힙(Heap)은 완전 이진 트리 기반의 자료구조로, 우선순위 큐를 구현할 때 사용됩니다. 최소 힙(Min-Heap)은 루트가 최소값을 가지며, 최대 힙(Max-Heap)은 루트가 최대값을 가집니다. 삽입과 삭제 연산이 O(log n)으로 효율적이며, 다익스트라 알고리즘 등에서 활용됩니다. 보통 배열을 사용하여 구현됩니다.
331	0	0	0	해시(Hash)에 대해 설명해주세요.	해시(Hash)는 키-값 구조로 데이터를 저장하는 방식으로, 해시 함수를 이용하여 특정 값을 빠르게 찾을 수 있습니다. 평균적인 삽입, 검색, 삭제의 시간 복잡도는 O(1)입니다. 충돌이 발생할 수 있으며, 체이닝(Chaining)과 개방 주소법(Open Addressing) 등으로 해결할 수 있습니다. 데이터베이스, 캐시 시스템 등에 널리 사용됩니다.
332	0	0	0	트라이(Trie)에 대해 설명해주세요.	트라이(Trie)는 문자열 탐색을 위한 트리 기반 자료구조로, 각 노드가 한 글자를 나타냅니다. 문자열 검색, 자동 완성, 사전(dictionary) 구현에 사용됩니다. 탐색과 삽입이 O(m)으로 빠르지만, 추가적인 메모리 공간이 필요합니다. 문자열 집합을 관리하는 데 최적화되어 있으며, 검색 엔진, 텍스트 자동완성 기능 등에 활용됩니다.
333	0	0	0	B Tree와 B+ Tree에 대해 설명해주세요.	B 트리는 균형 이진 트리의 확장판으로, 다중 노드를 가질 수 있어 데이터베이스 및 파일 시스템에서 사용됩니다. 모든 노드가 최소한 절반의 자식을 가지며, 균형을 유지합니다. B+ 트리는 B 트리의 확장된 형태로, 리프 노드에만 데이터를 저장하며, 인덱스 역할을 하는 중간 노드가 있습니다. 검색 성능이 향상되어 대량의 데이터 검색에 유리합니다.
62	0	0	0	애노테이션에 대해서 설명해주세요.	애노테이션은 인터페이스를 기반으로 한 문법으로 주석처럼 코드에 달아 클래스에 특별한 의미를 부여하거나 기능을 주입할 수 있습니다. built-in annotation은 상속받아서 메소드를 오버라이드 할 때 나타나는 Override 애노테이션이 그 대표적인 예입니다. 메타 애너테이션은 애노테이션을 선언할 때 사용하는 애노테이션입니다. Retention: 애노테이션 유지 범위를 지정합니다. (소스, 클래스, 런타임) Inherit: 애노테이션을 하위 클래스까지 전달여부를 지정합니다. 이 애노테이션이 있으면 하위 클래스까지 상속이 가능합니다. Target: 해당 애노테이션을 어디에 사용할 지 결정합니다. (타입, 필드, 메서드, 파라미터, 생성자, 로컬변수, 애노테이션 타입)
336	0	0	0	프로세스의 주소 공간에 대해 설명해주세요.	프로세스의 주소 공간은 실행 중인 프로그램이 접근할 수 있는 메모리 영역을 의미합니다. 일반적으로 코드 영역(텍스트 섹션), 데이터 영역(정적 및 전역 변수), 힙 영역(동적 할당 메모리), 스택 영역(함수 호출 및 지역 변수)으로 나뉩니다. 프로세스 간 주소 공간은 독립적이며, 보호 기법을 통해 메모리 충돌을 방지합니다. 가상 메모리를 통해 물리적 메모리보다 큰 주소 공간을 사용할 수 있습니다.
337	0	0	0	인터럽트(Interrupt)에 대해 설명해주세요.	인터럽트는 CPU가 현재 실행 중인 작업을 중단하고 즉시 특정 이벤트를 처리하도록 하는 메커니즘입니다. 하드웨어 인터럽트(입출력 장치)와 소프트웨어 인터럽트(예외, 시스템 콜)로 구분됩니다. 인터럽트가 발생하면 CPU는 해당 인터럽트 핸들러를 실행한 후 원래 작업으로 복귀합니다. 이를 통해 실시간 응답이 필요한 시스템에서 효율적인 처리가 가능합니다.
338	0	0	0	시스템 콜(System Call)에 대해 설명해주세요.	시스템 콜은 프로그램이 운영체제의 커널에 요청을 보내는 인터페이스입니다. 파일 입출력, 프로세스 생성, 메모리 할당 등의 기능을 수행할 때 사용됩니다. 사용자 모드에서 실행되는 프로그램이 시스템 리소스를 사용하기 위해 커널 모드로 전환하는 과정이 필요합니다. 대표적인 시스템 콜에는 read(), write(), fork(), exec() 등이 있습니다.
339	0	0	0	PCB와 Context Switching에 대해 설명해주세요.	PCB(Process Control Block)는 운영체제가 프로세스를 관리하기 위해 사용하는 데이터 구조로, 프로세스의 상태, PID, 레지스터 값, 메모리 정보 등을 포함합니다. Context Switching은 실행 중인 프로세스를 저장하고 새로운 프로세스를 실행하기 위한 과정입니다. CPU가 여러 프로세스를 실행하기 위해 스케줄링할 때 발생하며, 오버헤드가 존재할 수 있습니다.
340	0	0	0	IPC(Inter Process Communication)에 대해 설명해주세요.	IPC(Inter Process Communication)는 프로세스 간 데이터를 교환하는 메커니즘입니다. 공유 메모리, 메시지 큐, 파이프, 소켓 등의 방식이 있으며, 각 방식은 성능과 보안 측면에서 차이가 있습니다. 공유 메모리는 빠르지만 동기화 문제가 발생할 수 있고, 메시지 큐는 안정적이지만 오버헤드가 발생할 수 있습니다. IPC는 멀티 프로세스 환경에서 필수적인 기술입니다.
342	0	0	0	교착상태(DeadLock)가 무엇이며, 4가지 조건에 대해 설명해주세요.	교착상태(Deadlock)는 여러 프로세스가 자원을 서로 점유한 채 대기하면서 영원히 진행되지 않는 상태입니다. 발생 조건으로는 상호 배제, 점유와 대기, 비선점, 순환 대기 조건이 있습니다. 예방, 회피, 탐지, 회복 전략을 통해 교착 상태를 방지할 수 있습니다. 운영체제에서는 주로 뱅커스 알고리즘(Banker's Algorithm) 등을 활용하여 교착 상태를 해결합니다.
343	0	0	0	경쟁 상태(Race Condition)에 대해 설명해주세요.	경쟁 상태(Race Condition)는 두 개 이상의 프로세스 또는 스레드가 동일한 자원에 동시 접근하면서 발생하는 예측 불가능한 문제입니다. 공유 자원의 동기화가 적절히 이루어지지 않으면 데이터 손실, 비정상적인 결과가 초래될 수 있습니다. 이를 방지하기 위해 뮤텍스(Mutex), 세마포어(Semaphore), 모니터(Monitor)와 같은 동기화 기법을 사용합니다.
335	1	1	1	프로세스와 스레드의 차이에 대해 설명해주세요.	프로세스는 실행 중인 프로그램으로, 독립적인 메모리 공간을 갖고 실행됩니다. 반면 스레드는 하나의 프로세스 내에서 실행되는 실행 단위로, 프로세스의 메모리를 공유합니다. 스레드는 경량화되어 빠른 실행이 가능하지만, 동기화 문제가 발생할 수 있습니다. 멀티스레딩을 활용하면 병렬 처리를 통해 성능을 향상시킬 수 있습니다.
344	0	0	0	세마포어(Semaphore)와 뮤텍스(Mutex)에 대해 설명해주세요.	세마포어와 뮤텍스는 멀티스레드 환경에서 동기화를 위해 사용됩니다. 뮤텍스는 한 번에 하나의 스레드만 자원에 접근할 수 있도록 하는 상호 배제(Mutual Exclusion) 기법입니다. 반면 세마포어는 여러 개의 스레드가 접근 가능하며, 카운팅 세마포어를 통해 동시 접근 가능한 개수를 조절할 수 있습니다. 일반적으로 뮤텍스는 1개 자원을 보호할 때, 세마포어는 다중 자원을 관리할 때 사용됩니다.
345	0	0	0	페이징과 세그먼테이션에 대해 설명해주세요.	페이징과 세그먼테이션은 메모리 관리 기법입니다. 페이징은 고정된 크기의 페이지로 메모리를 나누고, 논리 주소를 물리 주소로 변환합니다. 반면 세그먼테이션은 가변 크기의 세그먼트로 나누어 프로그램 구조를 반영합니다. 페이징은 단편화를 줄이고 관리가 용이하지만, 내부 단편화가 발생할 수 있습니다. 세그먼테이션은 직관적이지만 외부 단편화가 문제입니다.
347	0	0	0	메인 메모리(main memory)에 대해 설명해주세요.	메인 메모리는 CPU가 직접 접근할 수 있는 주 기억장치로, 실행 중인 프로그램과 데이터를 저장합니다. RAM(Random Access Memory)으로 구성되며, 속도가 빠르지만 전원이 꺼지면 데이터가 사라지는 휘발성 메모리입니다. 운영체제는 프로세스의 데이터를 메인 메모리에 올려 실행하며, 가상 메모리와 캐시를 활용해 효율성을 높입니다.
349	0	0	0	Candidate Key (후보키)와 Primary Key (기본키), Super Key (슈퍼키)에 대해 설명해주세요.	슈퍼키(Super Key)는 테이블에서 튜플을 유일하게 식별할 수 있는 속성 또는 속성 집합입니다. 후보키(Candidate Key)는 슈퍼키 중 최소한의 속성만 포함한 키로, 기본키가 될 후보입니다. 기본키(Primary Key)는 후보키 중 선택된 키로, NULL 값을 가질 수 없으며 중복되지 않습니다. 데이터베이스의 무결성과 검색 성능을 유지하는 데 필수적입니다.
352	0	0	0	SQL과 NOSQL의 차이에 대해 설명해주세요.	SQL 데이터베이스는 관계형 데이터베이스(RDBMS)로, 정해진 스키마를 가지며 테이블 기반 구조입니다. NoSQL은 비정형 데이터를 저장하는 방식으로, 키-값(Key-Value), 문서(Document), 컬럼(Column), 그래프(Graph) 데이터 모델을 사용합니다. SQL은 트랜잭션과 정규화에 강점이 있으며, NoSQL은 확장성과 성능이 뛰어납니다.
353	0	0	0	이상 현상(Anomaly)의 종류에 대해 설명해주세요.	이상 현상(Anomaly)은 데이터베이스의 비효율적인 설계로 인해 발생하는 문제입니다. 삽입 이상(Insertion Anomaly)은 불필요한 데이터를 삽입해야 하는 문제이며, 삭제 이상(Deletion Anomaly)은 하나의 데이터를 삭제하면 의도하지 않은 다른 데이터도 삭제되는 문제입니다. 갱신 이상(Update Anomaly)은 동일한 데이터가 여러 곳에 저장되어 일관성이 깨지는 현상을 의미합니다. 이를 해결하기 위해 정규화를 수행합니다.
354	0	0	0	인덱스(Index)에 대해 설명해주세요.	인덱스는 데이터 검색 속도를 향상시키기 위한 구조입니다. B-Tree, Hash, Bitmap 인덱스 등의 유형이 있으며, 데이터베이스의 특정 컬럼에 대해 빠른 조회가 가능합니다. 인덱스를 적절히 사용하면 성능을 향상시킬 수 있지만, 과도한 인덱스 사용은 삽입, 갱신 속도를 저하시킬 수 있습니다. 일반적으로 자주 검색되는 컬럼에 인덱스를 설정합니다.
355	0	0	0	정규화(Normalization)에 대해 설명해주세요.	정규화는 데이터 중복을 최소화하고 데이터 무결성을 유지하기 위한 데이터베이스 설계 기법입니다. 제1정규형(1NF)은 반복 속성을 제거하고, 제2정규형(2NF)은 부분 함수 종속을 제거합니다. 제3정규형(3NF)은 이행적 종속을 제거하여 데이터 일관성을 향상시킵니다. 정규화를 통해 데이터 중복을 줄이고, 유지보수를 용이하게 할 수 있습니다.
421	0	0	0	Spring MVC 동작 원리에 대해 설명해주세요.	Spring MVC는 프론트 컨트롤러(DispatcherServlet)가 요청을 받아 컨트롤러로 전달하고, 해당 요청을 처리한 후 뷰(View)를 반환하는 구조입니다. Model, View, Controller의 역할을 분리하여 유지보수를 쉽게 하고, 다양한 뷰 템플릿(Thymeleaf, JSP 등)을 지원합니다.
348	1	1	1	파일 시스템(File System)에 대해 설명해주세요.	파일 시스템은 데이터를 저장하고 관리하는 방법을 정의하는 소프트웨어입니다. FAT, NTFS, ext4, HFS+ 등이 있으며, 각 운영체제마다 지원하는 파일 시스템이 다릅니다. 파일 저장 구조는 디렉터리, 파일 테이블, 인덱스 등이 포함됩니다. 파일 접근 속도, 보안, 중복 방지 등의 기능을 제공하며, SSD와 HDD에서 최적화된 방식으로 동작합니다.
346	1	1	1	페이지 교체 알고리즘에 대해 설명해주세요.	페이지 교체 알고리즘은 가상 메모리에서 페이지 부재가 발생했을 때, 어떤 페이지를 제거할지 결정하는 방식입니다. 대표적인 알고리즘으로 FIFO(First In First Out), LRU(Least Recently Used), LFU(Least Frequently Used), OPT(Optimal Page Replacement) 등이 있습니다. LRU는 가장 오래 사용되지 않은 페이지를 제거하는 방식이며, 캐시 관리에서도 자주 사용됩니다.
85	1	1	1	스프링 Bean의 생성 과정을 설명해주세요.	객체 생성 → 의존 설정 → 초기화 → 사용 → 소멸 과정의 생명주기를 가지고 있습니다. Bean은 스프링 컨테이너에 의해 생명주기를 관리하며 빈 초기화방법은 PostConstruct 를 빈 소멸에서는 PreDestroy 를 사용합니다. 생성한 스프링 빈을 등록할 때는 ComponentScan을 이용하거나 Configuration 의 Bean 을 사용하여 빈 설정파일에 직접 빈을 등록할 수 있습니다.
350	1	1	1	조인(Join)에 대해 설명해주세요.	조인은 두 개 이상의 테이블을 결합하여 데이터를 조회하는 방식입니다. 내부 조인(INNER JOIN)은 일치하는 데이터만 반환하며, 외부 조인(OUTER JOIN)은 일치하지 않는 데이터도 포함합니다. LEFT JOIN은 왼쪽 테이블의 모든 데이터를 포함하고, RIGHT JOIN은 오른쪽 테이블의 모든 데이터를 포함합니다. FULL JOIN은 양쪽 테이블의 모든 데이터를 반환합니다.
357	0	0	0	트랜잭션 격리 수준(Transaction Isolation Level)에 대해 설명해주세요.	트랜잭션 격리 수준은 동시에 실행되는 트랜잭션 간의 데이터 접근을 제어하는 방법입니다. READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE 네 가지 수준이 있습니다. 낮은 격리 수준은 성능을 높이지만 데이터 정합성이 깨질 위험이 있습니다. 반면 높은 격리 수준은 무결성을 보장하지만 동시 처리 성능이 낮아질 수 있습니다.
358	0	0	0	Redis에 대해 설명해주세요.	Redis는 키-값 기반의 인메모리 데이터 저장소로, 빠른 데이터 처리 속도를 제공합니다. 주로 캐싱, 세션 관리, 실시간 데이터 처리 등에 활용됩니다. 데이터 구조로 문자열, 리스트, 셋, 정렬된 셋, 해시 등을 지원합니다. 데이터 영속성을 위해 스냅샷(RDB)과 Append-Only File(AOF)을 제공합니다.
359	0	0	0	저장 프로시저(Stored PROCEDURE)에 대해 설명해주세요.	저장 프로시저는 SQL 문을 미리 저장하여 데이터베이스 내에서 실행할 수 있도록 하는 기능입니다. 이를 통해 동일한 SQL 연산을 반복적으로 사용할 때 성능을 최적화하고 코드의 재사용성을 높일 수 있습니다. 또한, 클라이언트와 데이터베이스 간의 트래픽을 줄이고, 보안성을 향상시킬 수 있습니다.
360	0	0	0	OSI 7 계층에 대해 설명해주세요.	OSI 7 계층은 네트워크 통신을 계층별로 나누어 설명하는 모델입니다. 물리 계층, 데이터 링크 계층, 네트워크 계층, 전송 계층, 세션 계층, 표현 계층, 응용 계층으로 구성됩니다. 각 계층은 특정 기능을 담당하며, 데이터를 효율적으로 송수신할 수 있도록 합니다. 실제 인터넷 통신에서는 TCP/IP 모델이 더 많이 사용됩니다.
361	0	0	0	3 way handshake와 4 way handshake에 대해 설명해주세요.	3 way handshake는 TCP 연결을 설정하는 과정으로, 클라이언트가 SYN 패킷을 보내고, 서버가 SYN-ACK로 응답한 후, 클라이언트가 ACK를 보내는 방식입니다. 4 way handshake는 TCP 연결을 종료할 때 사용되며, FIN과 ACK 패킷을 주고받는 방식으로 진행됩니다. 이를 통해 안정적인 네트워크 연결을 관리합니다.
362	0	0	0	TCP/IP에 대해 설명해주세요.	TCP/IP는 인터넷에서 사용되는 기본 프로토콜이며, TCP(전송 제어 프로토콜)와 IP(인터넷 프로토콜)로 구성됩니다. TCP는 신뢰성 있는 데이터 전송을 담당하며, IP는 패킷을 목적지까지 전달하는 역할을 합니다. TCP/IP는 OSI 7 계층을 네 개의 계층(네트워크 접근, 인터넷, 전송, 응용 계층)으로 단순화하여 사용합니다.
363	0	0	0	UDP에 대해 설명해주세요.	UDP(User Datagram Protocol)는 TCP와 달리 연결을 설정하지 않고 데이터를 전송하는 프로토콜입니다. 신뢰성이 보장되지 않지만, 빠른 데이터 전송이 필요한 스트리밍, VoIP, 온라인 게임 등에 사용됩니다. 패킷 손실이 발생할 수 있으며, 데이터 순서 보장이 어렵지만, 성능이 중요한 경우 활용됩니다.
364	0	0	0	대칭키와 공개키에 대해 설명해주세요.	대칭키 암호화는 동일한 키를 사용하여 데이터를 암호화하고 복호화하는 방식입니다. 대표적인 알고리즘으로 AES, DES가 있습니다. 공개키 암호화는 공개키와 개인키를 사용하여 데이터를 보호하는 방식으로, RSA, ECC 등이 있습니다. 공개키 암호화는 보안성이 뛰어나지만 속도가 느릴 수 있습니다.
365	0	0	0	HTTP와 HTTPS에 대해 설명해주세요.	HTTP(HyperText Transfer Protocol)는 웹에서 데이터를 주고받는 프로토콜입니다. HTTPS(HyperText Transfer Protocol Secure)는 HTTP에 SSL/TLS 암호화를 적용한 버전으로, 보안성이 강화되었습니다. HTTPS는 데이터를 암호화하여 중간에서 가로채는 공격을 방지하며, 신뢰할 수 있는 인증서를 통해 무결성을 보장합니다.
366	0	0	0	TLS/SSL HandShake에 대해 설명해주세요.	TLS/SSL 핸드셰이크는 클라이언트와 서버 간의 보안 연결을 설정하는 과정입니다. 클라이언트가 서버에 연결 요청을 보내면, 서버는 인증서를 제공하고 키 교환을 수행합니다. 이후 양측이 대칭키를 설정하고 암호화된 통신을 시작합니다. 이를 통해 데이터의 기밀성과 무결성을 보장할 수 있습니다.
367	0	0	0	로드 밸런싱(Load Balancing)에 대해 설명해주세요.	로드 밸런싱은 다수의 서버에 트래픽을 분산하여 시스템의 부하를 줄이는 기술입니다. 대표적인 방식으로 Round Robin, Least Connections, IP Hash 등이 있습니다. 로드 밸런서는 서버 과부하를 방지하고, 가용성과 성능을 향상시킵니다. 하드웨어 로드 밸런서와 소프트웨어 로드 밸런서가 존재하며, 클라우드 환경에서도 널리 사용됩니다.
368	0	0	0	Blocking/Non-blocking와 Synchronous/Asynchronous에 대해 설명해주세요.	Blocking은 작업이 완료될 때까지 대기하는 방식이며, Non-blocking은 즉시 제어권을 반환하는 방식입니다. Synchronous는 작업이 순차적으로 실행되며, Asynchronous는 병렬로 실행됩니다. Blocking + Synchronous는 일반적인 동기 방식이고, Non-blocking + Asynchronous는 이벤트 기반 처리에 주로 사용됩니다.
369	0	0	0	Blocking I/O와 Non-Blocking I/O에 대해 설명해주세요.	Blocking I/O는 I/O 작업이 완료될 때까지 프로그램이 대기하는 방식입니다. 반면, Non-Blocking I/O는 작업을 요청한 후 바로 제어권을 반환하며, 작업이 완료되면 알림을 받습니다. Non-Blocking I/O는 네트워크 서버, GUI 응용 프로그램 등에서 성능을 최적화하는 데 유용합니다.
370	0	0	0	시큐어 코딩에 대해 설명해주세요.	시큐어 코딩은 보안 취약점을 방지하기 위해 안전한 코드 작성 원칙을 적용하는 개발 기법입니다. SQL Injection, XSS, CSRF 등의 공격을 방지하는 것이 주요 목표입니다. 주요 원칙으로 입력 검증, 최소 권한 원칙, 안전한 암호화 사용 등이 있으며, 보안 감사 도구를 활용해 검증합니다.
371	0	0	0	TDD(Test Driven Development)에 대해 설명해주세요.	TDD(Test-Driven Development)는 테스트를 먼저 작성한 후, 해당 테스트를 통과하는 최소한의 코드를 구현하는 개발 방법론입니다. 이는 코드 품질을 향상시키고, 리팩토링을 쉽게 하며, 버그를 조기에 발견하는 데 도움을 줍니다. Red-Green-Refactor 주기를 반복하여 안정적인 코드 개발을 가능하게 합니다.
372	0	0	0	애자일(Agile)에 대해 설명해주세요.	애자일(Agile)은 빠르고 유연한 개발을 강조하는 소프트웨어 개발 방법론입니다. 반복적인 개발과 지속적인 고객 피드백을 통해 요구 사항 변경에 신속하게 대응할 수 있습니다. 스크럼(Scrum), 칸반(Kanban) 등이 대표적인 애자일 프레임워크이며, 협업과 지속적인 개선이 핵심 원칙입니다.
373	0	0	0	객체지향 프로그래밍에 대해 설명해주세요.	객체지향 프로그래밍(OOP)은 객체(Object)를 기반으로 설계하는 프로그래밍 패러다임입니다. 캡슐화, 상속, 다형성, 추상화 등의 원칙을 따릅니다. 코드의 재사용성과 유지보수성을 높이며, 현실 세계의 개념을 프로그래밍에 적용하기 쉽습니다. 대표적인 객체지향 언어로 Java, C++, Python 등이 있습니다.
374	0	0	0	함수형 프로그래밍에 대해 설명해주세요.	함수형 프로그래밍(FP)은 순수 함수(Pure Function)와 불변성(Immutability)을 중심으로 하는 프로그래밍 패러다임입니다. 부작용(Side Effect)을 최소화하고, 병렬 처리를 용이하게 합니다. 대표적인 개념으로 고차 함수(Higher-Order Function), 람다 표현식, 모나드(Monad) 등이 있습니다.
375	0	0	0	데브옵스(DevOps)에 대해 설명해주세요.	데브옵스(DevOps)는 개발(Development)과 운영(Operations)의 협업을 통해 소프트웨어 개발과 배포를 자동화하고 최적화하는 접근 방식입니다. CI/CD(Continuous Integration/Continuous Deployment)를 활용하여 지속적인 배포를 가능하게 합니다. 이를 통해 개발 속도를 높이고, 운영 안정성을 강화할 수 있습니다.
112	0	0	0	Magic Method에 대해 설명해주세요.	매직 메서드는 클래스에 특별한 동작을 정의하기 위해 사용되는 메서드로, 이름이 __init__, __str__처럼 두 개의 밑줄로 감싸져 있습니다. 예를 들어, __add__는 객체 간 덧셈 연산을 정의하며, __repr__과 __str__은 객체의 문자열 표현 방식을 제공합니다. 이러한 메서드를 활용하면 클래스의 동작을 직관적이고 유연하게 확장할 수 있습니다
377	0	0	0	디자인 패턴에 대해 설명해주세요.	디자인 패턴은 소프트웨어 설계에서 자주 사용되는 문제 해결 방법을 정형화한 것입니다. 생성 패턴(Factory, Singleton), 구조 패턴(Adapter, Composite), 행위 패턴(Observer, Strategy) 등이 있습니다. 이를 활용하면 코드의 유지보수성과 확장성이 향상됩니다.
378	0	0	0	어댑터 패턴(Adapter Pattern)에 대해 설명해주세요.	어댑터 패턴은 서로 다른 인터페이스를 연결하여 호환성을 높이는 디자인 패턴입니다. 기존 코드 변경 없이 새로운 기능을 추가할 수 있도록 도와줍니다. 주로 API 변환, 레거시 코드 통합 등에 활용되며, Java의 Adapter 클래스가 대표적인 예입니다.
379	0	0	0	싱글톤 패턴(Singleton pattern)에 대해 설명해주세요.	싱글톤 패턴은 특정 클래스의 인스턴스를 하나만 생성하여 사용하도록 제한하는 패턴입니다. 전역 상태를 관리하는 데 유용하지만, 남용할 경우 결합도가 높아질 수 있습니다. Java에서는 'private 생성자'와 'static getInstance()' 메서드를 통해 구현할 수 있습니다.
380	0	0	0	템플릿 메소드 패턴(Template Method Pattern)에 대해 설명해주세요.	템플릿 메소드 패턴은 알고리즘의 구조를 상위 클래스에서 정의하고, 세부 구현을 하위 클래스에서 담당하도록 하는 패턴입니다. 코드 재사용성을 높이고 중복을 줄이는 데 도움이 됩니다. Spring의 Bean 라이프사이클이나 JDBC Template 등이 이 패턴을 활용한 예입니다.
381	0	0	0	팩토리 메소드 패턴(Factory Method Pattern)에 대해 설명해주세요.	팩토리 메소드 패턴은 객체 생성을 서브클래스에서 담당하도록 하는 패턴입니다. 직접 객체를 생성하는 것이 아니라, 팩토리 메서드를 통해 객체 생성을 위임합니다. 이를 통해 객체 생성 로직을 분리하고, 유지보수성을 높일 수 있습니다.
382	0	0	0	옵저버 패턴(Observer pattern)에 대해 설명해주세요.	옵저버 패턴은 객체 간의 일대다 관계를 정의하여, 한 객체의 상태가 변경될 때 연결된 다른 객체들에게 자동으로 변경 사항을 알리는 패턴입니다. 주로 이벤트 기반 시스템에서 사용되며, 대표적인 예로 Java의 Observer 인터페이스나 JavaScript의 EventListener가 있습니다. 이를 활용하면 모듈 간의 결합도를 낮추고 확장성을 높일 수 있습니다.
383	0	0	0	스트레티지 패턴(Strategy Pattern)에 대해 설명해주세요.	스트레티지 패턴은 실행할 알고리즘을 캡슐화하고, 이를 동적으로 교체할 수 있도록 설계하는 패턴입니다. 예를 들어, 정렬 알고리즘을 필요에 따라 바꿀 수 있도록 설계할 때 유용합니다. 인터페이스를 통해 다양한 전략을 정의하고, 실행 시점에서 적절한 전략을 선택하여 동작합니다. Java의 Comparator 인터페이스가 대표적인 예입니다.
384	0	0	0	옵저버 패턴(Observer pattern)에 대해 설명해주세요.	옵저버 패턴은 특정 객체(Subject)의 상태 변화가 있을 때, 관련된 옵저버(Observer) 객체들에게 자동으로 알림을 보내는 패턴입니다. GUI 이벤트 리스너, 게시판의 구독 시스템 등이 대표적인 예입니다. 이 패턴을 사용하면 객체 간의 결합도를 낮추고, 이벤트 기반 처리가 용이해집니다.
385	0	0	0	컴포지트 패턴(Composite Pattern)에 대해 설명해주세요.	컴포지트 패턴은 객체들을 트리 구조로 구성하여, 개별 객체와 복합 객체를 동일한 방식으로 다룰 수 있도록 하는 패턴입니다. 예를 들어, GUI의 버튼과 패널처럼 여러 개의 요소를 하나의 단위로 처리하는 데 사용됩니다. 이 패턴을 사용하면 객체 계층 구조를 단순화하고 일관된 인터페이스를 제공할 수 있습니다.
386	0	0	0	SOLID에 대해 설명해주세요.	SOLID는 소프트웨어 설계 원칙을 정의하는 다섯 가지 원칙입니다. 단일 책임 원칙(SRP), 개방-폐쇄 원칙(OCP), 리스코프 치환 원칙(LSP), 인터페이스 분리 원칙(ISP), 의존성 역전 원칙(DIP)으로 구성됩니다. 이를 적용하면 유지보수성과 확장성이 높은 소프트웨어를 개발할 수 있습니다.
388	0	0	0	C언어 구조체 메모리 크기 (Struct Memory Size)에 대해 설명해주세요.	C언어의 구조체(Struct) 메모리 크기는 멤버 변수의 크기뿐만 아니라 메모리 정렬(Padding)에도 영향을 받습니다. 메모리 정렬은 CPU의 성능 최적화를 위해 자동으로 추가되는 여유 공간입니다. 따라서 구조체의 크기를 최소화하기 위해 멤버 변수를 크기순으로 정렬하는 것이 효율적입니다.
389	0	0	0	C언어 포인터에 대해 설명해주세요.	포인터는 변수의 메모리 주소를 저장하는 변수로, C언어에서 중요한 개념입니다. 포인터를 사용하면 동적 메모리 할당, 배열 및 함수 포인터 등을 활용할 수 있습니다. 이를 통해 메모리 관리를 효율적으로 수행하고, 다양한 자료 구조를 구현할 수 있습니다.
390	0	0	0	C언어 동적할당에 대해 설명해주세요.	C언어에서 동적 할당은 malloc(), calloc(), realloc(), free() 등의 함수를 사용하여 런타임 시 메모리를 동적으로 할당하고 해제하는 방식입니다. 동적 할당을 사용하면 프로그램 실행 중에 필요한 만큼의 메모리를 할당할 수 있지만, 할당된 메모리를 반드시 해제해야 메모리 누수를 방지할 수 있습니다.
391	0	0	0	C++ 얕은 복사와 깊은 복사에 대해 설명해주세요.	얕은 복사(Shallow Copy)는 객체의 메모리 주소만 복사하여 같은 데이터를 참조하는 방식입니다. 반면, 깊은 복사(Deep Copy)는 새로운 메모리를 할당하여 데이터를 복사하는 방식입니다. 얕은 복사를 사용할 경우 원본 객체의 변경이 복사본에도 영향을 미칠 수 있으므로, 필요에 따라 깊은 복사를 수행해야 합니다.
392	0	0	0	C++ 가상 함수(Virtual function)에 대해 설명해주세요.	C++에서 가상 함수(Virtual Function)는 다형성을 지원하기 위해 사용됩니다. 부모 클래스에서 virtual 키워드를 사용하면, 이를 오버라이딩한 자식 클래스의 메서드가 실행됩니다. 이를 통해 런타임 다형성을 구현할 수 있으며, 동적 바인딩이 가능해집니다.
394	0	0	0	Java 컴파일 과정에 대해 설명해주세요.	Java 컴파일 과정은 소스 코드(.java)를 바이트코드(.class)로 변환하는 과정입니다. 먼저, javac 컴파일러가 Java 소스 파일을 컴파일하여 바이트코드를 생성합니다. 이후, JVM(Java Virtual Machine)이 해당 바이트코드를 실행하며, JIT(Just-In-Time) 컴파일러가 실행 속도를 최적화합니다.
396	0	0	0	Java Call by value와 Call by reference에 대해 설명해주세요.	Java는 기본적으로 Call by Value 방식을 사용합니다. 기본 타입(Primitive Type)의 경우 값을 직접 복사하지만, 참조 타입(Reference Type)은 객체의 참조 주소를 복사하여 전달합니다. 따라서 메서드 내에서 객체의 속성을 변경하면 원본 객체에도 영향을 줄 수 있습니다.
398	0	0	0	Java 오토 박싱과 오토 언박싱에 대해 설명해주세요.	오토 박싱(Auto Boxing)은 기본 타입을 자동으로 객체 타입으로 변환하는 과정이며, 반대로 오토 언박싱(Auto Unboxing)은 객체 타입을 기본 타입으로 변환하는 과정입니다. 예를 들어, int 값이 Integer 객체로 변환될 때 자동으로 박싱되며, Integer에서 int로 변환될 때 자동으로 언박싱됩니다.
113	0	0	0	__new__와 __init__의 차이에 대해 설명해주세요.	__new__는 새로운 객체를 생성하는 정적 메서드로, 클래스의 인스턴스를 반환합니다. 반면, __init__은 생성된 객체를 초기화하는 인스턴스 메서드입니다. 즉, __new__는 객체 생성 과정에서 호출되고, 그 후에 __init__이 호출됩니다. 예를 들어, 싱글톤 패턴 구현 시 __new__를 활용하여 객체 생성을 제어할 수 있습니다
400	0	0	0	Java 문자열 클래스에 대해 설명해주세요.	Java의 String 클래스는 불변(Immutable) 객체로 설계되어 한 번 생성되면 변경할 수 없습니다. 문자열을 수정할 경우 새로운 String 객체가 생성되며, 메모리 효율을 위해 String Pool을 사용합니다. 문자열 변경이 빈번한 경우 StringBuilder 또는 StringBuffer를 사용하는 것이 효율적입니다.
401	0	0	0	Java Object 클래스에 대해 설명해주세요.	Object 클래스는 Java에서 모든 클래스의 최상위 부모 클래스이며, equals(), hashCode(), toString() 등의 메서드를 제공합니다. 이를 오버라이딩하여 객체 비교, 해시값 계산, 문자열 변환 등을 구현할 수 있습니다.
402	0	0	0	Java 업캐스팅과 다운캐스팅에 대해 설명해주세요.	업캐스팅(Upcasting)은 자식 클래스의 객체를 부모 클래스 타입으로 변환하는 것이며, 명시적 형 변환 없이 자동으로 수행됩니다. 다운캐스팅(Downcasting)은 부모 클래스를 다시 자식 클래스 타입으로 변환하는 과정이며, 명시적 형 변환이 필요하고 ClassCastException이 발생할 수 있어 주의해야 합니다.
403	0	0	0	Java 자바 가상 머신(Java Virtual Machine)에 대해 설명해주세요.	JVM(Java Virtual Machine)은 Java 프로그램을 실행하는 가상 머신입니다. 바이트코드를 해석하고 실행하며, 메모리 관리(Garbage Collection) 및 플랫폼 독립성을 제공합니다. 주요 구성 요소로는 클래스 로더(Class Loader), 실행 엔진(Execution Engine), 메모리 영역(Runtime Data Area)이 있습니다.
393	1	2	2	C++ 입출력 실행속도 줄이는 방법에 대해 설명해주세요.	C++에서 입출력 실행 속도를 최적화하는 방법으로는 std::ios::sync_with_stdio(false);를 사용하여 C 스타일 입출력과의 동기화를 비활성화하는 방법이 있습니다. 또한, cin.tie(NULL);을 사용하여 입력과 출력을 분리하면 성능이 향상될 수 있습니다.
404	0	0	0	Java Garbage Collection에 대해 설명해주세요.	Java의 가비지 컬렉션(Garbage Collection, GC)은 사용되지 않는 객체를 자동으로 메모리에서 해제하는 기능입니다. GC는 힙 메모리를 관리하며, 대표적인 방식으로 Mark-and-Sweep, Copying, Generational GC 등이 있습니다. GC를 효율적으로 관리하기 위해 finalize(), WeakReference 등을 활용할 수 있습니다.
405	0	0	0	Java Stream에 대해 설명해주세요.	Java Stream API는 컬렉션(List, Set, Map 등)에서 데이터를 효율적으로 처리할 수 있도록 지원하는 기능입니다. 필터링, 매핑, 정렬 등의 작업을 함수형 프로그래밍 스타일로 수행할 수 있으며, 병렬 스트림(Parallel Stream)을 사용하면 성능을 향상시킬 수 있습니다.
406	0	0	0	Java Record에 대해 설명해주세요.	Java 14에서 도입된 Record 클래스는 데이터 저장용 객체를 간결하게 정의할 수 있도록 제공됩니다. 기존의 POJO 클래스에서 getter, setter, equals(), hashCode() 등을 자동으로 생성해주며, 불변 객체(Immutable)로 사용할 수 있습니다.
407	0	0	0	Javascript let, const, var에 대해 설명해주세요.	var는 함수 스코프를 가지며, 호이스팅 시 undefined로 초기화됩니다. let과 const는 블록 스코프를 가지며, 호이스팅되지만 TDZ(Temporal Dead Zone)로 인해 초기화 전 접근이 불가능합니다. const는 재할당이 불가능하여 상수를 정의할 때 사용됩니다.
408	0	0	0	Javascript Closure에 대해 설명해주세요.	클로저(Closure)는 함수가 선언될 때의 환경(Lexical Scope)을 기억하고 있는 함수입니다. 내부 함수가 외부 함수의 변수를 참조할 수 있으며, 이를 활용하면 데이터 은닉 및 상태 유지를 구현할 수 있습니다. 대표적인 예로 JavaScript의 이벤트 핸들러와 setTimeout 콜백이 있습니다.
409	0	0	0	브라우저 동작 방법에 대해 설명해주세요.	브라우저는 URL을 입력하면 DNS 조회 후 HTTP 요청을 보냅니다. 서버에서 응답한 HTML, CSS, JavaScript를 파싱하여 DOM을 생성하고, CSSOM과 함께 렌더 트리를 구축합니다. 이후, 페인팅과 합성 과정을 거쳐 화면에 최종적으로 렌더링됩니다.
410	0	0	0	쿠키와 세션의 차이에 대해 설명해주세요.	쿠키는 클라이언트 측에 저장되는 작은 데이터이며, 브라우저가 자동으로 서버에 전송합니다. 세션은 서버 측에서 사용자 정보를 저장하며, 세션 ID를 쿠키를 통해 클라이언트와 연결합니다. 보안 측면에서 세션이 더 안전하지만, 서버의 리소스를 더 많이 사용합니다.
412	0	0	0	HTTP status code에 대해 설명해주세요.	HTTP 상태 코드는 클라이언트의 요청 결과를 나타내는 코드입니다. 200번대는 성공(예: 200 OK), 300번대는 리다이렉트(예: 301 Moved Permanently), 400번대는 클라이언트 오류(예: 404 Not Found), 500번대는 서버 오류(예: 500 Internal Server Error)를 의미합니다.
106	0	0	0	참조복사(얕은복사) vs 값복사(깊은복사)	1) 얕은 복사(Shallow copy)는 참조 타입 데이터가 저장한 '메모리 주소 값'을 복사한 것을 의미한다. ``` /* 얕은 복사시 주의!!! */ let origin = ["a", "b"]; let copy = origin; copy.push("c"); console.log(origin); //["a", "b", "c" ]; // 원본까지 바뀌어버림 console.log(copy); //["a", "b", "c"]; ``` 따라서 원본까지 바뀌는것에 주의해야 한다. 2) 반대로 깊은 복사(Deep copy)는 새로운 메모리 공간을 확보해 완전히 복사하는 것을 의미한다.
415	0	0	0	OAuth에 대해 설명해주세요.	OAuth(Open Authorization)는 외부 애플리케이션이 사용자 정보를 직접 제공받지 않고, 액세스 토큰을 통해 접근할 수 있도록 하는 인증 방식입니다. OAuth 2.0은 권한 부여 코드(Authorization Code) 및 액세스 토큰(Access Token)을 이용하며, 보안성을 높이기 위해 사용됩니다.
417	0	0	0	CSR와 SSR에 대해 설명해주세요.	CSR(Client-Side Rendering)은 클라이언트에서 JavaScript로 렌더링하는 방식이며, 초기 로딩 속도가 느리지만 페이지 전환이 빠릅니다. SSR(Server-Side Rendering)은 서버에서 HTML을 렌더링하여 보내는 방식으로, 초기 로딩 속도가 빠르고 SEO(검색 엔진 최적화)에 유리합니다.
418	0	0	0	네이티브 앱과 웹 앱, 하이브리드 앱에 대해 설명해주세요.	네이티브 앱은 특정 플랫폼(Android, iOS)에 최적화된 앱이며, 성능이 뛰어나지만 개발 비용이 높습니다. 웹 앱은 브라우저에서 실행되는 앱으로, 크로스 플랫폼 지원이 가능하지만 네이티브 기능 접근이 제한됩니다. 하이브리드 앱은 웹 기술로 개발한 후 네이티브 셸에서 실행되는 방식으로, 개발 비용이 적고 네이티브 기능을 일부 활용할 수 있습니다.
419	0	0	0	PWA (Progressive Web App)에 대해 설명해주세요.	PWA(Progressive Web App)는 웹 기술을 활용하여 네이티브 앱과 유사한 경험을 제공하는 웹 애플리케이션입니다. 오프라인에서도 동작할 수 있으며, 서비스 워커(Service Worker)를 활용하여 빠른 로딩 속도와 푸시 알림을 지원합니다. 설치형 웹 앱처럼 홈 화면에 추가할 수도 있습니다.
420	0	0	0	CSRF와 XSS에 대해 설명해주세요.	CSRF(Cross-Site Request Forgery)는 사용자가 인증된 상태에서 악의적인 요청을 실행하도록 유도하는 공격입니다. XSS(Cross-Site Scripting)는 공격자가 악성 스크립트를 삽입하여 사용자 브라우저에서 실행시키는 공격입니다. 이를 방지하기 위해 CSRF 토큰, CSP(Content Security Policy) 등을 활용할 수 있습니다.
422	0	0	0	JPA에 대해 설명해주세요.	JPA(Java Persistence API)는 객체 지향적인 방식으로 관계형 데이터베이스를 다룰 수 있도록 지원하는 ORM 프레임워크입니다. SQL을 직접 작성하지 않고, 엔티티(Entity)와 리포지토리(Repository)를 통해 데이터베이스 작업을 수행할 수 있습니다.
423	0	0	0	Spring Data JPA 더티 체킹 (Dirty Checking)에 대해 설명해주세요.	더티 체킹(Dirty Checking)은 엔티티의 변경 사항을 자동으로 감지하여 변경된 필드만 데이터베이스에 반영하는 기능입니다. 영속성 컨텍스트(Persistence Context)가 엔티티의 초기 상태를 추적하고, 변경이 감지되면 자동으로 UPDATE 쿼리를 수행합니다.
424	0	0	0	Spring Security 동작 방식에 대해 설명해주세요.	Spring Security는 인증(Authentication)과 권한 부여(Authorization)를 제공하는 프레임워크입니다. 필터 기반의 보안 체계를 가지며, UsernamePasswordAuthenticationFilter를 통해 인증을 수행하고, SecurityContextHolder를 사용하여 보안 정보를 관리합니다.
411	5	5	1	PUT와 PATCH의 차이에 대해 설명해주세요.	PUT은 리소스를 전체적으로 교체할 때 사용되며, 요청 시 모든 필드를 포함해야 합니다. 반면, PATCH는 리소스의 일부만 수정할 때 사용되며, 변경할 필드만 포함할 수 있습니다. PUT 요청은 기존 데이터를 완전히 덮어쓰지만, PATCH는 부분적인 업데이트를 수행합니다.
416	1	1	1	JWT (JSON Web Token)에 대해 설명해주세요.	JWT(JSON Web Token)는 사용자 인증을 위해 사용되는 토큰 기반의 인증 방식입니다. 헤더(Header), 페이로드(Payload), 서명(Signature)로 구성되며, Base64로 인코딩됩니다. 서버가 토큰을 저장하지 않아 세션 관리가 필요 없고, Stateless한 인증 방식으로 활용됩니다.
425	0	0	0	Vue.js 라이프사이클에 대해 설명해주세요.	Vue.js의 라이프사이클은 생성(created), 마운트(mounted), 업데이트(updated), 소멸(destroyed) 단계로 구성됩니다. 각 단계에서 특정 이벤트를 활용하여 데이터 로딩, DOM 조작 등을 수행할 수 있습니다.
427	0	0	0	React Hook에 대해 설명해주세요.	React Hook은 함수형 컴포넌트에서 상태 관리와 생명주기 메서드를 사용할 수 있도록 하는 기능입니다. 대표적인 Hook으로 useState, useEffect, useContext 등이 있으며, 코드의 재사용성을 높이고 가독성을 향상시킵니다. Hook을 사용하면 클래스형 컴포넌트 없이도 React의 주요 기능을 활용할 수 있습니다.
428	0	0	0	StringBuilder와 StringBuffer의 차이에 대해 설명해주세요.	StringBuilder와 StringBuffer는 문자열을 변경할 수 있는 객체입니다. StringBuffer는 멀티스레드 환경에서 동기화가 지원되므로 안전하지만 속도가 느립니다. 반면, StringBuilder는 동기화가 없지만 속도가 더 빠르므로 단일 스레드 환경에서 사용하기 적합합니다.
429	0	0	0	오버로딩과 오버라이딩 차이에 대해 설명해주세요.	오버로딩(Overloading)은 같은 클래스에서 같은 이름의 메서드를 매개변수의 타입이나 개수를 다르게 정의하는 것입니다. 오버라이딩(Overriding)은 부모 클래스의 메서드를 자식 클래스에서 재정의하는 것입니다. 오버라이딩은 다형성을 활용할 수 있으며, 오버로딩은 코드의 가독성을 높이는 데 도움이 됩니다.
430	0	0	0	추상 클래스와 인터페이스 차이에 대해 설명해주세요.	추상 클래스는 일부 구현된 메서드를 가질 수 있으며, 상태(필드)를 가질 수 있습니다. 반면, 인터페이스는 모든 메서드가 기본적으로 추상 메서드이며 상태를 가질 수 없습니다. 인터페이스는 다중 구현이 가능하지만, 추상 클래스는 단일 상속만 가능합니다.
431	0	0	0	제네릭에 대해 설명해주세요.	제네릭(Generic)은 다양한 타입을 하나의 클래스나 메서드에서 사용할 수 있도록 하는 기능입니다. 타입 안정성을 높이고, 불필요한 형변환을 줄여 코드의 가독성을 향상시킵니다. 예를 들어, List<T>를 사용하면 다양한 타입의 리스트를 만들 수 있습니다.
432	0	0	0	접근 제어자 (Access Modifier)에 대해 설명해주세요.	접근 제어자는 클래스, 변수, 메서드 등의 접근 범위를 지정하는 키워드입니다. Java에서는 public(모든 클래스에서 접근 가능), protected(같은 패키지 및 하위 클래스에서 접근 가능), default(같은 패키지 내에서만 접근 가능), private(해당 클래스 내부에서만 접근 가능)이 있습니다.
433	0	0	0	멀티 프로세스로 처리 가능한 걸 굳이 멀티 스레드로 하는 이유가 무엇인지 설명해주세요.	멀티 프로세스는 각 프로세스가 별도의 메모리 공간을 사용하므로 안정성이 높지만, 문맥 전환 비용이 큽니다. 반면, 멀티 스레드는 같은 프로세스 내에서 실행되어 메모리를 공유하므로 성능이 향상될 수 있습니다. 따라서 멀티 프로세스보다 멀티 스레드를 사용하면 자원 사용량을 줄이고 빠른 작업 처리가 가능합니다.
435	0	0	0	가상메모리에 대해 설명해주세요.	가상 메모리(Virtual Memory)는 실제 물리 메모리보다 큰 주소 공간을 사용할 수 있도록 하는 메모리 관리 기법입니다. 이를 통해 프로세스는 연속적인 메모리를 사용하는 것처럼 보이지만, 실제로는 디스크와 메모리를 함께 활용하여 데이터를 관리합니다.
436	0	0	0	교착상태 해결 방법 4가지에 대해 설명해주세요.	교착상태(Deadlock)는 여러 프로세스가 서로 자원을 점유한 채 무한정 대기하는 상태입니다. 해결 방법으로는 예방(자원 선할당), 회피(은행원 알고리즘), 탐지(주기적으로 검사 후 해결), 복구(교착 상태 발생 시 프로세스 종료)가 있습니다.
437	0	0	0	페이지 교체 알고리즘에 따른 페이지 폴트 방식에 대해 설명해주세요.	페이지 교체 알고리즘은 페이지 폴트를 최소화하기 위해 사용됩니다. FIFO(First-In-First-Out)는 가장 오래된 페이지를 교체하고, LRU(Least Recently Used)는 가장 오래 사용되지 않은 페이지를 교체합니다. Optimal 알고리즘은 앞으로 가장 오랫동안 사용되지 않을 페이지를 교체하는 방식입니다.
438	0	0	0	사용자 수준 스레드 vs 커널 수준 스레드 차이에 대해 설명해주세요.	사용자 수준 스레드는 운영체제의 커널이 직접 관리하지 않으며, 문맥 전환 비용이 낮습니다. 반면, 커널 수준 스레드는 커널에서 직접 스케줄링하며, 시스템 콜을 활용할 수 있지만 문맥 전환 비용이 큽니다.
439	0	0	0	fork()와 vfork()의 차이점에 대해 설명해주세요.	fork()는 부모 프로세스를 복사하여 새로운 자식 프로세스를 생성하는 함수입니다. vfork()는 부모 프로세스의 메모리를 공유하며, 자식 프로세스가 exec()을 호출하기 전까지 부모 프로세스가 대기합니다. vfork()는 fork()보다 성능이 좋지만, 잘못 사용하면 예상치 못한 동작이 발생할 수 있습니다.
440	0	0	0	DBMS에 대해 설명해주세요.	DBMS(Database Management System)는 데이터의 저장, 관리, 검색을 효율적으로 수행하는 소프트웨어입니다. 대표적으로 MySQL, PostgreSQL, Oracle 등이 있으며, 데이터 무결성과 보안을 보장합니다. 이를 통해 다중 사용자 환경에서도 데이터의 일관성을 유지할 수 있습니다.
441	0	0	0	DBMS의 요소에 대해 설명해주세요.	DBMS는 데이터(Data), 하드웨어(Hardware), 소프트웨어(Software), 사용자(User)로 구성됩니다. 데이터는 실제 저장되는 정보이며, 하드웨어는 저장 장치와 서버를 포함합니다. 소프트웨어는 DBMS 엔진이며, 사용자는 이를 활용하여 데이터를 관리합니다.
442	0	0	0	UML에 대해 설명해주세요.	UML(Unified Modeling Language)은 소프트웨어 설계를 시각적으로 표현하는 표준 모델링 언어입니다. 클래스 다이어그램, 시퀀스 다이어그램, 유스케이스 다이어그램 등 다양한 다이어그램을 포함하여 시스템 구조와 동작을 명확히 정의할 수 있습니다.
443	0	0	0	DB의 View에 대해 설명해주세요.	View는 하나 이상의 테이블에서 데이터를 가상적으로 조회할 수 있도록 제공하는 개체입니다. 실제 데이터를 저장하지 않으며, 복잡한 쿼리를 단순하게 만들고 보안성을 향상시킬 수 있습니다. SELECT 문을 기반으로 생성되며, 일부 View는 업데이트가 가능합니다.
444	0	0	0	Commit과 Rollback에 대해 설명해주세요.	Commit은 트랜잭션의 모든 변경 사항을 데이터베이스에 영구적으로 저장하는 명령어입니다. 반대로 Rollback은 트랜잭션 내의 변경 사항을 취소하고 원래 상태로 되돌리는 명령어입니다. 이를 통해 데이터 무결성을 유지하고 오류 발생 시 복구가 가능합니다.
445	0	0	0	GET과 POST의 차이에 대해 설명해주세요.	GET은 데이터를 조회할 때 사용하며, URL에 데이터를 포함하여 요청을 보냅니다. POST는 데이터를 변경하거나 추가할 때 사용하며, 요청 본문에 데이터를 포함하여 보냅니다. GET은 캐싱이 가능하지만, POST는 보안성이 높고 요청 크기 제한이 적습니다.
446	0	0	0	IOCP에 대해 설명해주세요.	IOCP(I/O Completion Port)는 Windows 운영체제에서 비동기 입출력을 처리하는 기술입니다. 많은 동시 접속을 처리할 때 성능을 향상시키며, 이벤트 기반으로 동작하여 CPU 자원을 효율적으로 사용할 수 있습니다. 주로 고성능 서버 애플리케이션에서 사용됩니다.
447	0	0	0	라우터와 스위치 차이에 대해 설명해주세요.	라우터는 네트워크 간 패킷을 전달하는 장치이며, IP 주소를 기반으로 데이터 경로를 결정합니다. 스위치는 같은 네트워크 내에서 장치 간 패킷을 전달하며, MAC 주소를 기반으로 데이터를 전송합니다. 라우터는 인터넷 연결에 주로 사용되며, 스위치는 내부 네트워크에서 효율적인 통신을 지원합니다.
448	0	0	0	스프링에 대해 설명해주세요.	Spring은 Java 기반의 프레임워크로, IoC(제어의 역전)와 DI(의존성 주입) 등을 지원하여 유지보수성을 높입니다. MVC, AOP, 데이터 접근 계층 등 다양한 기능을 제공하며, 대규모 애플리케이션 개발에 적합합니다.
449	0	0	0	스프링이랑 스프링 부트 차이에 대해 설명해주세요.	Spring은 다양한 기능을 제공하는 프레임워크이며, Spring Boot는 설정을 최소화하고 자동 구성을 제공하는 확장 프레임워크입니다. Spring Boot는 내장 웹 서버를 지원하며, 애플리케이션 개발 속도를 향상시킵니다.
450	0	0	0	Spring Security 스프링 필터랑 인터셉터의 차이에 대해 설명해주세요.	Spring Security의 필터는 요청이 서블릿에 도달하기 전에 인증 및 권한 검사를 수행하는 역할을 합니다. 인터셉터는 컨트롤러가 실행되기 전과 후에 추가적인 로직을 수행할 수 있습니다. 필터는 보안 관련 처리에, 인터셉터는 비즈니스 로직 전/후 처리에 주로 사용됩니다.
451	0	0	0	IOC에 대해 설명해주세요.	IOC(Inversion of Control)는 객체의 생성과 의존성을 컨테이너가 관리하는 개념입니다. 개발자가 객체의 생명 주기를 직접 제어하지 않고, 프레임워크가 자동으로 의존성을 주입하여 결합도를 낮출 수 있습니다.
453	0	0	0	DI(Dependency Injection)에 대해 설명해주세요.	DI(Dependency Injection)는 객체 간의 의존성을 직접 생성하는 대신, 컨테이너가 주입해주는 개념입니다. 이를 통해 코드의 결합도를 줄이고, 유지보수성과 테스트 용이성을 높일 수 있습니다.
454	0	0	0	AOP(Aspect Oriented Programming)에 대해 설명해주세요.	AOP는 핵심 비즈니스 로직과 부가 기능(로깅, 트랜잭션 등)을 분리하여 유지보수성을 높이는 기법입니다. Spring에서는 @Aspect를 이용해 공통 기능을 별도로 구현할 수 있습니다.
455	0	0	0	DAO, DTO, VO에 대해 설명해주세요.	DAO(Data Access Object)는 데이터베이스 접근을 담당하며, DTO(Data Transfer Object)는 데이터 전달을 위한 객체입니다. VO(Value Object)는 변경 불가능한 데이터를 표현하는 객체입니다.
426	1	1	1	React Fragment에 대해 설명해주세요.	React Fragment는 여러 개의 자식 컴포넌트를 그룹화할 때 사용되며, 불필요한 DOM 요소를 추가하지 않습니다. <Fragment> 또는 빈 태그(<>...</>)를 사용하여 구현할 수 있으며, 렌더링 성능을 최적화하는 데 유용합니다.
387	1	1	1	C언어 컴파일 과정에 대해 설명해주세요.	C언어 컴파일 과정은 전처리(Preprocessing), 컴파일(Compilation), 어셈블리(Assembly), 링크(Linking)의 4단계로 이루어집니다. 먼저 전처리 단계에서 매크로 치환 및 헤더 파일 포함이 이루어지고, 컴파일 단계에서 C 코드가 어셈블리어로 변환됩니다. 이후 어셈블리 단계에서 기계어 코드로 변환되며, 마지막으로 링킹을 통해 실행 가능한 파일이 생성됩니다.
311	1	2	2	DFS에 대해 설명해주세요.	DFS(Depth First Search)는 그래프 탐색 알고리즘으로, 한 노드에서 시작하여 갈 수 있는 만큼 깊이 탐색한 후 되돌아오는 방식입니다. 재귀 함수 또는 스택을 이용해 구현할 수 있으며, 백트래킹 기법과 함께 사용됩니다. 시간 복잡도는 O(V+E)이며, 그래프의 구조가 깊거나 연결 요소를 찾는 데 유용합니다. 하지만 최단 경로 탐색에는 적합하지 않습니다.
452	1.6666666666666667	5	3	Dispatcher-Servlet에 대해 설명해주세요.	Dispatcher-Servlet은 Spring MVC의 핵심 구성 요소로, HTTP 요청을 처리하고 적절한 컨트롤러에 전달하는 역할을 합니다. 요청을 분석하고, 인터셉터와 필터를 거쳐 적절한 뷰를 반환합니다.
107	1	2	2	List와 Tuple의 차이에 대해 설명해주세요.	List와 Tuple의 가장 큰 차이점은 값을 변경할 수 있는가의 여부입니다. 1. List는 값을 수정할 수 있지만, Tuple은 값을 변경할 수 없습니다. 2. List는 []로 작성, Tuple은 ()를 이용하여 작성합니다.
3	0	0	0	TCP 3, 4 way handshake에 대해서 설명해보세요.	TCP가 가상회선을 만들고 제거하는 과정에 대해서 묻는 질문입니다. TCP를 공부하셨다면 이 정도는 알겠지 하고 묻는 문제고, 실제 면접자리에서는 보통 네트워크에 대해서 설명할 때, 직접 설명하는 편입니다. TCP 3way handshake는 가상회선을 수립하는 단계입니다. 클라이언트는 서버에 요청을 전송할 수 있는지, 서버는 클라이언트에게 응답을 전송할 수 있는지 확인하는 과정입니다. SYN, ACK 패킷을 주고받으며, 임의의 난수로 SYN 플래그를 전송하고, ACK 플래그에는 1을 더한값을 전송합니다. 정확한 순서는 SYN(n) -> ACK(n + 1), SYN(m) -> ACK(m + 1) 순으로 일어납니다. 왜 임의의 난수를 지정하느냐는 꼬리질문이 나올 수 있습니다. 기존 요청과 구분하기 위해서 정도로 알고있고, 그 이상은 생각해본적이 없네요. TCP 4way handshake는 TCP연결을 해제하는 단계로, 클라이언트는 서버에게 연결해제를 통지하고 서버가 이를 확인하고 클라이언트에게 이를 받았음을 전송해주고 최종적으로 연결이 해제됩니다. 단, 서버에서 소켓이 닫혔다고 통지해도 클라이언트 측에서는 일정시간 대기하는데, 혹시나 패킷이 나중에 도착할 수 있기 때문입니다.
5	0	0	0	HTTPS에 대해서 설명하고 SSL Handshake에 대해서 설명해보세요.	HTTPS는 HTTP에 보안 계층을 추가한 것입니다. HTTPS는 제3자 인증, 공개키 암호화, 비밀키 암호화를 사용합니다. 제3자 인증은 믿을 수 있는 인증기관에 등록된 인증서만 신뢰하는 것이고, 공개키 암호화는 비밀키를 공유하기 위해 사용합니다. 비밀키 암호화는 통신하는 데이터를 암호화하는데 사용합니다. 클라이언트는 TCP 3way handshake를 수행한 이후 Client Hello를 전송합니다. 서버는 인증서를 보냅니다.(다른 정보들도 전송하나 검색을 통해 알 수 있는 부분입니다. 대개 그 정도까지는 요구하지 않습니다.) 클라이언트는 받은 인증서를 신뢰하기 위해서 등록된 인증기관인지 확인합니다. 이 인증서는 인증기관의 개인키로 암호화되어있고, 공개키로 검증할 수 있습니다.(브라우저에 내장되어있음) 클라이언트는 사이트의 정보와, 서버의 공개키를 얻을 수 있습니다. 서버의 공개키로 통신에 사용할 비밀키를 암호화해서 서버에 보냅니다. 서버는 이를 개인키로 확인하고 이후 통신은 공유된 비밀키로 암호화되어 통신합니다. 제3자 인증: 인증서, 인증기관/공개키 암호화: 인증서, 비밀키 공유/비밀키 암호화: 통신과정 왜 공개키 암호화와 비밀키 암호화를 복합적으로 사용했는지도 질문을 받았습니다.
131	0	0	0	로드 밸런서에 대해서 설명해주세요.	로드 밸런서는 네트워크 트래픽을 여러 서버로 분산하여 시스템 성능과 가용성을 높이는 장치입니다. 주요 방식으로는 Round Robin, Least Connections, IP Hash 등이 있으며, AWS에서는 ALB(Application Load Balancer)와 NLB(Network Load Balancer) 같은 서비스를 제공합니다.
4	1	3	3	HTTP와 HTTPS의 차이점에 대해서 설명해보세요.	HTTP는 따로 암호화 과정을 거치지 않기 때문에 중간에 패킷을 가로챌 수 있고, 수정할 수 있습니다. 따라서 보안이 취약해짐을 알 수 있습니다. 이를 보완하기 위해 나온 것이 HTTPS입니다. 중간에 암호화 계층을 거쳐서 패킷을 암호화합니다.
7	0	0	0	HTTP 메서드와 이것이 하는 역할에 대해서 설명해보세요.	보통 REST API를 설계했다면 이해할 수 있을정도로 설명하면 되는 것 같습니다. OPTIONS, HEAD, TRACE의 존재에 대해서는 알아만 둡시다. 특히 TRACE는 몰라도 되는 것 같습니다. OPTIONS는 해당 uri에 대해 서버가 허용하는 메서드를 확인할 때 사용합니다. HEAD는 GET과 비슷하나 header만 가져옵니다. GET 요청은 서버에 존재하는 데이터를 요청하는 것입니다. CRUD로 따지면 R입니다. POST 요청은 서버에 데이터를 생성하는 것을 요청합니다. CRUD로 따지면 C입니다. PUT 요청은 서버에 존재하는 데이터를 수정하거나 존재하지 않으면 생성합니다. CRUD로 따지면 C,U입니다. DELETE 요청은 서버에 데이터를 제거할 것을 요청합니다. 존재하지 않아도 동일하게 동작합니다. CRUD로 따지면 D입니다. PATCH 요청은 서버에 존재하는 데이터를 일부 수정합니다. CRUD로 따지면 U입니다. 더 나아가서 불필요한 메서드는 허용하지 않고 필요한 메서드만 허용하는 Whitelist 방식으로 관리합시다. 자세한 내용은 HTTP Method 취약점에 대해 검색합시다.
8	0	0	0	RESTful이란 무엇이며, 이것에 대해서 아는대로 설명해보세요.(보충필요)	REST는 굉장히 난해한 개념입니다. 하지만 REST가 무엇인지 대략의 감은 잡아둡시다. REST API를 설계했다면 충분히 물어볼만한 질문입니다. HTTP URI를 통해 자원을 표시하고 HTTP Method를 통해 자원에 대한 처리를 표현합니다. 사람이 읽을 수 있는 API라는 것이 특징입니다. HTTP를 사용하기 때문에 HTTP의 특성을 그대로 반영합니다. 또한 별도의 인프라 구축이 필요없습니다. 단점으로는 명확한 표준이 존재하지 않는다는 점, RESTful을 완전히 만족하는 API를 만들기는 매우 까다롭다는 점(그런 REST API로 괜찮은가 참고)이 있습니다. HATEOAS라는 개념이 있는데, 동적인 API를 제공할 수 있게됩니다.(모든 관련된 동작을 URI를 통해 알려줍니다.) 즉, 클라이언트가 API의 변화에 일일이 대응하지 않아도 된다는 장점을 가져옵니다.
9	0	0	0	CORS란 무엇이며 이것에 대해서 설명해보세요.	CORS는 웹개발을 하다가 흔히 만날 수 있는 이슈입니다. 대개는 프론트엔드 개발시에 로컬에서 API 서버에 요청을 보낼 때 흔하게 발생합니다. 서로 다른 도메인간에 자원을 공유하는 것을 뜻합니다. 대부분의 브라우저에서는 이를 기본적으로 차단하며, 서버측에서 헤더를 통해서 사용가능한 자원을 알려줍니다. preflight request는 실제 요청을 보내도 안전한지 판단하기 위해 사전에 보내는 요청입니다. OPTIONS 메서드로 요청하며 CORS를 허용하는지 확인합니다. CORS가 허용된 웹서버라면 사용 가능한 리소스를 헤더에 담아 응답합니다.
10	0	0	0	OSI7계층과 그 존재 이유, TCP/IP 4계층에 대해 설명해보세요.	OSI7계층은 네트워크 통신을 구성하는 요소들 7개의 계층으로 표준화 한 것입니다. 이렇게 표준화하는 것의 장점은 통신이 일어나는 과정을 단계별로 파악할 수 있어, 문제가 발생하면 해당 문제를 해결하기 용이해집니다. 실제로 우리가 대부분 사용하는 네트워크는 TCP/IP 4계층입니다. 통신에 실제로 사용되는 계층이고 1,2 계층이 1계층, 5, 6, 7계층이 4계층으로 운영됩니다.
11	0	0	0	웹 서버 소프트웨어(Apache, Nginx)는 OSI 7계층 중 어디서 작동하는지 설명해보세요.	Apache와 NGINX는 HTTP 웹 서버로, 이들이 동작하는 HTTP 프로토콜은 OSI 7 Layer 중 7계층인 애플리케이션 Layer 에 해당하는 프로토콜입니다. HTTP 프로토콜은 TCP/IP 프로토콜을 통해 동작합니다. TCP/IP 프로토콜은 OSI 7 Layer 중 4계층인 Transport Layer에서 동작합니다. 따라서 웹 서버 소프트웨어는 4계층의 TCP/IP 프로토콜과 7계층의 HTTP 프로토콜을 활용하여 동작합니다.
12	0	0	0	웹 서버 소프트웨어(Apache, Nginx)의 서버 간 라우팅 기능은 OSI 7계층 중 어디서 작동하는지 설명해보세요.	두 가지가 있습니다. Layer 4 (Transport Layer), 그리고 Layer 7 (Application Layer) 입니다. L4 에서는 TCP/UDP 포트 정보를 토대로 라우팅 기능이 제공됩니다. L7에서는 TCP/UDP 뿐만 아니라 HTTP의 URI 등을 토대로 라우팅 기능이 제공 됩니다. L4 에서 라우팅 기능을 사용 한 예시를 들자면, Nginx 의 경우 여러 포트들을 하나의 upstream 블록으로 묶어서 로드 밸런싱, 즉 특정 경로로 전달되는 요청을 각 포트 별로 분산해서 전달하도록 설정 해 줄 수 있습니다. L7 에서 라우팅 기능을 사용 한 예시를 들자면, Apache, Nginx 각각에서 서브 도메인에 대해 라우팅 설정을 해 둘 수 있습니다. 브라우저에서 /test 와 같은 서브 도메인으로 HTTP 프로토콜을 통한 요청을 보낸다면, 웹서버 내 Config 파일에 설정 된 경로 정보를 토대로 요청에 대한 라우팅을 제공하여 스태틱 파일을 전달하거나 API 서버에 대해 리버스 프록시 역할을 해 줄 수 있습니다.
14	0	0	0	컨텍스트 스위칭에 대해 설명해보세요.	컨텍스트 스위칭은 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다. 인터럽트가 발생하면 현재 프로세스의 상태를 PCB에 저장하고 새로운 프로세스의 상태를 레지스터에 저장하는 방식으로 동작합니다. 이 때, CPU는 아무런 일을 하지 않으므로 잦은 컨텍스트 스위칭은 성능저하를 일으킬 수 있습니다. 스레드와 프로세스의 동작방식이 약간 상이한데, 스레드는 캐시메모리나 PCB에 저장해야하는 내용이 적고, 비워야 하는 내용도 적기때문에 상대적으로 더 빠른 컨텍스트 스위칭이 일어날 수 있습니다.
15	0	0	0	동기와 비동기의 차이(블로킹, 넌블로킹) / 장단점에 대해 설명해보세요.	동기/비동기는 두 개 이상의 무엇인가가 시간을 맞춘다/안맞춘다로 구분할 수 있습니다. 동기 방식은 메서드 리턴과 결과를 전달받는 시간이 일치하는 명령 실행 방식입니다. 또, 동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같습니다. 비동기 방식은 여러 개의 처리가 함께 실행되는 방식으로, 동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있습니다. 단, CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있습니다. 프로그램의 복잡도도 증가하게 됩니다. 블로킹/논블로킹은 동기/비동기와는 다른 관점으로, 내가 직접 제어할 수 없는 대상(IO/멀티스레드)을 상대하는 방법에 대한 분류입니다. 블로킹 방식은 대상의 작업이 끝날 때 까지 제어권을 대상이 가지고 있는 것을 의미합니다. 반면에 논블로킹은 대상의 작업 완료여부와 상관없이 새로운 작업을 수행합니다. 동기 논블로킹은 계속해서 polling을 수행하기 때문에 컨텍스트 스위칭이 지속적으로 발생해 지연이 발생합니다. https://youtu.be/HKlUvCv9hvA 를 참고합시다.
16	0	0	0	멀티스레드 프로그래밍에 대해 설명해보세요.	멀티스레드 프로그래밍은 하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것을 멀티스레드 프로그래밍이라고 합니다. 장점 멀티 프로세스에 비해 메모리 자원소모가 줄어듭니다. 힙 영역을 통해서 스레드간 통신이 가능해서 프로세스간 통신보다 간단합니다. 스레드의 컨텍스트 스위칭은 프로세스의 컨텍스트 스위칭보다 빠릅니다. 단점 힙 영역에 있는 자원을 사용할 때는 동기화를 해야합니다. 동기화를 위해서 락을 과도하게 사용하면 성능이 저하될 수 있습니다. 하나의 스레드가 비정상적으로 동작하면 다른 스레드도 종료될 수 있습니다.
17	0	0	0	Thread-safe 하다는 의미와 설계하는 법을 설명해보세요.	두 개 이상의 스레드가 race condition에 들어가거나 같은 객체에 동시에 접근해도 연산결과의 정합성이 보장될 수 있게끔 메모리 가시성이 확보된 상태를 의미합니다. java.util.concurrent 패키지 하위의 클래스를 사용합니다. 인스턴스 변수를 두지 않습니다. Singleton 패턴을 사용합니다.(이 때, 일반적으로 구현하는 Singleton Pattern은 Thread-safe 하지 않습니다.)[참고](https://github.com/ksundong/TIL/blob/master/DesignPattern/singleton-pattern.md) 동기화(syncronized) 블럭에서 연산을 수행합니다.
18	0	0	0	프로세스 동기화에 대해 설명해보세요.	알아야 하는 부분이 조금 많습니다. 면접때에는 적절히 짧게 끊어서 대답합시다. 너무 깊게 들어가면 말을 번복할 가능성도 있고, 잘 모른다는 인상을 주기 쉽습니다. 다중 프로세스 환경에서 자원등에 한 프로세스만이 접근가능하도록 하는 것입니다. 프로세스 동기화를 하지 않으면 데이터의 일관성이 깨지기 때문에 연산결과가 잘못 반환될 가능성이 존재하기 때문에 주의해야 합니다. Race Condition(경쟁 상태): 여러 프로세스나 스레드가 동기화 메커니즘 없이 자원에 접근하려는 상황을 가리킵니다. 공유된 자원에 대한 접근 순서에 따라 실행 결과가 달라질 수 있는 상황을 의미합니다. Critical Section(임계 구역): 여러 스레드가 동시에 접근해서는 안되는 공유자원에 접근하는 코드 블럭을 얘기합니다. 한 임계구역에 하나의 스레드 혹은 프로세스만 접근이 가능합니다. 임계 구역에 접근하는 것을 제어하기 위해 세마포어, 뮤텍스와 같은 매커니즘을 사용합니다. 임계 구역 문제를 해결하기 위한 조건(모두 충족해야함) 상호 배제(Mutual Exclusion): 한 프로세스가 임계구역에서 동작중이면 다른 프로세스는 접근할 수 없다. 진행(Progress): 임계구역에서 작업중인 프로세스가 없다면 입계구역으로 진입하려는 프로세스를 적절히 선택해서 진입할 수 있도록 합니다. 유한 대기(Bounded Waiting): 한 프로세스가 임계영역으로 진입을 요청한 후 다른 프로세스는 진입이 유한한 횟수로 제한되어야 합니다. (기아상태 방지)
19	0	0	0	교착상태와 기아상태의 해결방법에 대해 설명해보세요.	교착상태(Deadlock)가 무엇인지 알고 있어야 합니다. 서로 다른 프로세스가 서로 점유하고 있는 자원의 반납을 대기하고 있는 상태를 의미합니다. 발생조건 상호 배제: 한 번에 한 프로세스만 해당 자원을 사용할 수 있어야 합니다. 점유 대기: 할당된 자원을 가진 상태에서 다른 자원을 기다립니다. 비선점: 다른 프로세스가 자원의 사용을 끝낼 때 까지 자원을 뺏을 수 없습니다. 순환대기: 각 프로세스가 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있습니다. 해결방법 예방: 4가지 조건 중 하나라도 만족되지 않도록 합니다. 회피: 알고리즘을 데드락이 발생하지 않도록 합니다. 회복: 교착상태가 발생할 때, 해결합니다. 무시: 회복과정의 성능저하가 심하다면 그냥 무시합니다. 기아상태(Starvation): 여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우입니다. 우선순위를 변경합니다.(우선순위를 수시로 변경하거나, 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용합니다.)
20	0	0	0	세마포어와 뮤텍스의 차이에 대해 설명해보세요.	세마포어는 여러개의 프로세스가 접근 가능한 공유자원을 관리하는 방식이고, 뮤텍스가 될 수 있지만, 뮤텍스는 한 번에 한 개의 프로세스만 접근 가능하도록 관리하는 방식입니다. 따라서 뮤텍스는 세마포어가 될 수 없습니다. 또, 세마포어는 다른 프로세스가 세마포어를 해제할 수 있지만, 뮤텍스는 락을 획득한 프로세스만 락을 반환할 수 있습니다.
21	0	0	0	가상 메모리에 대해 설명해보세요.	가상 메모리는 프로세스가 실제 메모리의 크기와 상관없이 메모리를 이용할 수 있도록 지원하는 기술 입니다. 가상 메모리는 실제 메모리(RAM, main memory, first storage)와 보조 기억 장치(auxiliary storage, secondary storage)의 Swap 영역으로 구성됩니다. OS 는 메모리 관리자(Memory Management Unit)를 통해 메모리를 관리하며 프로세스는 사용하는 메모리가 실제 메모리인지, Swap 영역인지 모릅니다. Java 에서는 Swap 영역을 잡아주지 않은 경우 OOM 이 발생할 수 있습니다. Swap 영역은 실제 메모리가 아니기 때문에 지연시간이 많이 발생하며, 가급적이면 Swap 메모리를 사용하지 않도록 설계하는 것이 좋고, 만약 계속해서 사용하는 양이 증가한다면 메모리 누수를 의심해 볼 수 있습니다.
22	0	0	0	캐시의 지역성에 대해 설명해보세요.	캐시가 무엇인지, 왜 캐시를 사용하는지를 알고 있어야 합니다. 관련한 좋은 글을 링크해둡니다. https://parksb.github.io/article/29.html 시간 지역성과 공간 지역성으로 나눌 수 있으며, 시간 지역성은 최근에 접근한 데이터에 다시 접근하는 경향을 의미하고, 공간 지역성은 최근 접근한 데이터의 주변 공간에 다시 접근하는 경향을 의미합니다.
23	0	0	0	프로세스 관련 용어를 설명해보세요.	PCB: 프로세스 제어 블록, 프로세스에 대한 중요한 정보를 저장합니다. PC: 프로그램 카운터, 프로세스 실행을 위한 다음 명령의 주소를 표시합니다. 캐시메모리: 자주 사용되는 데이터가 저장되는 공간으로 CPU의 레지스터와 메모리 사이에서 병목 현상을 완화하는 장치입니다.
24	0	0	0	데이터베이스에서 인덱스를 사용하는 이유 및 장단점에 대해 설명해주세요.	데이터베이스에서 인덱스를 사용하는 이유는 검색성능을 향상시키기 위함입니다. 하지만 검색성능을 실질적으로 향상시키기 위해서는 해당 쿼리가 index를 사용하는지, 카디널리티, Selectivity 같은 요소들이 고려된 인덱스가 생성되어야 합니다. 일반적인 경우의 장점으로는 빠른 검색 성능을 들 수 있습니다. 일반적인 경우의 단점으로는 인덱스를 구성하는 비용 즉, 추가, 수정, 삭제 연산시에 인덱스를 형성하기 위한 추가적인 연산이 수행됩니다. 따라서, 인덱스를 생성할 때에는 트레이드 오프 관계에 놓여있는 요소들을 종합적으로 고려하여 생성해야합니다. 그렇다고 모든 곳에서 인덱스를 사용하면 오히려 악효과를 낼 수 있다. 1. 인덱스를 생성하면 추가적인 저장공간이 필요하고 인덱스 관리를 위한 오버헤드가 발생 할 수 있다. 2. 인덱스가 존재하는 경우, 데이터 삽입,수정,삭제시에도 인덱스가 함께 업데이트 된다. 다라서 인덱스 수가 많이잘수록 쓰기 성능이 감소 할 수 있다. 3. 쿼리에 사용되지 않는 인덱스가 존재하면, 해당 인덱스는 시스템 리소스 공간을 불필요하게 차지하기 때문에 시스템 전체 성능에 부정적인 영향이 있을 수 있다. 4. 인덱스를 관리하는것도 비용이 드는 작업이기 때문에 인덱스가 많아지면 관리하기 어려울 수 있다. 등의 문제가 있기 때문에 인덱스를 생성전에 충분한 분석 및 검토가 필요하여 시스템을 균형있게 유지해야 한다.
25	0	0	0	트랜잭션에 대해서 설명해주세요.	트랜잭션이란 데이터베이스의 상태를 변화시키는 하나의 논리적인 작업 단위라고 할 수 있으며, 트랜잭션에는 여러개의 연산이 수행될 수 있습니다. 트랜잭션은 수행중에 한 작업이라도 실패하면 전부 실패하고, 모두 성공해야 성공이라고 할 수 있습니다.
26	0	0	0	ACID에 대해서 설명해주세요.	ACID는 트랜잭션이 안전하게 수행된다는 것을 보장하기 위한 성질입니다. Atomicity(원자성): 트랜잭션의 연산은 모든 연산이 완벽히 수행되어야 하며, 한 연산이라도 실패하면 트랜잭션 내의 모든 연산은 실패해야 합니다. Consistency(일관성): 트랜잭션은 유효한 상태로만 변경될 수 있습니다. Isolation(고립성): 트랜잭션은 동시에 실행될 경우 다른 트랜잭션에 의해 영향을 받지 않고 독립적으로 실행되어야 합니다. Durability(내구성): 트랜잭션이 커밋된 이후에는 시스템 오류가 발생하더라도 커밋된 상태로 유지되는 것을 보장해야 합니다. (일반적으로 비휘발성 메모리에 데이터가 저장되는 것을 의미)
27	0	0	0	트랜잭션 격리 수준(Transaction Isolation Levels)에 대해서 설명해주세요.	트랜잭션 격리수준은 고립도와 성능의 트레이드 오프를 조절합니다. READ UNCOMMITTED: 다른 트랜잭션에서 커밋되지 않은 내용도 참조할 수 있다. READ COMMITTED: 다른 트랜잭션에서 커밋된 내용만 참조할 수 있다. REPEATABLE READ: 트랜잭션에 진입하기 이전에 커밋된 내용만 참조할 수 있다. SERIALIZABLE: 트랜잭션에 진입하면 락을 걸어 다른 트랜잭션이 접근하지 못하게 한다.(성능 매우 떨어짐)
28	0	0	0	정규화에 대해서 설명해주세요.	정규화는 데이터의 중복방지, 무결성을 충족시키기 위해 데이터베이스를 설계하는 것을 의미합니다. 이 이상을 물어보는 경우가 있었는데, 학습이 좀 더 필요한 것 같습니다.
30	0	0	0	RDBMS vs NOSQL에 대해서 설명해주세요.	RDBMS는 데이터베이스를 이루는 객체들의 릴레이션을 통해서 데이터를 저장하는 데이터베이스입니다. SQL을 사용해 데이터의 저장, 질의, 수정, 삭제를 할 수 있으며 데이터를 효율적으로 보관하는 것을 목적으로 하고 구조화가 굉장히 중요합니다. 장점으로는 명확한 데이터 구조를 보장하고, 중복을 피할 수 있습니다. NOSQL은 RDBMS에 비해 자유로운 형태로 데이터를 저장합니다. 또한 수평확장을 할 수 있고 분산처리를 지원합니다. 다양한 형태의 NOSQL 데이터베이스가 있고, 대표적으로 key-value store, bigtable, dynamo, document db, graph db 등이 있습니다. 둘은 대체될 수 있는 것이 아니고, 각각 필요한 시점에 적절히 선택해서 사용해야 합니다. 둘 다 같이쓰는 상호보완적인 존재가 될 수도 있습니다.
31	0	0	0	Redis에 대해서 간단히 설명해주세요.	Redis는 key-value store NOSQL DB입니다. 싱글스레드로 동작하며 자료구조를 지원합니다. 그리고 다양한 용도로 사용될 수 있도록 다양한 기능을 지원합니다. 데이터의 스냅샷 혹은 AOF 로그를 통해 복구가 가능해서 어느정도 영속성도 보장됩니다. 스프링에서는 세션을 관리하거나, 캐싱을 하는데에 자주 사용되는 것으로 알고 있습니다.
32	0	0	0	Redis와 Memcached의 차이에 대해서 설명해주세요.	Redis는 싱글 스레드 기반으로 동작하고, Memcached는 멀티스레드를 지원해서 멀티 프로세싱이 가능합니다. Redis는 다양한 자료구조를 지원하고, Memcached는 문자열 형태로만 저장합니다. Redis는 여러 용도로 사용할 수 있도록 다양한 기능을 지원합니다. Redis는 스냅샷, AOF 로그를 통해서 데이터 복구가 가능합니다.
60	0	0	0	컬렉션 프레임워크에 대해서 설명해주세요.	Java Collection은 널리 알려져 있는 자료구조를 바탕으로 객체, 데이터들을 효율적으로 관리 할 수 있는 자료구조들이 있는 라이브러리를 컬렉션 프레임워크라고 합니다. List, Set은 Collection 인터페이스을 상속받지만, Map 인터페이스는 구조상의 차이라 별도로 정의합니다.
33	0	0	0	Elastic Search에 대해서 간단히 설명해주세요.	Elastic Search는 자바로 개발된 오픈소스 검색엔진 입니다. 보통 단독으로 사용하기보다는 ELK 스택이라고 부르는 Logstash, Kibana, Beats를 추가적으로 사용합니다. Inverted Index 구조로 데이터를 저장해서, 전문(Full-text) 검색시에 RDBMS에 비해 뛰어난 성능을 보장합니다. 다양한 용도로 사용할 수 있습니다. (데이터 저장, 문서 검색, 위치 검색, 머신 러닝 기반 검색, 로그 분석, 보안 감사 분석 등)
34	0	0	0	Elastic Search의 인덱스구조와 RDBMS의 인덱스 구조의 차이에 대해 설명해주세요.	Elastic Search는 Inverted-Index 구조로 데이터를 저장합니다. 이는 책의 색인을 생각해보면 쉬운데, 특정 단어가 출현하는 doc을 저장하는 것입니다. 반면 RDBMS는 B-Tree와 그와 유사한 인덱스를 사용합니다. 데이터가 어디에 존재하는지 어떤 순서로 저장하는 지의 차이라고 생각합니다. RDBMS에도 다양한 인덱스 구조가 있으나 여기서 예로 든 것은 B-Tree 인덱스입니다.
35	0	0	0	Elastic Search의 키워드 검색과 RDBMS의 LIKE 검색의 차이에 대해 설명해주세요.	Elastic Search의 키워드 검색은 document를 저장할 때 수행하는 알고리즘과 동일한 알고리즘으로 키워드를 분리합니다. 그 중에서 랭킹알고리즘을 통해서 가장 유사한 순서대로 결과를 나타냅니다. RDBMS에서의 LIKE 검색은 와일드카드로 시작하지 않는 경우에만 인덱스를 사용하고 나머지 경우는 전체를 탐색하기 때문에 상대적으로 느립니다.
36	0	0	0	MongoDB에 대해서 간단히 설명해주세요.	MongoDB는 문서 지향적인 NoSQL 데이터베이스로 대량의 비정형 데이터를 다루는 데에 강점을 보입니다. 문서(Document)란 데이터베이스의 종류이며, 그 도큐먼트들을 모은 것을 컬렉션이라고 설명할 수 있을 것 같습니다. 또한 MongoDB는 JSON 형식의 문서로 데이터를 저장합니다. 따라서 app의 요구사항에 맞춰 데이터를 조직화할 수 있다는 장점이 있습니다.
37	0	0	0	CAP 이론과, Eventual Consistency에 대해서 설명해주세요.	CAP 이론은 분산 환경에서 모두를 만족하는 시스템은 없다는 이론입니다. Consitenty(일관성): ACID의 일관성과는 약간 다릅니다. 모든 노드가 같은 시간에 같은 데이터를 보여줘야 한다는 것입니다. Availability(가용성): 모든 동작에 대한 응답이 리턴되어야 합니다. Partition Tolerance(분할 내성): 시스템 일부가 네트워크에서 연결이 끊기더라도 동작해야 합니다. CAP는 해당 시스템이 이거다 하고 말하기 곤란한게 어떻게 클러스터링 하느냐에 따라 달라질 수 있습니다. 그렇기 때문에 어떤 전략을 취할 때 어떤 것을 선택했는가를 잘 알아야 합니다. (단순히 MySQL이 CA입니다. 보다는 어떤 이유로 CA인지 근거를 생각해보기) 그리고 어느정도 한계가 있는 이론이고 PACELC 이론이라고 또 있습니다. Eventual Consistency는 이 Consistency를 보장해주지 못하기 때문에 나온 개념으로, Consistency를 완전히 보장하지는 않지만, 결과적으로 언젠가는 Conssistency가 보장됨을 의미합니다.
39	0	0	0	배열과 링크드 리스트의 차이를 설명해주세요.	배열은 메모리상에 순서대로 데이터를 저장합니다. 반면 링크드 리스트는 다음 데이터의 위치에 대한 포인터를 가지고 있는 구조입니다. 배열은 데이터를 인덱스로 조회할 수 있기 때문에 인덱스 조회성능이 높고, 데이터가 메모리에 순서대로 저장되어 있기 때문에, 캐시의 지역성으로 인하여 비교적 빠르게 탐색을 수행할 수 있습니다. 링크드 리스트는 중간에 데이터를 삽입하거나 삭제하는 것이 용이하다는 장점이 있습니다.
40	0	0	0	List와 Set의 차이에 대해서 설명해주세요.	List는 중복된 데이터를 저장하고 순서를 유지하는 선형 자료구조이고, Set은 중복되지 않은 데이터를 저장할 수 있고, 일반적으로 순서를 유지하지 않는 선형 자료구조입니다.(Set은 집합입니다., TreeSet과 같이 순서를 유지하는 Set도 존재합니다.)
42	0	0	0	Stack, Queue에 대해서 설명해주세요.	Stack 스택은 선형 자료구조의 일종으로 마지막에 저장한 데이터를 가장 먼저 꺼내게 되는 LIFO(Last In First Out)방식의 자료구조 입니다. 스택의 사용 예시로는 웹 브라우저의 방문기록(뒤로가기), 실행 취소(undo) 등이 있습니다. Queue 큐는 선형 자료구조의 일종으로 처음에 저장한 데이터를 가장 먼저 꺼내게 되는 FIFO(First In First Out)방식의 자료구조 입니다. 큐의 사용 예시로는 프린터의 인쇄 대기, 콜센터 고객 대기 시간 등이 있습니다.
43	0	0	0	Heap, Priority Queue에 대해서 설명해주세요.	Heap은 완전 이진 트리 기반의 자료구조로, 최대값 또는 최소값을 빠르게 찾을 수 있도록 설계되었습니다. Priority Queue는 우선순위가 높은 요소를 먼저 처리하는 큐로, 내부적으로 힙을 사용해 구현됩니다. Min-Heap은 부모 노드가 자식 노드보다 작고, Max-Heap은 부모 노드가 자식 노드보다 큽니다. Priority Queue는 작업 스케줄링, 네트워크 패킷 처리 등 우선순위가 중요한 작업에 사용됩니다.
46	0	0	0	피보나치 수열을 코드로 구현하는 방법에 대해서 설명해주세요.	질문의 의도는 피보나치 수열을 코드로 구현할 수 있는가? 만약 재귀를 사용했다면 어떤 문제가 있는가? DP를 사용할 수 있는가로 이어집니다. 피보나치 수열은 보통 재귀정도로 구현할 수 있지만, 중복된 연산이 계속해서 발생하게 됩니다. 이런 중복된 연산을 메모리 등에 저장해두고 해당 결과가 존재하지 않을 때만 연산을 수행하도록 하면 보다 빠른 동작을 구현할 수 있게됩니다.
49	0	0	0	비대칭키 암호화, 대칭키 암호화에 대해 간단히 설명해주세요.	비대칭키 암호화란 공개키 암호화라고도 하며, 공개키는 외부에 공개되어있고, 비밀키는 내부적으로 가지고 있고 서로 각각의 키로 암호화하거나 해제할 수 있는 방식입니다. 이 방식은 대칭키를 공유하는 방식보다 비교적 안전하며, 대신 연산 성능이 떨어지는 편입니다. 대칭키 암호화란 양측이 동일한 키를 가지고 있으며, 암호화와 해제에 동일한 키를 사용하는 방식입니다. 이 방식은 비밀키가 노출되는 문제가 있을 수 있으며, 연산성능은 덜 필요해 상대적으로 빠릅니다.
61	0	0	0	제네릭에 대해서 설명해주세요.	제네릭은 자바의 타입 안정성을 맡고 있습니다. 컴파일 과정에서 타입체크를 해주는 기능으로 객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줍니다.
334	2	2	1	운영체제에 대해 설명해주세요.	운영체제(OS)는 하드웨어와 소프트웨어 간의 인터페이스 역할을 하는 시스템 소프트웨어입니다. CPU, 메모리, 저장 장치, 프로세스, 파일 시스템 등의 자원을 관리하고, 사용자와 시스템 간 상호작용을 제공합니다. 멀티태스킹, 멀티스레딩, 가상 메모리 등의 기능을 지원하며, Windows, Linux, macOS 등이 대표적인 운영체제입니다. 효율적인 시스템 자원 관리와 보안이 주요 역할입니다.
399	1	1	1	Java 직렬화(Serialization)에 대해 설명해주세요.	Java 직렬화(Serialization)는 객체를 바이트 스트림으로 변환하여 파일이나 네트워크로 전송할 수 있도록 하는 과정입니다. 이를 위해 Serializable 인터페이스를 구현해야 하며, ObjectOutputStream과 ObjectInputStream을 사용하여 객체를 직렬화하고 역직렬화할 수 있습니다.
376	1	1	1	Spring Bean Scope에 대해 설명해주세요.	Spring Bean Scope는 빈(Bean)의 생성 및 사용 범위를 정의하는 개념입니다. 기본적으로 'Singleton'이지만, 'Prototype', 'Request', 'Session', 'Application' 등의 스코프도 존재합니다. Scope를 적절히 활용하면 메모리 관리 및 성능 최적화에 도움을 줄 수 있습니다.
413	1	1	1	REST API의 차이에 대해 설명해주세요.	REST API는 자원을 HTTP 메서드(GET, POST, PUT, DELETE)로 처리하는 구조입니다. RESTful API는 상태를 가지지 않는(stateless) 구조이며, 클라이언트와 서버 간의 역할을 명확히 구분합니다. REST API는 URI를 통해 자원을 명확히 식별합니다.
50	0	0	0	단방향 암호화에 대해서 간단히 설명해주세요.	단방향 암호화는 복호화 불가능한 암호화라고 합니다. 대부분 해시 알고리즘을 이용해서 구현하며, 민감정보를 데이터베이스에 저장할 때, 해당 방식을 사용합니다. 보통의 단방향 암호화는 빠른 성능을 보여, 무차별 대입 공격에 취약합니다. 따라서 이런 정보를 저장하기 위해 bcrypt와 같은 방식을 사용합니다. 해시란 말에서 알 수 있듯이 충돌가능성이 있습니다. 이렇게 복호화 불가능한 암호화 방식이 위험하다는 것은 해시 충돌을 일으켰다는 말로 이해해도 됩니다.
351	1	1	1	SQL Injection에 대해 설명해주세요.	SQL Injection은 악의적인 SQL 문을 삽입하여 데이터베이스를 조작하는 해킹 기법입니다. 주로 사용자 입력 값을 검증하지 않고 SQL 쿼리에 직접 포함할 때 발생합니다. 이를 방지하기 위해 Prepared Statement, ORM 사용, 입력값 검증 및 필터링이 필요합니다. 보안 강화를 위해 최소 권한 원칙을 적용하고, 웹 애플리케이션 방화벽(WAF)을 활용할 수 있습니다.
51	0	0	0	JWT에 대해서 간단히 설명해주세요.	JWT란 토큰 인증 방식에서 쓰이는 것이라고 볼 수 있습니다. 다른 사용으론 데이터를 공유하는데도 사용할 수 있지만 일반적으론 토큰 인증 방식에서 사용됩니다. JWT는 헤더, 페이로드, 시그니쳐로 구분됩니다. 헤더는 토큰의 타입, 암호화 알고리즘을 담고 있고, 페이로드는 토큰의 정보를 담는 부분이며, 시그니처는 토큰의 정보가 신뢰할 수 있는것인지 판단할 수 있도록 합니다. JWT는 세션 기반 인증과 주로 대비됩니다. 세션기반 인증은 서버에서 세션 정보를 관리해야하는 비용이 들게됩니다. 또한 분산환경에서도 관리하기 어렵습니다. 하지만 JWT는 그 자체로 정보를 가지고 있기 때문에 세션의 단점을 보완할 수 있습니다. JWT와 다른 토큰 기반 인증 방식을 비교하는 질문이 나온적도 있습니다.
52	0	0	0	OAuth에 대해서 간단히 설명해주세요.	OAuth는 제3자 인증방식 입니다. 기본적으로 사용자는 서버를 신뢰할 수 없습니다. 그렇기 때문에, 민감정보를 작성하는 것을 꺼립니다. 서버측에서도 마찬가지 입니다. 사용자의 민감정보를 관리하는 것은 리소스가 필요합니다. 그래서 OAuth를 사용해서 신뢰할 수 있는 서버에게 정보를 맡겨놓고 접근할 수 있는 권한을 주는 것이라고 이해하면 됩니다. 그러면 사용자 측에서는 민감정보를 굳이 입력하지 않고도 서비스를 사용할 수 있고, 서버측에서도 민감정보를 굳이 관리하지 않아도 되기 때문에 이점이라고 볼 수 있습니다. OAuth 아키텍처에 대해서 설명해주세요.
58	0	0	0	JVM의 구조와 Java의 실행방식을 설명해주세요.	자바 가상 머신의 약자를 따서 줄여 부르는 용어로 JVM의 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 자바 API와 함께 실행하는 것입니다. 메모리 관리(GC)을 수행하며 스택기반의 가상머신입니다. JVM의 구조는 Class Loader, Execution engine, Runtime Data Area, JNI, Native Method Library로 이루어져 있습니다. 클래스 로더: JVM내로 클래스를 로드하고, 링크를 통해 배치하는 작업을 수행하는 모듈 실행 엔진: 바이트 코드를 실행시키는 역할 인터프리터: 바이트 코드를 한줄 씩 실행합니다. JIT 컴파일러: 인터피르터 효율을 높이기 위한 컴파일러로 인터프리터가 반복되는 코드를 발견하면 JIT 컴파일러가 반복되는 코드를 네이티브 코드로 바꿔줍니다. 그 다음부터 인터프리터는 네이티브 코드로 컴파일된 코드를 바로 사용합니다. GC(Garbage Collector): 가비지 컬렉터로 힙 영역에서 사용되지 않는 객체들을 제거하는 작업을 의미합니다. Runtime Data Areas: 프로그램 실행 중에 사용되는 다양한 영역입니다. PC Register: Thread가 시작될 때 생성되며 현재 수행 중인 JVM 명령의 주소를 갖고 있습니다. Stack Area: 지역 변수, 파라미터 등이 생성되는 영역. 실제 객체는 Heap에 할당되고 해당 레퍼런스만 Stack에 저장됩니다. Heap Area: 동적으로 생성된 오브젝트와 배열이 저장되는 곳으로 GC의 대상 영역입니다. Method Area: 클래스 멤버 변수, 메소드 정보, Type 정보, Constant Pool, static, final 변수 등이 생성됩니다. 상수 풀(Constant Pool)은 모든 Symbolic Reference를 포함하고 있습니다. JNI(Java Native Interface): 자바 애플리케이션에서 C, C++, 어셈블리어로 작성된 함수를 사용할 수 있는 방법을 제공해줍니다. Native 키워드를 사용하여 메서드를 호출합니다. 대표적인 메서드는 Thread의 currentThread()입니다. Native Method Library: C, C++로 작성된 라이브러리 입니다. Java의 실행방식 자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어 자바 바이트코드(.class)로 변환시킵니다. Class Loader를 통해 class 파일들을 JVM으로 로딩합니다. 로딩된 class파일들은 Execution engine을 통해 해석됩니다. 해석된 바이트코드는 Runtime Data Areas 에 배치되어 실질적인 수행이 이루어집니다.
108	0	0	0	파이썬 코루틴에 대해 아는대로 설명해주세요.	파이썬 코루틴은 함수 실행을 일시 중단하고 다시 재개할 수 있는 기능을 제공합니다. 이는 비동기 프로그래밍과 협력적 멀티태스킹을 지원하며, 주로 async와 await 키워드를 사용합니다. 코루틴은 I/O 바운드 작업이나 긴 작업에서 효율적으로 동작하며, 이벤트 루프를 통해 여러 작업을 동시에 관리합니다. 예를 들어, asyncio 라이브러리를 사용하여 네트워크 요청을 처리할 때 유용합니다
64	0	0	0	인터페이스와 추상클래스의 차이점에 대해 설명해주세요.	추상클래스는 객체의 추상적인 상위 개념으로 공통된 개념을 표현할 때 사용합니다. 단일 상속만 가능합니다. 추상클래스를 상속하는 집합간에는 연관관계가 있습니다. 인터페이스는 구현 객체가 같은 동작을 한다는 것을 보장하기 위해 사용합니다. 다중 상속이 가능합니다. 인터페이스를 구현하는 집합간에는 관계가 없을 수 있습니다.
65	0	0	0	클래스는 무엇이고 객체는 무엇인가요?	클래스는 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용됩니다. 객체는 식별 가능한 개체 또는 사물입니다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가집니다. 인스턴스들을 통칭하는 용도로 사용합니다.
66	0	0	0	정적(static)이란 무엇인가요?	static은 클래스 멤버라고 하며, 클래스 로더가 클래스를 로딩해서 메소드 메모리 영역에 적재할 때 클래스별로 관리됩니다. static 키워드를 통해 생성된 정적멤버들은 PermGen 또는 Metaspace에 저장되며 저장된 메모리는 모든 객체가 공유하며 하나의 멤버를 어디서든지 참조할 수 있는 장점이 있습니다. 그러나, GC의 관리 영역 밖에 존재하기 때문에 프로그램 종료시까지 메모리가 할당된 채로 존재합니다. 너무 남발하게 되면 시스템 성능에 악영향을 줄 수 있습니다.
68	0	0	0	접근 제어자의 종류와 이에 대해 설명해주세요.	private, default, protected, public이 있습니다. private은 해당 클래스 내에서만 접근 가능하고, default는 해당 패키지, protected는 상속한 클래스, public은 전체 영역에서 접근 가능합니다. 접근 제어자를 사용하는 이유는 외부에 보여주고 싶은 정보들을 선택적으로 제공하기 위함이고, 캡슐화와 통하는 면이 있습니다.
69	0	0	0	객체지향에 대해서 설명해주세요.	객체지향을 정의하면, 의존성 관리입니다. 객체지향으로 의존성을 관리함으로써 변경 영향을 최소화하고 독립적인 배포가 가능해지며 독립적인 개발이 가능해집니다. 따라서 객체지향에서 가장 중요한 것은 DIP(Dependency Inversion Principle)를 통한 고수준 정책(High Level Policy)와 저수준 구현 세부사항(Low Level Details)의 분리라고 할 수 있습니다.
70	0	0	0	SOLID(객체지향 5대원칙)에 대해서 설명해주세요.	SRP(단일책임원칙)은 한 클래스의 하나의 책임만 가져야 합니다. OCP(개방-폐쇄 원칙)은 확장에는 열려 있으나 변경에는 닫혀 있어야 하며, 다형성을 활용해야 합니다. LSP(리스코프 치환 원칙)은 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야하는 원칙으로 상위 타입을 상속해서 재정의 했을 때 프로그램이 깨지지 않아야 합니다. ISP(인터페이스 분리 원칙)은 클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안되는 원칙입니다. 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 더 낫습니다. 즉, 비대한 인터페이스보단 더 작고 구체적인 인터페이스로 분리해야합니다. DIP(의존관계 역전 원칙)은 추상적인 것은 자신보다 구체적인 것에 의존하지 않고, 변화하기 쉬운 것에 의존해서는 안된다는 원칙입니다. 구체적으론 구현 클래스에 의존하지 말고, 인터페이스에 의존해야 하는 원칙입니다.
71	0	0	0	동일성(identity)와 동등성(equality)에 대해 설명해주세요. (equals(), ==)	동일성은 객체의 주소를 비교하는 것이고, 동등성은 객체의 같음을 비교하는 것입니다. 기본적으로 자바에서는 Object 클래스에 정의된 equals() 메소드가 동등성 비교를 합니다. 따라서, 개발자는 원한다면 equals() 메소드를 오버라이딩해서 동등성의 판단 기준을 정의해주면 됩니다.
72	0	0	0	원시타입과 참조타입의 차이에 대해 설명해주세요.	원시타입은 Java에서 단 8개 밖에 존재하지 않는 타입입니다. 나머지는 모두 참조타입이라고 볼 수 있고, Object 클래스이거나 이를 상속하는 클래스들로 이루어져 있습니다. 원시타입은 항상 값이 존재해야 합니다. 반면, Object 타입은 null 포인터를 가질 수 있습니다. 그리고 멤버변수가 초기화될 때, 원시타입은 기본값을 가지지만, 참조타입은 null 포인터를 가지는 차이도 있습니다.
73	0	0	0	String, StringBuilder, StringBuffer 각각의 차이에 대해 설명해주세요.	String은 불변입니다. StringBuilder와 StringBuffer는 이런 String의 특징때문에 사용하는 가변타입이라고 볼 수 있습니다. StringBuilder와 StringBuffer는 Thread-safe 여부의 차이가 있습니다. StringBuilder는 Thread-safe하지 않습니다. 따라서 Multi-Thread 환경에서 사용할 때는 StringBuffer를 사용합니다.
74	0	0	0	Checked Exception과 Unchecked Exception에 대해 설명해주세요. 스프링 트랜잭션 추상화에서 rollback 대상은 무엇일까요?	둘의 차이는 RuntimeException을 상속하는가의 여부에 따라 다릅니다. RuntimeException을 상속하면 UncheckedException이 됩니다. 스프링 트랜잭션 추상화에서 rollback 대상은 바로 UncheckedException입니다. 이 둘을 잘 알기 위해서는 토비의 스프링을 보시는 것을 추천합니다.
132	0	0	0	리버스 프록시에 대해서 설명해주세요.	리버스 프록시는 클라이언트 요청을 대신 받아 백엔드 서버로 전달하는 서버입니다. 주로 보안 강화(클라이언트 IP 숨김), 부하 분산(로드 밸런싱), 캐싱 및 SSL 종료 등의 목적으로 사용됩니다. Nginx와 Apache는 대표적인 리버스 프록시 서버 도구입니다.
67	2	2	1	자바의 원시타입들은 무엇이 있으며 각각 몇 바이트를 차지하나요?	실제 면접에서 들었던 질문입니다. 들었을 때 굉장히 당황했던 기억이 나네요. boolean(1), char(unsigned 2), byte(1), short(2), int(4), long(8), float(4), double(8) 사실 JVM에 의존적이기 때문에 정확한 크기라기 보다는 대략적인 크기입니다.
75	0	0	0	Java8에서 추가된 기능에 대해서 설명해주세요.	자신이 사용한 경험을 말해주면 더 효과적일 것 같습니다. Java8에서는 Lambda식, Stream API, Optional, 날짜 시간 API, StringJoiner 등이 추가되었습니다. lambda는 함수형 프로그래밍을 지원하기 위한 기능이고, Stream API는 고차함수를 지원합니다. Optional은 Null-safety를 제공하며, Stream과 사용법이 유사합니다. 날짜 시간 API는 Joda-time등의 라이브러리에서 영향을 받아 괜찮은 API가 되었으며, StringJoiner는 문자열을 간단하게 구분자로 합칠 수 있는 기능을 제공합니다.
76	0	0	0	try-with-resource에 대해서 설명해주세요.	try-with-resources는 자바 버전7에 도입된 문법입니다. 자바 7 버전 이전에서 하나 이상의 리소스(java.lang.AutoCloseable을 구현한 객체 혹은 java.io.Closeable를 구현한 객체)를 사용할 경우 개발자가 임의로 finally 문에서 ~~.close()를 사용하여 자원 해제를 시켜줘야 했습니다. 만약 개발자가 사용한 자원을 finally 문에서 해제시켜주지 않고 누락시켰다면 자원이 해제되지 않은 채로 프로그램이 오작동하게 되고, finally 문에서 자원을 해제 시켜주더라도 자원 해제를 위한 중복 코드가 발생하기 때문에 소스 코드의 가독성을 해치는 단점이 있었습니다. 이를 해결하기 위해 try() 안에 사용할 리소스 객체를 명시적으로 선언하여 사용하면, try 블록 안에서 로직이 정상적으로 완료되었는지, 갑작스럽게 완료되었는지 여부와 관계 없이 JVM에서 자동으로 자원을 반납해주는 기능을 하도록 도입하였습니다. 추가로, 자바 9 버전에서는 try() 문 안에 명시적으로 객체 선언을 하기 보다는 try 문 바깥에서 객체 선언을 하고 생성된 인스턴스의 변수를 넣어줄 수 있도록 바뀌었습니다. Java 7 : try(BufferedReader br = new BufferedReader()) Java 9 : try(br)
78	0	0	0	직렬화와 역직렬화에 대해서 설명해주세요.	직렬화란 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록 바이트 형태로 데이터 변환하는 기술과 바이트로 변환된 데이터를 다시 변환하는 기술(역직렬화)을 아울러서 이야기 합니다. 자바 직렬화는 JVM의 메모리에서만 상주되어있는 객체 데이터를 영속화(Persistence)가 필요할 때 사용됩니다. 시스템이 종료되더라도 없어지지 않는 장점을 가지며 영속화된 데이터이기 때문에 네트워크로 전송이 가능합니다.
79	0	0	0	자바의 동시성 이슈(공유자원 접근)에 대해 설명해주세요.	자바에서 동시성 이슈는 여러 스레드가 공유 자원에 동시에 접근하여 데이터 불일치나 Race Condition이 발생할 때 나타납니다. 이를 방지하기 위해 synchronized 키워드, Lock 인터페이스, java.util.concurrent 패키지 등을 활용합니다. 동기화는 데이터의 일관성을 보장하지만 성능 저하를 초래할 수 있으므로 적절히 설계해야 합니다.
80	0	0	0	Mutable 객체와 Immutable 객체의 차이점에 대해 설명해주세요.	Mutable 객체는 변경 가능 객체이고, Immutable 객체는 불변 객체라고 흔히들 말합니다. Mutable 객체는 도메인 개체(도메인 클래스 혹은 엔터티)로 사용됩니다. Mutable 객체의 변경 메서드는 Command method라고도 부르며, 리턴 타입을 void 로 정의합니다. 또한 void 리턴 타입의 어떠한 상태를 변경하는 메서드는 모두 Command method의 상징입니다. Immutable 객체는 불변객체이며 값 객체, 서비스 객체 등에 사용됩니다. Immutable 객체의 변경 메서드는 변경한 객체의 복사본을 반환해야 합니다.
82	0	0	0	JDK와 JRE의 차이점을 설명하세요.	JDK는 Java Development KIT의 약자로 개발하는데 사용되는 도구이며 JRE를 포함하고 있으며 JRE는 Java Runtime Environment의 약자로 자바로 만들어진 프로그램을 실행시키는데 필요한 도구가 들어있는 차이가 있습니다. 운영서버와 같은 곳에서는 개발에 필요한 도구가 아닌 프로그램을 실행시키는 도구만 필요하기 때문에 개발도구가 들어있는 JDK아닌 JRE를 설치합니다. ----여기는 굳이 말씀 안하셔도 될듯합니다.---- 그러나 최근에 JDK가 많이 가벼워지고 하드웨어도 좋아지고 해서 운영서버에 설치하여도 큰 문제가 없고 JDK에 로깅, 디버깅, 로그분석등 유용한 도구들도 있고 해서 굳이 JRE설치하는것 보다 JDK를 설치 해서 개발및 실행환경을 통합적으로 관리하는 경우도 있다고 합니다.
77	1	1	1	강한 결합과 느슨한 결합이 무엇인지 설명해주세요.	결합도는 의존성의 정도를 나타내며 다른 모듈에 대해 얼마나 많은 정보를 알고 있는지에 대한 척도입니다. 어떤 모듈이 다른 모듈에 너무 자세한 부분(구현 세부사항)까지 알고 있을 경우에 강한 결합도를 가진다고 합니다. 어떤 모듈이 다른 모듈에 대해 필요한 정보(인터페이스로 추상화된 고수준 정책)만 알고 있다면 두 모듈은 낮은 결합도를 가진다고 합니다. 객체지향 관점에서 결합도는 객체 또는 클래스가 협력에 필요한 적절한 수준의 관계만을 유지하고 있는지를 나타냅니다. 이러한 관점에서 강한 결합도는 반드시 지양해야 하며, 개발자는 적절한 결합도를 유지할 수 있도록 고민하고 설계해야 합니다.
81	4	4	1	자바에서 null을 안전하게 다루는 방법에 대해 설명해주세요.	공개 메서드가 아닌 곳에는 assert를 사용하여 null을 방어할 수 있습니다. 또한 메서드의 인자를 받을 때 Objects.requireNonNull()을 사용하여 방어할 수 있습니다. 그리고 Optional을 사용해 리턴 타입에서 null을 반환하지 않도록 방어할 수 있습니다. 마지막으로 사전 조건과 사후 조건을 명확히 하여 계약에 의한 설계를 실천해야 합니다.
88	0	0	0	DI 종류는 어떤것이 있고, 이들의 차이는 무엇인가요?	DI는 세가지 방법이 있습니다. 생성자 삽입, Setter를 이용한 메소드 매개 변수 삽입, 필드 주입이 있습니다. 생성자 주입은 생성자 호출시점에 딱 1번만 호출되는 것을 보장하며 불변, 필수 의존관계에 사용합니다. Setter주입은 선택, 변경 가능성이 있는 의존관계에 사용되며 스프링빈을 선택적으로 등록이 가능합니다. 필드 주입은 `Autowired` 를 사용하는데 외부에서 변경이 불가능하여 테스트 하기 힘듭니다. DI 프레임워크 없이는 작동하기 힘들며, 주로 애플리케이션과 관계없는 테스트코드나 `Configuration` 같은 스프링 설정 목적으로 사용합니다.
91	0	0	0	프론트 컨트롤러 패턴이란 무엇인가요?	클라이언트의 다양한 요청마다 서블릿을 만들어서 사용한다고 하면 개발과 유지보수의 효율이 떨어질 수 밖에 없습니다. 프론트 컨트롤러 패턴을 사용함으로써 각 요청을 적절한 곳으로 위임해줌으로써 개발과 유지보수의 효율성이 증가하고 모든 요청에 대해 보안, 국제화, 라우팅 및 로그와 같은 일반적인 기능을 한 곳에서 캡슐화할 수 있습니다. Spring에서는 DispatcherServlet이 프론트 컨트롤러 패턴을 사용한 예이며, DispatcherServlet이 Bean으로 등록되어 package를 scan하고 Controller, RestController 애노테이션을 확인하여 어떠한 요청이 들어왔을 때 적절한 Handler Method에 위임해줍니다.
92	0	0	0	Servlet Filter와 Spring Interceptor의 차이는 무엇인가요?	Filter는 Servlet Filter로써 javax.servlet 스펙에 포함되는 클래스입니다. Interceptor는 Spring MVC 스펙에 포함되어 있는 클래스입니다. Filter는 Servlet에서 전후처리를 담당하며, Interceptor는 Spring에서 Handler를 실행하기 전후나, ViewResolver를 통해 컨트롤러에서 리턴한 View Name으로부터 렌더링을 담당할 View 오브젝트를 준비해 돌려준 후 실제 View를 렌더링한 후에 어떠한 처리를 담당합니다. Filter는 Web Application(Tomcat을 사용할 경우 web.xml)에 등록하며, Interceptor는 Spring의 Application Context에 등록합니다. Filter는 Method Signature에 있는 Argument인 HttpServletRequest 혹은 HttpServeltResponse를 ServletRequest, ServletResponse 등으로 교체할 때 사용하거나, 데이터 변환(다운로드 파일의 압축 및 데이터 암호화 등), XSL/T를 이용한 XML 문서 변경, 사용자 인증, 자원 접근에 대한 로깅 등에 사용합니다. Interceptor의 경우 AOP를 흉내내거나, Spring 애플리케이션에서 전역적으로 전후처리 로직에서 예외를 사용하도록 하거나, Handler Method에서 사용자의 권한을 체크해서 다른 동작을 시켜준다거나 할 때 사용합니다.
93	0	0	0	Spring에서 CORS 에러를 해결하기 위한 방법을 설명해주세요.	Servlet Filter를 사용하여 커스텀한 Cors 설정하거나, WebMvcConfiguer를 구현한 Configuration 클래스를 만들어서 addCorsMappings()를 재정의할 수도 있고, 마지막으로 Spring Security에서 CorsConfigurationSource를 Bean으로 등록하고 config에 추가해줌으로써 해결할 수 있습니다. Controller 클래스에 Crossorigin 어노테이션을 통해 해결할 수 있습니다.
94	0	0	0	Bean/Component 어노테이션에 대해서 설명해주시고, 둘의 차이점에 대해 설명해주세요.	두 어노테이션 모두 IoC 컨테이너에 Bean을 등록하기 위해 사용합니다 Component : 개발자가 작성한 class를 기반으로 실행시점에 인스턴스 객체를 1회(싱글톤) 생성합니다 Controller, Service, Repository 는 모두 Component 이며 실행시점에 자동으로 의존성을 주입합니다 Bean : 개발자가 작성한 method를 기반으로 메서드에서 반환하는 객체를 인스턴스 객체로 1회(싱글톤) 생성합니다
95	0	0	0	POJO란 무엇인가요? Spring Framework에서 POJO는 무엇이 될 수 있을까요?	POJO는 프레임워크 인터페이스, 클래스를 구현하거나 확장하지 않은 단순한 클래스로 Java에서 제공하는 API 외에 종속되지 않습니다. 특정 환경에 종속되지 않아 코드가 간결하고 테스트 자동화에 유리합니다. 스프링에서는 도메인과 비즈니스 로직을 수행하는 대상이 POJO대상이 될 수 있습니다.
96	0	0	0	Spring Web MVC에서 요청 마다 Thread가 생성되어 Controller를 통해 요청을 수행할텐데, 어떻게 1개의 Controller만 생성될 수 있을까요?	Controller 어노테이션을 타고 들어가보면 Component라는 어노테이션이 붙어 있습니다. 따라서 컨트롤러는 IoC컨테이너에 등록되어 Spring bean으로 관리됩니다. Spring의 빈 생성 전략의 기본은 싱글턴입니다. IoC컨테이너에 Controller Bean은 싱글턴 전략에 의해 1개만 존재하고 Application이 Init 되는 시점에 초기화됩니다. 그리고 실제 사용되는 시점에 의존성 주입을 통해서 사용됩니다. 요청시마다 새로 Bean을 생성해서 사용하는 것이 아닌 이미 생성되어있는 Bean을 가져다 쓰게됨으로써 여러개의 Thread에서 Contoller를 사용해도 1개의 동일한 컨트롤러인 것입니다. 만약 요청이 올때마다 새로운 컨트롤러가 생기길 바란다면 Bean scope를 Singleton 이 아닌, request 등으로 설정하면 요청이 들어올 때 혹은 지정한 전략마다 새로운 컨트롤러 Bean이 생기도록 할 수 있습니다.
89	1	1	1	Autowiring 과정에 대해서 설명해주세요.	컨테이너에서 타입(인터페이스 또는 오브젝트)을 이용해 의존 대상 객체를 검색하고 할당할 수 있는 빈 객체를 찾아 주입한다
87	1	1	1	IoC 컨테이너의 역할은 무엇이 있을까요?	애플리케이션 실행시점에 빈 오브젝트를 인스턴스화하고 DI 한 후에 최초로 애플리케이션을 기동할 빈 하나를 제공해준다
90	1	1	1	Spring Web MVC의 Dispatcher Servlet의 동작 원리에 대해서 간단히 설명해주세요.	Dispatcher Servlet은 Spring Web MVC의 프론트 컨트롤러로, 클라이언트 요청을 중앙에서 처리하고 적절한 핸들러에 분배합니다. 요청이 들어오면 HandlerMapping을 통해 컨트롤러를 찾아 실행하고, 결과를 ViewResolver를 통해 적절한 뷰로 렌더링하여 클라이언트에게 응답합니다. 이를 통해 요청 처리 로직과 뷰 렌더링 로직이 분리되어 유지보수성이 향상됩니다.
97	0	0	0	Spring WEB MVC의 근간에는 Java Servlet 이 있는데요. Spring 은 Servlet을 어떻게 구성해서 이를 구현했을까요?	Servlet은 Java로 웹페이지를 구성할 때 동적으로 웹페이지를 구성해주는 자바 클래스 입니다. Spring에서도 이 Servlet을 사용하고 있지만 특성이 조금 다릅니다. 기본적으로 Java의 Servlet은 하나의 Request에 대해서 하나의 Servlet을 생성합니다. 이 방법은 간단하고 직관적이지만 Servlet이 많이 생성되면 관리하기 힘들어지는 단점이 있습니다. 반면 Spring의 경우에는 DispatcherServlet이라는 FrontController 패턴을 사용해서 중앙에서 하나의 Servlet이 요청을 받아서 HandlerMapping을 통해 그에 맞는 컨트롤러로 분배하는 방식을 사용합니다. 이렇게 할 경우 하나의 객체에서 모든 요청을 먼저 처리하기 때문에 재사용성 및 유연한 매핑, 인터셉터의 사용, 관리의 용이성 등이 있겠습니다.
98	0	0	0	Filter는 Servlet의 스펙이고, Interceptor는 Spring MVC의 스펙입니다. Spring Application에서 Filter와 Interceptor를 통해 예외를 처리할 경우 어떻게 해야 할까요?	Filter는 DispatcherServlet 외부에 존재하기 때문에 예외가 발생했을 때 ErrorController에서 처리해야 합니다. 하지만 Interceptor는 DispatcherServlet 내부에 존재하기 때문에 ControllerAdvice를 적용해서 처리할 수 있습니다.
99	0	0	0	Spring Application을 구동할 때 메서드를 실행시키는 방법에 대해 설명해주세요.	CommandLineRunner, ApplicationRunner를 구현한 클래스를 만들어서 실행시키는 2가지 방법이 있습니다. 또한 Spring의 ApplicationEvent를 사용한 방법, Postconstruct를 사용한 방법, InitializingBean 인터페이스를 구현하는 방법, Bean의 initMethod를 사용한 방법이 있습니다.
101	0	0	0	JPA 영속성 컨텍스트의 이점(5가지)을 설명해주세요.	영속성 컨텍스트는 엔티티를 영구 저장하는 환경을 의미합니다. 영속성 컨텍스트를 쓰는 이유는 1차 캐시, 동일성 보장, 쓰기 지연, 변경감지(Dirty checking), 지연로딩이 있습니다. 1차 캐시: 조회가 가능하며 1차 캐시에 없으면 DB에서 조회하여 1차 캐시에 올려 놓습니다. 동일성 보장: 동일성 비교가 가능합니다.(==) 쓰기 지연: 트랜잭션을 지원하는 쓰기 지연이 가능하며 트랜잭션 커밋하기 전까지 SQL을 바로 보내지 않고 모아서 보낼 수 있습니다. 변경 감지(Dirty checking): 스냅샷을 1차 캐시에 들어온 데이터를 찍습니다. commit 되는 시점에 Entity와 스냅샷과 비교하여 update SQL을 생성합니다. 지연 로딩: 엔티티에서 해당 엔티티를 불러올 때 그 때 SQL을 날려 해당 데이터를 가져옵니다.
102	0	0	0	JPA Propagation 전파단계를 설명해주세요.	대기업면접에서 나왔던 질문으로 트랜잭션 고립단계와 같이 질문할 가능성이 있습니다. JPA Propagation은 트랜잭션 동작 도중 다른 트랜잭션을 호출(실행)하는 상황에 선택할 수 있는 옵션입니다. Transactional의 propagation 속성을 통해 피호출 트랜잭션의 입장에서는 호출한 쪽의 트랜잭션을 그대로 사용할 수도 있고, 새롭게 트랜잭션을 생성할 수도 있습니다. REQUIRED(디폴트): 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성합니다. 이 외에도 종류가 REQUIRES_NEW, SUPPORTS, MANDATORY, NOT_SUPPORT, NEVER, NESTED 가 있지만 신입이 실제로 다뤄본 경험이 적기 때문에 REQUIRED(디폴트)값만 답변했습니다.
103	0	0	0	JPA를 쓴다면 그 이유에 대해서 설명해주세요.	사실 면접관이 의도한 바를 파악하는게 중요합니다. 각기 다른 조건에서 같은 질문을 들었을 때 대답을 다르게 했던 기억이 납니다. 제가 JPA를 사용하는 이유는 객체지향 프레임워크이기 때문입니다. JPA를 사용하면 비즈니스 로직이 RDBMS에 의존하는 것이 아니라, 자바 코드로 표현될 수 있기 때문입니다. 그로 인해서 생산성이 높아진다고 볼 수 있습니다.(이는 JPA에 익숙하다는 것을 전제로 합니다.) 또, JPA는 JPQL로 SQL을 추상화하기 때문에 RDBMS Vendor에 관계없이 동일한 쿼리를 작성해서 같은 동작을 기대할 수 있다는 장점도 가지고 있습니다. 이는 database dialect를 지원하기 때문에 가지는 장점입니다.
104	0	0	0	N + 1 문제는 무엇이고 이것이 발생하는 이유와 이를 해결하는 방법을 설명해주세요.	JPA와 관련된 단골문제입니다. 꼭 학습해둡시다. N + 1 쿼리 문제는 즉시 로딩과 지연 로딩 전략 각각의 상황에서 발생할 수 있습니다. 하위 엔티티들이 존재하는 경우 한 쿼리에서 모두 가져오는 것이 아닌, 필요한 곳에서 각각 쿼리가 발생하는 경우를 이릅니다. 즉시 로딩에서 발생하는 이유는 JPQL을 사용하는 경우 전체 조회를 했을 때, 영속성 컨텍스트가 아닌 데이터베이스에서 직접 데이터를 조회한 다음 즉시로딩 전략이 동작하기 때문입니다. 지연 로딩에서 발생하는 이유는 지연로딩 전략을 사용한 하위 엔티티를 로드할 때, JPA에서 프록시 엔티티를 unproxy 할 때 해당 엔티티를 조회하기 위한 추가적인 쿼리가 실행되어 발생합니다. 해결 방법으로는 Fetch Join이라고 불리는 JPQL의 join fetch를 사용하는 방법이 있으며, 또 다른 방법으로는 EntityGraph를 사용하는 방법, Fetch(FetchMode.SUBSELECT)를 사용하는 방법, BatchSize를 사용해 조절하거나 전역적인 batch-size를 설정하는 방법이 있습니다. 각 해결방안에 대한 유의점은 작성하지 않습니다.
105	0	0	0	nodeJS는 싱글 스레드인가 멀티 스레드인가?	nodeJS의 주 실행 흐름은 싱글 스레드 기반의 이벤트 루프 모델입니다. I/O 작업을 자신의 메인 스레드(이벤트 루프를 도는 싱글스레드)가 아닌 다른 스레드(libuv에서 관리하는 thread pool에 존재)에 위임함으로써 싱글 스레드로 non blocking I/O를 지원합니다. (참고: event-driven모델을 사용하는 서버는 대체로 event loop를 활용하여 동작합니다. 예시로 redis(multiplexing),spring webflux(Reactor) 등이 있습니다.)
109	0	0	0	파이썬 데코레이터에 대해 아는대로 설명해주세요.	어떤 함수가 있을 때 해당 함수를 직접 수정하지 않고 함수에 기능을 추가하고자 할 때 데코레이터를 사용합니다. 즉, 함수의 전처리나 후처리에 대한 필요가 있을 때 보통 사용합니다. 이를 통해서 반복을 줄이고 메소드나 함수 책임을 확장시킬 수 있습니다.
114	0	0	0	__repr__와 __str__의 차이에 대해 설명해주세요.	__repr__은 개발자를 위한 객체의 공식적이고 상세한 표현을 반환하며, 디버깅에 주로 사용됩니다. 반면, __str__은 사용자 친화적인 형식으로 객체를 표현하며, 주로 출력 목적으로 사용됩니다. 예를 들어, print() 함수는 __str__을 호출하지만, 명령행에서 객체를 직접 입력하면 __repr__이 호출됩니다
115	0	0	0	r string과 u string에 대해 설명해주세요.	r 접두사는 raw string을 의미하며, 문자열 내에서 백슬래시를 이스케이프 문자로 처리하지 않고 그대로 출력합니다(예: 경로 문자열). 반면, u 접두사는 유니코드 문자열을 나타내며, Python 2에서 유니코드 문자열을 명시적으로 정의할 때 사용되었습니다. Python 3에서는 모든 문자열이 기본적으로 유니코드입니다
116	0	0	0	Call by Assignment에 대해 설명해주세요.	파이썬은 Call by Assignment 방식을 사용하여 함수 인자를 처리합니다. 이는 변수 자체가 아닌 변수에 할당된 객체의 참조가 전달된다는 의미입니다. 따라서 가변 객체(예: 리스트)는 함수 내에서 변경될 수 있지만, 불변 객체(예: 숫자나 문자열)는 함수 내에서 변경되지 않습니다.
117	0	0	0	파이썬에서의 접근제어지시자에 대해 아는대로 설명해주세요.	파이썬은 명시적인 접근 제어자를 제공하지 않지만 네임 맹글링으로 이를 구현합니다. _변수명은 암묵적으로 보호(protected)를 의미하며 외부 접근을 피해야 함을 나타냅니다. __변수명은 네임 맹글링으로 클래스 내부에서만 접근 가능하도록 합니다(private). 그러나 완벽히 차단되지는 않으며 규약 수준으로 이해됩니다.
119	0	0	0	classmethod와 staticmethod의 차이에 대해 설명해주세요.	@classmethod는 클래스 자체를 첫 번째 인자로 받아들이며(cls), 클래스 속성이나 메서드를 수정하거나 접근할 때 사용됩니다. 반면, @staticmethod는 클래스나 인스턴스와 무관하게 동작하며 독립적인 유틸리티 함수를 정의할 때 사용됩니다
120	0	0	0	대용량 트래픽에서 장애가 발생하면 어떻게 대응할 것인가요?	캐쉬에서 트래픽이 감당이 안되거나 오류가 나면 DB에서 조회하게끔 서킷브레이커를 걸어서 다른 방법으로 우회하도록 제공할 것입니다.
122	0	0	0	가교 패턴(브릿지 패턴)에 대해서 설명해주세요.	가교 패턴은 추상부와 구현부를 분리하는 디자인 패턴입니다. 해당 패턴에서 기능은 인터페이스를 통해 정의 및 이용되고 해당 인터페이스를 따르는 클래스를 통해 구현됩니다. 해당 패턴을 통해서 사용자는 추상부와 구현부를 독립적으로 수정 및 확장할 수 있습니다. 가교 패턴은 객체지향 설계의 SOLID 원칙 중 단일 책임 원칙(SRP)과 개방 폐쇄 원칙(OCP)에 부합한 패턴입니다.
124	0	0	0	빌더 패턴에 대해서 설명해주세요.	빌더 패턴은 복잡한 객체를 단계적으로 생성하기 위한 디자인 패턴입니다. 객체 생성 과정에서 필요한 속성을 명시적으로 설정할 수 있어 가독성이 높아지고, 불필요한 생성자를 줄일 수 있습니다. 특히 객체가 immutable해야 하거나 선택적 매개변수가 많을 때 유용합니다. Java에서는 Builder 클래스를 사용해 메서드 체이닝 방식으로 구현하는 경우가 많습니다.
126	0	0	0	퍼사드 패턴에 대한 예를 들어주세요.	바운디드 컨텍스트로 구분된 각각의 독립적인 애플리케이션을 UI 서버를 통해 파사드 역할을 담당하도록 두고 각 바운디드 컨텍스트에서 UI 서버와 통신하기 위해 HTTP, Protobuf, Thrift와 같은 방식을 이용할 수 있습니다.
127	0	0	0	테스트 코드에 대해서 어떻게 생각하고, 작성하나요?	테스트 코드는 소프트웨어 품질을 보장하고 유지보수를 용이하게 합니다. 기능 구현 전에 테스트 코드를 작성하면 요구사항을 명확히 정의할 수 있으며, 리팩토링 시에도 안정성을 확보할 수 있습니다. 작성 시에는 단위 테스트와 통합 테스트를 구분하고, 테스트 케이스가 독립적이어야 하며 가독성이 높은 코드를 유지하려 노력합니다.
128	0	0	0	TDD를 알고 있나요? TDD에 대해서 어떻게 생각하나요?	TDD(Test-Driven Development)는 테스트 코드를 먼저 작성하고 이를 기반으로 기능을 구현하는 개발 방식입니다. 이를 통해 코드 품질과 안정성을 향상시키고, 요구사항 변경에도 유연하게 대응할 수 있습니다. 하지만 초기 개발 속도가 느려질 수 있으므로 팀의 숙련도와 프로젝트 특성을 고려해 적용해야 합니다.
129	0	0	0	테스트 커버리지에 대해서 어떻게 생각하나요?	라인 커버리지, 브랜치 커버리지를 높은 수치로 달성하는 것은 바람직하지 않다고 생각합니다. 핵심 비즈니스 로직의 패스 커버리지를 갖는 것이 라인 커버리지, 브랜치 커버리지를 높은 수치로 유지하는 것보다 낫다고 생각합니다. 또한 무의미한 테스트 코드를 작성함으로써 유지보수 비용을 발생시키거나 읽기 좋은 코드를 테스트 커버리지를 채우기 위해 수정하는 등의 일은 반드시 피해야 한다고 생각합니다.
130	1.6666666666666667	5	3	AWS 인프라를 구축해보았다면 설명해주세요.	AWS 인프라 구축 경험은 EC2 인스턴스를 생성하고, S3 버킷을 활용하며, RDS로 데이터베이스를 관리한 사례로 설명할 수 있습니다. 또한 로드 밸런서를 설정해 트래픽 분산을 구현하거나 CloudFormation으로 인프라를 코드화하여 자동화한 경험도 포함될 수 있습니다.
133	0	0	0	Fault-tolerant(무정지) 시스템으로 가기 위해 필요한 방법에 대한 생각을 말해주세요.	다운 타임이 발생하지 않도록 두 대 이상의 서버를 서비스해야 하고 비용 절감을 위해 배포할 때에만 새롭게 서비스를 띄우고, 배포가 완료된 후에는 기존 서버는 셧다운 시키면 됩니다. 무정지 배포 방법 Rolling 로드 밸런서에서 서버를 빼고, 배포하고 다시 넣는 작업이 각 서버마다 이루어지도록 합니다. Rolling 배포의 단점은 배포할 서버가 너무 많다면, n대 단위로 배포하기도 하는데 배포가 모두 끝나기 전까지 클라이언트 중 누구는 이전 서비스를 제공 받고 누구는 신규 서비스를 제공 받게 되는 문제가 발생합니다. 또한 1대에 배포하는 것보다 최소 2배 이상 느립니다. 무정지 배포 방법 Canary 소수의 유저(혹은 사내)만 사용하는 환경(Canary 환경)에 신규 버전을 배포하고 문제가 없다고 판단됐을 때 다른 모든 서버에 배포합니다. 무정지 배포 방법 Blue/Green 실제로 서비스 중인 환경(Blue)과 새롭게 배포할 환경(Green)을 세트로 준비해서 배포하는 형식입니다. 새롭게 배포할 환경에만 배포하면 되기 때문에 배포 속도가 매우 빠르며, 언제나 Green 환경이 실행 중이기 때문에 만약 잘못된 버전으로 배포 했을 경우 신속하게 롤백이 가능합니다. Blue/Green 배포의 단점은 Green 환경이 항상 실행 중이어야 하기 때문에 비용이 많이 발생합니다.
134	0	0	0	Docker란 무엇이고 컨테이너 가상화를 왜 사용할까요?	Docker는 컨테이너 기반 가상화 플랫폼으로 애플리케이션과 그 의존성을 하나의 이미지로 패키징하여 배포합니다. 컨테이너는 경량화된 가상 환경을 제공하며, 빠른 배포와 이식성, 환경 격리를 통해 개발 및 운영 효율성을 크게 향상시킵니다.
135	0	0	0	컨테이너 환경에서의 디버깅은 어떤식으로 하며 상대적으로 어려운 점은 무엇인가요?	컨테이너 환경에서는 docker logs, docker exec 명령어나 APM(Application Performance Monitoring) 도구를 사용해 디버깅합니다. 어려운 점은 컨테이너의 비휘발성 특성으로 인해 로그 손실 가능성이 있고, 네트워크 문제나 의존성 충돌 같은 복잡한 이슈를 파악하기 어렵다는 점입니다.
136	0	0	0	CI/CD가 무엇인가요? 왜 CI/CD가 장점이 될까요?	보통 이 질문을 하는 동시에 어떤 CI/CD를 써봤는지 질문을 할 것입니다. 그때 썼던 CI/CD툴을 설명하고, 그 툴의 장단점을 설명하면 좋습니다. 코드 버전 관리를 하는 VCS 시스템에 push가 되면 테스트와 빌드가 수행되어 안정적인 배포파일을 만드는 과정을 CI(지속적 통합, continuous integration)이라고 하며, 이 빌드 결과를 자동으로 운영 서버에 배포까지 되는 과정을 CD(지속적 배포, continuous delivery or continuous deployment)라고 합니다. 푸시가 될 때마다 코드를 병합하고, 테스트 코드와 빌드를 수행하면서 자동으로 코드가 통합되어 더는 수동으로 코드를 통합할 필요가 없어져 개발에만 신경을 쓸 수 있습니다. 이 CI / CD의 중요한 것은 테스트 자동화입니다. 프로젝트의 완전한 상태임을 보장하기 위해 테스트 코드가 구현되어 있어야 합니다.
137	0	0	0	DevOps가 무엇인지 설명해주세요.	DevOps는 애플리케이션과 서비스를 빠른 속도로 제공할 수 있도록 조직의 역량을 향상시키는 문화와 방식이며 자동화, 측정, 공유를 수행하고 이 모든 것들을 축적해나가는 것입니다. DevOps를 수행하면, 기존의 개발 및 인프라 관리 프로세스를 사용하는 조직보다 제품을 더 빠르게 혁신하고 개선할 수 있습니다. 이를 통해서 고객 친화적이고, 시장에 효과적으로 대응할 수 있는 유연성을 얻을 수 있습니다.
461	0	0	0	프로젝트 관리에서 애자일(Agile)과 워터폴(Waterfall)의 차이에 대해 설명해주세요.	애자일은 유연하고 반복적인 개발 방식으로, 지속적인 고객 피드백을 통해 제품을 개선합니다. 워터폴은 단계별 순차적 진행 방식으로, 명확한 요구사항을 기반으로 계획된 순서에 따라 개발이 진행됩니다. 애자일은 빠른 변화 대응이 가능하고, 워터폴은 명확한 문서화와 계획에 강점이 있습니다.
462	0	0	0	프로젝트 관리에서 스코프 크리프(Scope Creep)에 대해 설명해주세요.	스코프 크리프는 프로젝트 진행 중 요구사항이 지속적으로 추가되거나 변경되어 프로젝트 범위가 확장되는 현상입니다. 이를 방지하려면 명확한 요구사항 정의, 변경 관리 프로세스 수립, 이해관계자와의 원활한 소통이 필요합니다.
463	0	0	0	리스크 관리(Risk Management)란 무엇이며, 주요 단계에 대해 설명해주세요.	리스크 관리는 프로젝트 수행 중 발생할 수 있는 위험 요소를 식별하고 대응 전략을 수립하는 과정입니다. 주요 단계는 리스크 식별, 분석, 대응 계획 수립, 모니터링 및 통제입니다. 효과적인 리스크 관리는 프로젝트 성공 가능성을 높입니다.
464	0	0	0	KPI(Key Performance Indicator)란 무엇이며, PM이 활용할 수 있는 KPI의 예시를 들어주세요.	KPI는 프로젝트나 비즈니스 목표 달성을 측정하는 주요 성과 지표입니다. PM이 활용할 수 있는 KPI에는 일정 준수율, 예산 대비 실제 비용, 팀 생산성, 고객 만족도 등이 있습니다. 적절한 KPI 설정은 프로젝트의 성공을 평가하는 데 도움이 됩니다.
467	0	0	0	스테이크홀더(Stakeholder) 관리에서 가장 중요한 요소는 무엇인가요?	스테이크홀더 관리는 프로젝트의 성공을 위해 필수적이며, 가장 중요한 요소는 기대 관리, 원활한 커뮤니케이션, 정기적인 피드백 제공입니다. 이해관계자의 요구사항을 조율하고, 프로젝트의 목표와 일치시키는 것이 중요합니다.
465	2	2	1	프로젝트 일정 지연이 발생했을 때 PM의 대처 방법에 대해 설명해주세요.	프로젝트 일정 지연이 발생하면 원인을 분석하고, 우선순위를 조정하며, 필요 시 리소스를 추가 배치하는 등의 대응이 필요합니다. 또한 이해관계자와 원활히 소통하여 현실적인 일정을 조정하고, 반복적인 일정 지연을 방지하기 위한 프로세스를 개선해야 합니다.
468	0	0	0	비즈니스 요구사항(Business Requirement)과 기능 요구사항(Functional Requirement)의 차이에 대해 설명해주세요.	비즈니스 요구사항은 비즈니스 목표를 달성하기 위한 전반적인 니즈를 정의하는 것이며, 기능 요구사항은 이를 충족하기 위해 시스템이 수행해야 하는 구체적인 동작을 설명합니다. 즉, 비즈니스 요구사항은 ‘무엇을 해야 하는가’, 기능 요구사항은 ‘어떻게 구현할 것인가’에 초점을 둡니다.
469	0	0	0	애자일 프로젝트 관리에서 스크럼(Scrum)과 칸반(Kanban)의 차이를 설명해주세요.	스크럼은 스프린트 단위로 개발을 진행하며, 명확한 역할과 주기적인 회고를 포함하는 프레임워크입니다. 칸반은 작업 항목을 시각적으로 관리하며, 지속적인 흐름을 유지하는 방식으로 진행됩니다. 스크럼은 특정 구조를 따르는 반면, 칸반은 유연한 방식으로 작업을 조정하는 것이 특징입니다.
470	0	0	0	프로젝트에서 비용 관리의 중요성과 이를 효과적으로 수행하는 방법에 대해 설명해주세요.	비용 관리는 예산 내에서 프로젝트를 성공적으로 수행하기 위한 핵심 요소입니다. 효과적인 비용 관리를 위해 예산 계획 수립, 정기적인 비용 모니터링, 리스크 대비 예산 확보, 원가 절감 전략 도입 등의 방법을 활용할 수 있습니다.
471	0	0	0	블록체인이란 무엇이며, 기존 데이터베이스와의 차이는 무엇인가요?	블록체인은 데이터를 블록 단위로 저장하고 체인 형태로 연결하는 분산 원장 기술입니다. 기존 데이터베이스는 중앙 관리자가 데이터를 제어하는 반면, 블록체인은 탈중앙화되어 있어 보안성과 신뢰성이 높습니다. 또한, 변경 불가능한 특성을 가지며, 스마트 컨트랙트를 활용하여 자동 실행되는 거래를 지원할 수 있습니다.
472	0	0	0	블록체인의 합의 알고리즘(Consensus Algorithm)에는 어떤 종류가 있나요?	블록체인의 합의 알고리즘에는 PoW(작업 증명), PoS(지분 증명), DPoS(위임 지분 증명), PBFT(실용적 비잔틴 장애 허용) 등이 있습니다. PoW는 연산력을 활용하여 블록을 검증하며, PoS는 보유한 코인의 양에 따라 블록을 생성합니다. 각각의 합의 알고리즘은 네트워크의 보안성과 속도에 영향을 줍니다.
473	0	0	0	스마트 컨트랙트(Smart Contract)란 무엇인가요?	스마트 컨트랙트는 특정 조건이 충족되면 자동으로 실행되는 블록체인 기반의 계약입니다. 중앙 기관 없이 신뢰할 수 있는 거래를 가능하게 하며, 이더리움 등의 블록체인 플랫폼에서 사용됩니다. Solidity 같은 프로그래밍 언어를 활용하여 작성되며, 금융, 공급망, 보험 등 다양한 분야에서 활용됩니다.
475	0	0	0	블록체인의 확장성 문제(Scalability Problem)란 무엇인가요?	블록체인의 확장성 문제는 트랜잭션 처리 속도가 네트워크 참여자 증가에 따라 느려지는 문제입니다. 이를 해결하기 위해 샤딩(Sharding), 레이어 2 솔루션(Lightning Network, Plasma), 롤업(Rollups)과 같은 기술이 개발되었습니다. 확장성을 개선하면 블록체인의 대중적인 도입이 가능해집니다.
476	0	0	0	하드포크(Hard Fork)와 소프트포크(Soft Fork)의 차이는 무엇인가요?	하드포크는 블록체인의 프로토콜이 변경되어 이전 버전과 호환되지 않는 경우를 의미하며, 새로운 체인이 생성됩니다. 반면, 소프트포크는 이전 버전과의 호환성을 유지하면서 네트워크의 일부 노드만이 새로운 규칙을 따르는 방식입니다. 하드포크는 새로운 기능 도입 시 필요하지만 네트워크 분열 위험이 있습니다.
477	0	0	0	토큰(Token)과 코인(Coin)의 차이점은 무엇인가요?	코인은 자체 블록체인을 가진 암호화폐로, 비트코인, 이더리움 등이 대표적입니다. 반면, 토큰은 기존 블록체인을 기반으로 생성된 디지털 자산으로, 주로 이더리움 네트워크의 ERC-20, ERC-721 표준을 따릅니다. 토큰은 특정 서비스나 플랫폼 내에서 활용되는 경우가 많습니다.
478	0	0	0	블록체인에서 프라이빗 체인(Private Chain)과 퍼블릭 체인(Public Chain)의 차이점은 무엇인가요?	퍼블릭 체인은 누구나 참여할 수 있는 탈중앙화 네트워크이며, 비트코인과 이더리움이 대표적입니다. 반면, 프라이빗 체인은 특정 조직이나 기업이 접근을 제한하며, Hyperledger Fabric과 같은 엔터프라이즈 솔루션이 이에 해당합니다. 퍼블릭 체인은 보안성과 투명성이 뛰어나지만, 속도가 느린 반면, 프라이빗 체인은 빠르고 효율적입니다.
479	0	0	0	ERC-20과 ERC-721의 차이는 무엇인가요?	ERC-20은 이더리움 기반의 대체 가능한(Fungible) 토큰 표준이며, 주로 ICO나 DeFi에서 사용됩니다. ERC-721은 대체 불가능한(Non-Fungible) 토큰 표준으로, NFT(Non-Fungible Token)에서 활용됩니다. ERC-20은 동일한 가치의 토큰을 여러 개 발행할 수 있지만, ERC-721은 각 토큰이 고유한 가치를 가집니다.
480	0	0	0	블록체인의 51% 공격이란 무엇인가요?	51% 공격은 블록체인 네트워크에서 특정 채굴 그룹이 해시 파워의 51% 이상을 점유하여 거래를 조작할 수 있는 상황을 의미합니다. 이를 통해 이중 지불(Double Spending) 공격이 가능하며, 블록체인의 무결성을 위협할 수 있습니다. PoW 방식의 블록체인에서 주로 발생하며, 이를 방지하기 위해 네트워크 보안이 강화됩니다.
481	0	0	0	소프트웨어 테스팅의 목적은 무엇인가요?	소프트웨어 테스팅의 목적은 소프트웨어의 결함을 발견하고, 요구 사항이 충족되는지 검증하며, 제품의 품질을 향상시키는 것입니다. 이를 통해 사용자 경험을 개선하고, 제품의 신뢰성을 보장할 수 있습니다. 테스팅은 예방적 활동이며, 오류를 조기에 발견하여 비용을 절감하는 데 도움을 줍니다.
497	0	0	0	A* 알고리즘이란 무엇이며, 게임에서 어떻게 활용되나요?	A* 알고리즘은 최단 경로를 찾는 휴리스틱 기반의 탐색 알고리즘입니다. 가중치 기반 탐색과 휴리스틱(Heuristic)을 결합하여 효율적으로 최적의 경로를 찾습니다. 게임에서는 NPC의 이동 경로, 네비게이션 시스템 등에 활용되며, 빠르고 최적화된 경로 탐색을 제공합니다.
482	0	0	0	블랙박스 테스트와 화이트박스 테스트의 차이는 무엇인가요?	블랙박스 테스트는 내부 코드 구조를 고려하지 않고, 입력과 출력만을 기반으로 소프트웨어의 기능을 검증하는 방식입니다. 반면, 화이트박스 테스트는 소스 코드를 분석하여 내부 로직이 올바르게 작동하는지를 확인하는 방식입니다. 블랙박스 테스트는 주로 기능 테스트에서 사용되며, 화이트박스 테스트는 개발자가 직접 수행하는 경우가 많습니다.
483	0	0	0	기능 테스트(Functional Testing)와 비기능 테스트(Non-Functional Testing)의 차이는 무엇인가요?	기능 테스트는 소프트웨어의 요구 사항이 충족되는지를 확인하는 테스트로, UI, API, 데이터베이스 등을 검증합니다. 비기능 테스트는 성능, 보안, 사용자 경험과 같은 소프트웨어의 품질 속성을 평가하는 테스트입니다. 기능 테스트는 주로 블랙박스 방식으로 수행되며, 비기능 테스트는 성능 테스트, 로드 테스트 등을 포함합니다.
484	0	0	0	회귀 테스트(Regression Testing)란 무엇인가요?	회귀 테스트는 코드 변경 후 기존 기능이 정상적으로 동작하는지를 검증하는 테스트입니다. 새로운 기능 추가나 버그 수정이 기존 시스템에 영향을 주지 않는지를 확인하는 과정입니다. 이를 자동화하면 테스트의 효율성을 높일 수 있으며, CI/CD 환경에서 필수적인 테스트 과정입니다.
485	0	0	0	Smoke Testing과 Sanity Testing의 차이는 무엇인가요?	Smoke Testing은 빌드의 주요 기능이 정상적으로 동작하는지 빠르게 확인하는 초기 테스트 과정입니다. Sanity Testing은 특정 버그 수정이나 변경 사항이 기대한 대로 동작하는지 확인하는 테스트입니다. Smoke Testing은 전체 시스템을 간단하게 점검하는 반면, Sanity Testing은 특정 변경 사항에 집중하여 검증합니다.
486	0	0	0	테스트 자동화(Test Automation)의 장점과 단점은 무엇인가요?	테스트 자동화의 장점은 테스트 반복 수행이 가능하며, 신속하고 정확한 검증이 가능하다는 점입니다. 또한, 장기적으로 비용 절감 효과가 있습니다. 그러나 초기 스크립트 작성 비용이 높으며, 유지보수에 시간이 소요될 수 있습니다. 자동화는 반복적인 테스트에 적합하며, 변경이 잦은 UI 테스트에는 어려움이 있을 수 있습니다.
487	0	0	0	테스트 케이스(Test Case) 작성 시 고려해야 할 사항은 무엇인가요?	테스트 케이스 작성 시 명확한 테스트 목적, 입력 값과 기대 결과를 명확하게 정의해야 합니다. 또한, 경계값 분석, 정상 및 비정상 입력을 포함해야 하며, 재사용성을 고려하여 유지보수하기 쉽게 작성해야 합니다. 효율적인 테스트 케이스 관리는 전체 테스트 프로세스의 품질을 향상시키는 중요한 요소입니다.
488	0	0	0	성능 테스트(Performance Testing)란 무엇인가요?	성능 테스트는 시스템이 예상된 부하에서 얼마나 잘 동작하는지를 평가하는 테스트입니다. 주요 유형으로는 로드 테스트, 스트레스 테스트, 볼륨 테스트 등이 있으며, 응답 시간, 처리량, 자원 사용률 등을 측정합니다. 성능 문제를 사전에 발견하고 최적화를 통해 사용자 경험을 향상시킬 수 있습니다.
489	0	0	0	보안 테스트(Security Testing)란 무엇인가요?	보안 테스트는 소프트웨어가 취약점에 노출되지 않도록 검증하는 테스트입니다. SQL Injection, XSS, CSRF 등의 보안 취약점을 검사하며, 인증 및 권한 부여 프로세스를 점검합니다. 정적 분석, 동적 분석 도구를 활용하여 보안성을 높일 수 있습니다.
490	0	0	0	CI/CD에서 테스팅의 역할은 무엇인가요?	CI/CD에서 테스팅은 코드 변경 사항이 배포되기 전에 문제를 발견하고 품질을 보장하는 역할을 합니다. 유닛 테스트, 통합 테스트, 회귀 테스트 등을 자동화하여 배포 안정성을 높이며, 지속적인 테스트(Continuous Testing) 환경을 구축할 수 있습니다. 빠른 피드백을 제공하여 개발 속도를 향상시킵니다.
491	0	0	0	게임 루프(Game Loop)란 무엇인가요?	게임 루프는 게임의 지속적인 실행을 관리하는 핵심 구조로, 입력 처리, 게임 상태 업데이트, 렌더링을 반복적으로 수행합니다. 일반적으로 Fixed Time Step, Variable Time Step, Interpolated Time Step 등의 방식이 사용됩니다. 게임의 부드러운 동작과 일관된 물리 연산을 보장하는 데 중요한 역할을 합니다.
493	0	0	0	물리 엔진(Physics Engine)이란 무엇이며, 주요 역할은 무엇인가요?	물리 엔진은 게임 내에서 물리적 상호작용을 시뮬레이션하는 시스템입니다. 충돌 감지, 중력, 반동, 마찰과 같은 요소를 처리하여 현실감 있는 동작을 구현합니다. 대표적인 물리 엔진으로는 Unity의 PhysX, Box2D, Havok, Bullet 등이 있으며, 게임의 몰입도를 높이는 중요한 요소입니다.
494	0	0	0	프레임률(Frame Rate)과 렌더링 최적화의 관계는 무엇인가요?	프레임률(FPS, Frames Per Second)은 초당 렌더링되는 프레임 수를 의미하며, 높은 FPS를 유지하면 부드러운 게임 플레이가 가능합니다. 렌더링 최적화를 위해 텍스처 압축, Level of Detail(LOD), 오클루전 컬링(Occlusion Culling) 등의 기법을 사용합니다. GPU 및 CPU 부하를 줄여 성능을 개선하는 것이 핵심입니다.
495	0	0	0	멀티스레딩을 활용한 게임 개발의 장점은 무엇인가요?	멀티스레딩을 활용하면 게임의 성능을 향상시킬 수 있습니다. 렌더링, 물리 연산, AI 처리, 네트워크 통신을 별도의 스레드에서 수행하면 CPU 활용도를 극대화할 수 있습니다. 하지만, 동기화 문제(레이스 컨디션, 데드락)를 방지하기 위해 적절한 락(lock) 또는 동기화 메커니즘을 사용해야 합니다.
496	0	0	0	게임에서 사용되는 AI 기법에는 무엇이 있나요?	게임에서 사용되는 AI 기법으로는 상태 기계(Finite State Machine), 행동 트리(Behavior Tree), 경로 탐색 알고리즘(A*), 신경망(Neural Network) 등이 있습니다. NPC의 움직임, 적 AI, 게임 내 의사 결정 등에 활용되며, 몰입도를 높이는 중요한 요소입니다.
498	0	0	0	게임 네트워크에서 클라이언트-서버 모델과 P2P 모델의 차이점은?	클라이언트-서버 모델은 중앙 서버가 게임 데이터를 관리하며, 클라이언트는 서버와 통신하여 정보를 주고받습니다. P2P 모델은 플레이어 간 직접 연결을 통해 데이터를 교환하는 방식입니다. 클라이언트-서버 모델은 보안과 데이터 일관성이 뛰어나지만, 서버 유지 비용이 발생하며, P2P 모델은 서버 부하가 적지만 동기화 문제가 발생할 수 있습니다.
499	0	0	0	게임 개발에서 메모리 최적화는 왜 중요한가요?	메모리 최적화는 게임 성능과 안정성을 향상시키는 중요한 과정입니다. 불필요한 객체 할당을 줄이고, 가비지 컬렉션을 최소화하여 프레임 드롭을 방지할 수 있습니다. 텍스처 압축, 데이터 스트리밍, 오브젝트 풀링(Object Pooling) 등의 기법이 메모리 최적화에 사용됩니다.
500	0	0	0	게임 엔진에서 ECS(Entity Component System) 패턴이란 무엇인가요?	ECS(Entity Component System) 패턴은 게임 개발에서 성능과 유지보수를 향상시키는 구조적 설계 방식입니다. 엔터티(Entity)는 개체를 의미하고, 컴포넌트(Component)는 속성을 정의하며, 시스템(System)은 로직을 처리합니다. 유니티(Unity)와 같은 게임 엔진에서 ECS를 활용하여 효율적인 게임 개발이 가능합니다.
501	0	0	0	안드로이드 생명주기(Activity Lifecycle)에 대해 설명해주세요.	안드로이드의 Activity 생명주기는 onCreate, onStart, onResume, onPause, onStop, onDestroy 등의 단계로 이루어져 있습니다. 앱이 실행되고 화면에 보일 때와 사라질 때의 동작을 정의하는 중요한 개념입니다. 이를 이해하면 메모리 관리와 상태 복구를 효과적으로 할 수 있습니다.
502	0	0	0	안드로이드의 Intent란 무엇인가요?	Intent는 안드로이드에서 컴포넌트 간 통신을 담당하는 객체입니다. 명시적(Explicit) 인텐트와 암시적(Implicit) 인텐트로 구분되며, 액티비티, 서비스, 브로드캐스트 리시버 등의 컴포넌트를 실행할 때 사용됩니다.
503	0	0	0	안드로이드의 Service와 Thread의 차이점은 무엇인가요?	Service는 백그라운드에서 작업을 수행하는 컴포넌트이며, UI와 직접적인 상호작용이 없습니다. Thread는 프로세스 내에서 실행되는 작업 단위이며, UI 작업을 직접 수행하면 ANR(Application Not Responding) 오류가 발생할 수 있습니다. 백그라운드 작업을 수행할 때는 Service와 Thread를 적절히 조합해야 합니다.
504	0	0	0	안드로이드의 RecyclerView와 ListView의 차이점은 무엇인가요?	RecyclerView는 ListView의 성능을 개선한 UI 컴포넌트로, ViewHolder 패턴을 기본적으로 사용하여 성능을 향상시킵니다. ListView는 스크롤이 많을 경우 성능 저하가 발생할 수 있으며, RecyclerView는 다양한 레이아웃 매니저(GridLayoutManager, StaggeredGridLayoutManager)를 제공하여 유연성이 높습니다.
505	0	0	0	안드로이드의 Jetpack이란 무엇인가요?	Jetpack은 안드로이드 앱 개발을 더 쉽게 만들어주는 라이브러리 모음입니다. 주요 구성 요소로는 LiveData, ViewModel, Room, Navigation 등이 있으며, 이를 사용하면 개발 생산성을 높이고 유지보수를 쉽게 할 수 있습니다.
506	0	0	0	안드로이드의 DataBinding과 ViewBinding의 차이점은 무엇인가요?	DataBinding은 XML에서 직접 데이터를 바인딩할 수 있도록 해주는 기능이며, ViewBinding은 findViewById를 대체하는 더 간단한 기능을 제공합니다. DataBinding은 양방향 데이터 바인딩이 가능하지만, ViewBinding은 단순히 뷰를 참조하는 역할만 수행합니다.
507	0	0	0	안드로이드에서 백그라운드 작업을 수행하는 방법에는 어떤 것들이 있나요?	안드로이드에서 백그라운드 작업을 수행하는 방법으로는 AsyncTask, HandlerThread, IntentService, WorkManager, Coroutine 등이 있습니다. 각 방법마다 사용 사례가 다르며, 장기 실행 작업에는 WorkManager, 네트워크 요청에는 Coroutine을 사용하는 것이 일반적입니다.
508	0	0	0	안드로이드에서 Room과 SQLite의 차이점은 무엇인가요?	Room은 SQLite 위에서 동작하는 ORM 라이브러리로, SQL을 직접 다루는 것보다 더 간편하게 데이터베이스를 사용할 수 있도록 도와줍니다. Room은 컴파일 타임 검사를 지원하며, LiveData 및 RxJava와의 연동이 가능합니다.
510	0	0	0	안드로이드에서 메모리 누수를 방지하는 방법에는 무엇이 있나요?	메모리 누수를 방지하기 위해서는 컨텍스트 참조를 주의하고, 정적 변수에서 Activity 참조를 피하며, Lifecycle-aware 컴포넌트를 활용하는 것이 중요합니다. 또한, LeakCanary와 같은 메모리 분석 도구를 사용하여 메모리 누수를 감지할 수 있습니다.
511	0	0	0	iOS 앱 생명주기(App Lifecycle)에 대해 설명해주세요.	iOS 앱의 생명주기는 앱이 실행되고 종료되는 과정에서의 상태 전환을 의미합니다. UIApplicationDelegate의 메서드인 application(_:didFinishLaunchingWithOptions:), applicationDidEnterBackground, applicationWillTerminate 등이 있으며, Foreground와 Background 전환 시 적절한 처리를 해야 합니다.
512	0	0	0	Swift의 Struct와 Class의 차이점은 무엇인가요?	Struct는 값 타입(Value Type)이고, Class는 참조 타입(Reference Type)입니다. Struct는 복사될 때 값이 복사되지만, Class는 참조가 공유됩니다. 또한, Class는 상속이 가능하지만 Struct는 불가능합니다.
513	0	0	0	ARC(Automatic Reference Counting)란 무엇인가요?	ARC는 Swift에서 메모리 관리를 자동으로 수행하는 방식입니다. 객체의 참조 횟수를 추적하여 더 이상 참조되지 않는 객체를 자동으로 해제합니다. 하지만 강한 순환 참조(Strong Reference Cycle)가 발생할 경우 메모리 누수가 발생할 수 있으므로 weak, unowned 키워드를 활용해야 합니다.
514	0	0	0	iOS의 MVC, MVVM, VIPER 패턴의 차이점은 무엇인가요?	MVC(Model-View-Controller)는 iOS의 기본적인 아키텍처 패턴이지만, ViewController가 비대해지는 문제가 있습니다. MVVM(Model-View-ViewModel)은 ViewModel을 추가하여 로직을 분리하는 방식이며, VIPER(View-Interactor-Presenter-Entity-Router)는 역할을 세분화하여 유지보수성을 높이는 패턴입니다.
515	0	0	0	Combine 프레임워크란 무엇인가요?	Combine은 Apple이 제공하는 비동기 및 반응형 프로그래밍을 위한 프레임워크입니다. 데이터를 비동기적으로 처리할 수 있으며, RxSwift와 유사하게 Publisher, Subscriber, Operator를 활용하여 데이터 스트림을 다룰 수 있습니다.
516	0	0	0	iOS에서 GCD(Grand Central Dispatch)와 Operation Queue의 차이점은 무엇인가요?	GCD는 낮은 수준의 API로, 비동기 작업을 수행하는 데 최적화되어 있으며, Operation Queue는 GCD를 기반으로 한 고수준 API로, 작업 간의 의존성을 설정할 수 있습니다. 보다 복잡한 스케줄링이 필요한 경우 Operation Queue를 사용하는 것이 적절합니다.
517	0	0	0	iOS에서 Notification Center와 Delegate의 차이점은 무엇인가요?	Notification Center는 여러 객체가 하나의 이벤트를 수신할 수 있도록 하는 브로드캐스트 방식이며, Delegate는 1:1 관계에서 한 객체가 특정 이벤트를 처리하는 방식입니다. Notification Center는 느슨한 결합이 가능하지만, 디버깅이 어려울 수 있습니다.
518	0	0	0	iOS에서 UserDefaults와 CoreData의 차이점은 무엇인가요?	UserDefaults는 간단한 Key-Value 저장소로, 설정 값을 저장할 때 사용됩니다. CoreData는 관계형 데이터베이스 기능을 제공하며, 대량의 데이터를 저장 및 관리하는 데 적합합니다. UserDefaults는 작은 데이터를 저장할 때, CoreData는 구조화된 데이터를 다룰 때 사용됩니다.
520	0	0	0	iOS 앱에서 Push Notification을 설정하는 과정은 무엇인가요?	Push Notification을 설정하려면 APNs(Apple Push Notification Service)와 Firebase Cloud Messaging(FCM) 또는 자체 서버를 활용해야 합니다. 앱에서 UNUserNotificationCenter를 사용하여 푸시 권한을 요청하고, APNs 토큰을 서버에 등록해야 합니다.
521	0	0	0	iOS에서 앱 내 결제(In-App Purchase, IAP)는 어떻게 구현하나요?	앱 내 결제는 StoreKit 프레임워크를 사용하여 구현됩니다. 사용자가 구매 요청을 하면, 결제 요청을 보내고, Apple의 결제 검증을 거쳐 구매를 완료합니다. 결제 내역을 서버에서 검증하는 것이 보안상 권장됩니다.
522	0	0	0	지도 학습(Supervised Learning)과 비지도 학습(Unsupervised Learning)의 차이점은 무엇인가요?	지도 학습은 레이블이 있는 데이터를 사용하여 모델을 학습하는 방식이며, 대표적으로 회귀와 분류가 있습니다. 반면, 비지도 학습은 레이블이 없는 데이터를 분석하여 패턴을 찾는 방식으로, 군집화(Clustering)와 차원 축소(Dimensionality Reduction) 등이 포함됩니다.
524	0	0	0	과적합(Overfitting)과 과소적합(Underfitting)의 차이점은 무엇인가요?	과적합은 학습 데이터에 너무 맞춰진 모델로, 새로운 데이터에서 성능이 저하되는 문제를 의미합니다. 반면, 과소적합은 학습 데이터에서도 좋은 성능을 내지 못하는 모델로, 데이터의 패턴을 제대로 학습하지 못한 경우 발생합니다.
525	0	0	0	회귀 분석(Regression Analysis)이란 무엇인가요?	회귀 분석은 종속 변수와 독립 변수 간의 관계를 설명하는 통계적 기법입니다. 선형 회귀(Linear Regression), 다항 회귀(Polynomial Regression), 로지스틱 회귀(Logistic Regression) 등이 있으며, 예측과 패턴 분석에 주로 사용됩니다.
526	0	0	0	군집화(Clustering)란 무엇이며, 대표적인 알고리즘은 무엇인가요?	군집화는 유사한 데이터를 그룹으로 묶는 비지도 학습 방법입니다. 대표적인 알고리즘으로 K-평균(K-Means), 계층적 군집화(Hierarchical Clustering), DBSCAN이 있으며, 데이터 마이닝 및 이상 탐지 등에 활용됩니다.
527	0	0	0	차원 축소(Dimensionality Reduction)란 무엇인가요?	차원 축소는 다차원 데이터를 저차원으로 변환하는 기법으로, 연산 효율성을 높이고 모델의 성능을 개선하는 데 사용됩니다. 대표적인 방법으로 PCA(주성분 분석), t-SNE, UMAP 등이 있습니다.
528	0	0	0	신경망(Neural Network)의 기본 구조는 어떻게 구성되나요?	신경망은 입력층(Input Layer), 은닉층(Hidden Layer), 출력층(Output Layer)으로 구성됩니다. 각 층의 뉴런은 가중치와 활성화 함수를 통해 연결되며, 역전파(Backpropagation) 알고리즘을 통해 가중치를 학습합니다.
529	0	0	0	CNN(Convolutional Neural Network)이란 무엇이며, 어떤 문제를 해결하는 데 사용되나요?	CNN은 이미지 및 영상 처리에 특화된 신경망 구조로, 합성곱 레이어(Convolutional Layer), 풀링 레이어(Pooling Layer), 완전 연결 레이어(Fully Connected Layer)로 구성됩니다. 객체 탐지, 이미지 분류, 스타일 변환 등의 문제를 해결하는 데 사용됩니다.
530	0	0	0	RNN(Recurrent Neural Network)과 LSTM(Long Short-Term Memory)의 차이점은 무엇인가요?	RNN은 순차적 데이터를 처리하는 신경망이지만, 장기 의존성 문제(Long-term Dependency Problem)가 있습니다. 이를 해결하기 위해 LSTM은 게이트 메커니즘을 추가하여 장기 기억을 유지할 수 있도록 설계되었습니다.
531	0	0	0	자연어 처리(NLP, Natural Language Processing)에서 Word Embedding이란 무엇인가요?	Word Embedding은 단어를 벡터 표현으로 변환하는 기법으로, 단어 간의 의미적 유사성을 학습할 수 있습니다. 대표적인 기법으로 Word2Vec, GloVe, FastText 등이 있으며, 문서 분류, 감성 분석 등에 활용됩니다.
532	0	0	0	Gradient Descent란 무엇이며, 주요 변형 기법은 무엇인가요?	Gradient Descent는 손실 함수의 기울기를 이용하여 최적의 가중치를 찾는 알고리즘입니다. 주요 변형 기법으로 확률적 경사 하강법(SGD), 배치 경사 하강법(BGD), Adam 옵티마이저가 있습니다.
523	2	2	1	정확도(Accuracy), 정밀도(Precision), 재현율(Recall), F1-score의 차이점은 무엇인가요?	정확도는 전체 데이터 중 올바르게 예측된 비율을 의미하며, 정밀도는 참 양성(TP) 예측 중 실제 양성의 비율을 나타냅니다. 재현율은 실제 양성 중에서 모델이 양성으로 예측한 비율이며, F1-score는 정밀도와 재현율의 조화 평균으로 모델의 균형을 평가하는 지표입니다.
533	0	0	0	데이터 정규화(Normalization)와 표준화(Standardization)의 차이점은 무엇인가요?	정규화는 데이터를 0~1 범위로 조정하는 방법이며, Min-Max Scaling을 사용합니다. 표준화는 데이터의 평균을 0, 분산을 1로 조정하는 방법으로, Z-score normalization이 대표적입니다.
534	0	0	0	Feature Engineering이란 무엇인가요?	Feature Engineering은 모델의 성능을 높이기 위해 데이터를 가공하는 과정입니다. 대표적인 방법으로 원-핫 인코딩(One-Hot Encoding), 결측값 처리, 스케일링 등이 있으며, 좋은 특징을 선택하는 것이 모델 성능에 큰 영향을 미칩니다.
535	0	0	0	배깅(Bagging)과 부스팅(Boosting)의 차이점은 무엇인가요?	배깅은 다수의 모델을 독립적으로 학습하여 평균을 내는 방식이며, 랜덤 포레스트(Random Forest)가 대표적인 알고리즘입니다. 부스팅은 이전 모델의 오차를 줄이는 방식으로 학습하며, Gradient Boosting, XGBoost가 이에 해당합니다.
356	1	1	1	트랜잭션(Transaction)에 대해 설명해주세요.	트랜잭션은 데이터베이스의 논리적 연산 단위로, 여러 작업을 하나의 실행 단위로 묶어 처리합니다. 트랜잭션은 ACID(원자성, 일관성, 고립성, 지속성) 속성을 만족해야 합니다. Commit을 통해 변경 사항을 저장하고, Rollback을 통해 작업을 취소할 수 있습니다. 이를 통해 데이터의 무결성을 유지하고 장애 발생 시 복구할 수 있습니다.
1	0	0	0	웹 통신의 큰 흐름: https://www.google.com/ 을 접속할 때 일어나는 일	면접 단골 문제입니다. 면접관 입장에서는 한 질문으로 많은 답변을 들을 수 있기 때문에 대부분의 면접자리에서 나왔던 문제입니다. OSI 7계층과도 연관지어 설명하라는 질문을 받은적도 있습니다. 브라우저가 URL에 적힌 값을 파싱해서 HTTP Request Message를 만들고, OS에 전송 요청을 합니다. 이 때, Domain으로 요청을 보낼 수 없기 때문에 DNS Lookup을 수행합니다. DNS 룩업 과정은 크롬의 경우 브라우저 → hosts 파일 → DNS Cache의 순서로 도메인에 매칭되는 ip를 찾습니다. 일반적으로 설명하는 DNS Lookup은 루트 도메인서버에서부터 서브도메인 서버순으로 찾게됩니다. 이 요청은 프로토콜 스택이라는 OS에 내장된 네트워크 제어용 소프트웨어에 의해 패킷에 담기고 패킷에 제어정보를 덧붙여 LAN 어댑터에 전송하고, LAN 어댑터는 이를 전기신호로 변환시켜 송출합니다. 패킷은 스위칭 허브 등을 경유하여 인터넷 접속용 라우터에서 ISP로 전달되고 인터넷으로 이동합니다. 액세스 회선에 의해 통신사용 라우터로 운반되고 인터넷의 핵심부로 전달됩니다. 고속 라우터들 사이로 목적지까지 패킷이 흘러들어가게 됩니다. 핵심부를 통과한 패킷은 목적지의 LAN에 도착하고, 방화벽이 패킷을 검사한 후 캐시 서버로 보내어 웹 서버에 갈 필요가 있는지 검사합니다. 웹 서버에 도착한 패킷은 프로토콜 스택이 패킷을 추출하여 메시지를 복원하고 웹 서버 애플리케이션에 넘깁니다. 애플리케이션은 요청에 대한 응답 데이터를 작성하여 클라이언트로 회송하고, 이는 전달된 방식 그대로 전송됩니다.
315	1	2	2	동적 계획법(Dynamic Programming)에 대해 설명해주세요.	동적 계획법(DP)은 복잡한 문제를 작은 부분 문제로 나누고, 그 결과를 저장하여 중복 계산을 방지하는 방식입니다. 대표적인 예로 피보나치 수열, 배낭 문제, LIS 등이 있으며, 메모이제이션과 탑다운/바텀업 방식이 있습니다. 시간 복잡도를 줄일 수 있지만, 추가적인 메모리가 필요할 수 있습니다. 최적 부분 구조와 중복 부분 문제 특성을 활용하는 것이 중요합니다.
536	0	0	0	Linux에서 시스템 로그 관리를 위한 주요 도구와 설정 방법을 설명해주세요.	Linux에서 시스템 로그 관리를 위해 주로 `syslog`, `journald`, `rsyslog`와 같은 도구를 사용합니다. 로그는 `/var/log` 디렉토리에 저장되며, `logrotate`를 활용해 자동으로 관리할 수 있습니다. ELK(Elasticsearch, Logstash, Kibana) 스택을 사용하면 로그를 중앙 집중화하고 시각화할 수 있습니다.
59	1	1	1	GC가 무엇인지, 필요한 이유는 무엇인지, 동작방식에 대해 설명해주세요.	GC는 힙 영역에서 사용하지 않는 객체들을 제거하는 작업을 총칭합니다. 이 객체를 제거하는 작업이 필요한 이유는 자바는 개발자가 메모리를 직접 해제해줄 수 없는 언어이기 때문입니다. 따라서 객체를 사용하고 제거하는 기능이 필요하게 됩니다. GC의 동작방식은 가장 간단한 Serial GC 방식으로 설명합니다. 좀 더 진보된 GC는 G1 GC, ZGC가 있으며 여기선 다루지 않습니다. GC는 Minor GC, Major GC로 구분할 수 있습니다. Minor GC는 young 영역에서, Major GC는 old 영역에서 일어난다고 정의합니다. (Major GC, Full GC는 명확히 정의된 문서가 없습니다.) GC를 수행할 때는 GC를 수행하는 스레드 이외의 스레드는 모두 정지합니다. 이를 Stop-the-world라고 합니다. Minor GC는 Eden 영역이 가득 참에서 부터 시작됩니다. Eden 영역에서 참조가 남아있는 객체를 mark하고 survivor 영역으로 복사합니다. 그리고 Eden 영역을 비웁니다. Survivor 영역도 가득차면 같은 방식으로 다른 Survivor 영역에 복사하고 비웁니다. 이를 반복하다 보면 계속 해서 살아남는 객체는 old 영역으로 이동하게 됩니다. Major GC는 old 영역에서 일어납니다. 위와 반대로 삭제되어야 하는 객체를 mark합니다. 그리고 지웁(sweep)니다. 메모리는 단편화 된 상태이므로 이를 한 군데에 모아주는 것을 Compaction이라 하며 compact라고 합니다. 그래서 Mark-Sweep-Compact 알고리즘이라고 합니다. 이것이 중요한 이유는 GC 수행시 시스템이 멈추기 때문에 의도치 않은 장애의 원인이 될 수 있습니다. 따라서 이를 위해 힙 영역을 조정하는 것을 GC 튜닝이라고 하고 JVM 메모리는 절대 마음대로 조정해선 안됩니다.
414	1	1	1	Web Server와 WAS의 차이에 대해 설명해주세요.	웹 서버(Web Server)는 정적인 파일(HTML, CSS, JS 등)을 제공하는 역할을 하며, 대표적으로 Nginx, Apache가 있습니다. WAS(Web Application Server)는 동적인 요청을 처리하고, 데이터베이스와 연동하여 비즈니스 로직을 실행하는 역할을 합니다. 대표적으로 Tomcat, JBoss 등이 있습니다.
537	0	0	0	커널 모듈이란 무엇이며, 동적으로 로드하는 방법을 설명해주세요.	커널 모듈은 커널의 기능을 동적으로 확장할 수 있는 코드입니다. `insmod` 또는 `modprobe` 명령을 사용하여 로드할 수 있으며, `/lib/modules/$(uname -r)/` 디렉토리에 저장됩니다. 필요할 경우 `rmmod`를 사용하여 언로드할 수 있습니다.
538	0	0	0	Linux에서 cgroups와 namespaces의 역할과 차이를 설명해주세요.	cgroups는 CPU, 메모리, I/O 같은 시스템 리소스를 제한하고 분리하는 기능이며, namespaces는 프로세스가 보이는 시스템 환경을 격리하는 기술입니다. 이 두 개념은 컨테이너 기술의 핵심 요소이며, `Docker`나 `Kubernetes` 같은 시스템에서 활용됩니다.
539	0	0	0	Linux에서 메모리 관리의 주요 기법과 가상 메모리의 동작 방식을 설명해주세요.	Linux는 가상 메모리 기법을 사용하여 실제 물리적 메모리를 효율적으로 활용합니다. 주요 기법에는 페이지 테이블을 통한 주소 변환, 스왑(Swap) 공간을 이용한 메모리 확장, 페이지 캐싱 등이 포함됩니다. `free`, `top`, `vmstat` 등의 명령어를 사용해 메모리 상태를 모니터링할 수 있습니다.
540	0	0	0	Linux에서 네트워크 성능 튜닝을 위한 sysctl 설정 값을 설명해주세요.	`sysctl` 명령을 사용하여 네트워크 성능을 튜닝할 수 있습니다. 예를 들어, `net.core.somaxconn` 값을 조정하면 수신 대기 큐 크기를 변경할 수 있으며, `net.ipv4.tcp_rmem`과 `net.ipv4.tcp_wmem`을 조정하면 TCP 버퍼 크기를 변경할 수 있습니다.
541	0	0	0	Docker와 Kubernetes의 차이점을 설명하고, 각 기술의 사용 사례를 들어주세요.	Docker는 컨테이너를 생성하고 관리하는 플랫폼이며, Kubernetes는 이러한 컨테이너를 오케스트레이션하여 여러 노드에서 실행할 수 있도록 관리하는 시스템입니다. Docker는 단일 애플리케이션 배포에 적합하고, Kubernetes는 마이크로서비스 아키텍처 기반의 확장 가능한 서비스를 운영하는 데 유용합니다.
542	0	0	0	Linux에서 커널 패닉(Kernel Panic)이 발생하는 원인과 해결 방법을 설명해주세요.	커널 패닉은 운영 체제가 복구할 수 없는 심각한 오류를 만났을 때 발생합니다. 원인으로는 드라이버 충돌, 하드웨어 오류, 메모리 손상 등이 있으며, 해결 방법으로는 `dmesg`와 `journalctl -k`를 사용한 로그 분석, 부팅 옵션 수정, 커널 업데이트 등을 시도할 수 있습니다.
543	0	0	0	Linux에서 TCP 연결 수를 최적화하는 방법을 설명해주세요.	TCP 연결을 최적화하려면 `sysctl`을 활용하여 `net.ipv4.tcp_max_syn_backlog`를 증가시키고, `net.core.somaxconn` 값을 조정하여 대기 큐 크기를 증가시킬 수 있습니다. 또한, `TCP_NODELAY` 옵션을 활성화하면 작은 패킷이 더 빠르게 전송됩니다.
544	0	0	0	Linux에서 시스템 성능을 모니터링할 때 사용하는 주요 도구를 설명해주세요.	Linux 시스템 성능 모니터링을 위해 `top`, `htop`, `iostat`, `vmstat`, `sar`, `dstat`, `perf` 등의 도구를 사용할 수 있습니다. CPU, 메모리, I/O, 네트워크 성능을 실시간으로 분석하고 병목 현상을 진단하는 데 유용합니다.
545	0	0	0	Nginx를 리버스 프록시로 설정하는 방법과 주요 설정 옵션을 설명해주세요.	Nginx를 리버스 프록시로 설정하려면 `server` 블록 내에서 `location` 디렉티브를 사용하여 백엔드 서버로 요청을 전달해야 합니다. `proxy_pass`, `proxy_set_header`, `proxy_cache` 등의 설정을 통해 성능 최적화와 보안 설정을 적용할 수 있습니다.
546	0	0	0	AWS에서 Auto Scaling을 설정하는 방법과 장점을 설명해주세요.	AWS Auto Scaling을 사용하면 애플리케이션의 부하에 따라 EC2 인스턴스를 자동으로 증설하거나 축소할 수 있습니다. `Launch Configuration`, `Scaling Policy`, `CloudWatch Metrics` 등을 설정하여 자동 조정이 가능하며, 이를 통해 비용 절감과 고가용성을 보장할 수 있습니다.
547	0	0	0	CI/CD 파이프라인에서 Jenkins와 GitLab CI의 차이를 설명해주세요.	Jenkins는 플러그인 기반으로 CI/CD 파이프라인을 구축하는 오픈 소스 도구이며, GitLab CI는 GitLab과 통합된 CI/CD 솔루션입니다. Jenkins는 다양한 확장성과 유연성을 제공하지만 설정이 복잡할 수 있으며, GitLab CI는 코드 저장소와의 연계가 쉬운 장점이 있습니다.
548	0	0	0	Linux에서 I/O 성능을 최적화하는 방법과 주요 설정 값을 설명해주세요.	Linux에서 I/O 성능을 최적화하기 위해 `fio`, `iostat`, `iotop` 등을 사용하여 디스크 성능을 분석합니다. `sysctl`에서 `vm.dirty_ratio`, `vm.dirty_background_ratio` 값을 조정하면 디스크 쓰기 성능을 개선할 수 있으며, `noatime` 마운트 옵션을 사용하여 불필요한 디스크 쓰기를 줄일 수 있습니다.
549	0	0	0	Linux에서 NUMA(Non-Uniform Memory Access) 아키텍처의 개념과 최적화 방법을 설명해주세요.	NUMA는 CPU가 메모리에 접근하는 속도가 비대칭적인 구조를 갖는 아키텍처입니다. NUMA 환경에서는 `numactl`을 사용하여 프로세스를 특정 노드에 바인딩하거나, `numa_balancing`을 활성화하여 성능을 최적화할 수 있습니다.
550	0	0	0	Linux에서 HugePages의 개념과 활용 방법을 설명해주세요.	HugePages는 큰 페이지 크기를 사용하여 TLB(Translation Lookaside Buffer) 미스 횟수를 줄이고 메모리 성능을 향상시키는 기법입니다. `/proc/meminfo`에서 HugePages 사용 여부를 확인할 수 있으며, `/etc/sysctl.conf`에서 `vm.nr_hugepages` 값을 설정하여 활성화할 수 있습니다.
551	0	0	0	Linux에서 transparent huge pages(THP)의 개념과 장단점을 설명해주세요.	THP는 커널이 자동으로 큰 페이지를 관리하도록 하는 기능으로, 메모리 성능을 개선하지만 예기치 않은 성능 저하를 초래할 수도 있습니다. `cat /sys/kernel/mm/transparent_hugepage/enabled`를 통해 상태를 확인하고, 필요하면 `echo never > /sys/kernel/mm/transparent_hugepage/enabled`로 비활성화할 수 있습니다.
552	0	0	0	Linux에서 Out-of-Memory (OOM) Killer가 작동하는 원리와 방지 방법을 설명해주세요.	OOM Killer는 메모리가 부족할 때 시스템을 보호하기 위해 특정 프로세스를 종료하는 기능입니다. `/proc/<PID>/oom_score`를 확인하여 OOM 우선순위를 확인할 수 있으며, `oom_adj`나 `oom_score_adj` 값을 조정하여 특정 프로세스를 보호할 수 있습니다.
553	0	0	0	Linux에서 XFS와 ext4 파일 시스템의 차이를 설명하고, 각각의 장점을 비교해주세요.	XFS는 고성능 저널링 파일 시스템으로 대용량 데이터 처리에 유리하며, ext4는 범용적으로 사용되는 파일 시스템으로 소규모 및 중규모 환경에서 안정적입니다. XFS는 병렬 쓰기에 최적화되어 있으며, ext4는 저널링 모드를 조정하여 유연한 설정이 가능합니다.
554	0	0	0	Linux에서 커널 파라미터를 영구적으로 변경하는 방법을 설명해주세요.	커널 파라미터는 `sysctl -w` 명령어로 일시적으로 변경할 수 있으며, 영구적으로 적용하려면 `/etc/sysctl.conf` 또는 `/etc/sysctl.d/*.conf` 파일에 설정을 추가해야 합니다. 이후 `sysctl --system`을 실행하여 변경 사항을 적용할 수 있습니다.
555	0	0	0	Linux에서 Ulimit을 설정하는 방법과 적용 범위를 설명해주세요.	`ulimit` 명령어를 사용하면 프로세스가 사용할 수 있는 리소스 제한을 설정할 수 있습니다. `/etc/security/limits.conf` 또는 `/etc/security/limits.d/`에서 영구적으로 설정할 수 있으며, `nofile`(열 수 있는 파일 수), `nproc`(생성 가능한 프로세스 수) 등의 옵션이 있습니다.
556	0	0	0	Linux에서 TCP Keepalive의 개념과 주요 설정 값을 설명해주세요.	TCP Keepalive는 장시간 유휴 상태인 연결을 유지하기 위한 기능입니다. `net.ipv4.tcp_keepalive_time`(유휴 시간), `net.ipv4.tcp_keepalive_intvl`(패킷 간격), `net.ipv4.tcp_keepalive_probes`(최대 재전송 횟수)를 조정하여 설정할 수 있습니다.
557	0	0	0	Linux에서 eBPF(Extended Berkeley Packet Filter)의 개념과 활용 사례를 설명해주세요.	eBPF는 커널 내부에서 프로그램을 실행할 수 있도록 하는 기술로, 네트워크 모니터링, 성능 분석, 보안 강화 등에 사용됩니다. `bpftool`을 이용하여 eBPF 프로그램을 로드할 수 있으며, `bcc`, `libbpf` 등의 라이브러리를 활용하여 네트워크 필터링 및 시스템 프로파일링을 수행할 수 있습니다.
63	2	2	1	오버라이딩과 오버로딩이 무엇이며 어떤 차이가 있을까요?	의외로 굉장히 많은 답을 들을 수 있는 질문입니다. 오버라이딩은 상위 클래스의 메소드를 재정의 하는 것을 의미합니다. 또, 런타임 다형성이기도 합니다. 오버로딩은 같은 클래스 내에서 동일한 메소드 이름을 가지지만, 매개변수의 타입, 개수가 다르게 구현할 수 있는 것을 의미하며 컴파일 타임 다형성이기도 합니다. 따라서 오버라이딩 될 수 있습니다. 추가로 `Override`를 써야하는 이유를 꼭 생각해보세요. 이 애노테이션은 컴파일 타임에 오버라이딩에 대한 안정성을 부여해주기 때문에 반드시 써주는 것이 좋습니다.
320	1	1	1	캐시 메모리(Cache Memory)에 대해 설명해주세요.	캐시 메모리는 CPU와 메모리 간의 속도 차이를 줄이기 위해 사용되는 초고속 메모리입니다. 자주 사용되는 데이터를 저장하여 메모리 접근 속도를 향상시키며, L1, L2, L3 계층으로 구성됩니다. 캐시 히트율이 높을수록 성능이 향상되며, 적절한 캐시 관리 정책이 필요합니다. 대부분의 현대적인 CPU에서 필수적으로 사용됩니다.
118	1	1	1	global과 nonlocal 키워드의 차이에 대해 설명해주세요.	global 키워드는 함수 내부에서 전역 변수를 수정할 때 사용됩니다. 반면, nonlocal 키워드는 중첩 함수에서 외부(하지만 전역은 아닌) 변수에 접근하고 수정할 때 사용됩니다. 이는 주로 클로저와 같은 구조에서 유용하게 쓰입니다.
29	1	2	2	JOIN에 대해서 설명해주세요.	단순히 SQL에서 JOIN 쿼리가 어떤식으로 동작하는지 알고 있어야 합니다. 다이어그램으로 이해하는 편이 좋습니다.
474	1	1	1	이더리움과 비트코인의 차이는 무엇인가요?	비트코인은 탈중앙화된 디지털 화폐로 주로 가치 저장 및 거래 용도로 사용됩니다. 반면, 이더리움은 스마트 컨트랙트를 지원하는 블록체인 플랫폼으로, 탈중앙화 애플리케이션(DApp) 개발이 가능합니다. 또한, 이더리움은 PoS 기반의 합의 알고리즘으로 전환했으며, 비트코인은 여전히 PoW 방식을 유지하고 있습니다.
303	1.5	3	2	삽입 정렬(Insertion Sort)에 대해 설명해주세요.	삽입 정렬은 정렬된 부분에 새로운 요소를 적절한 위치에 삽입하는 방식의 정렬 알고리즘입니다. 이미 정렬된 부분과 비교하며 적절한 위치를 찾아 삽입하는 과정을 반복합니다. 평균 및 최악의 경우 O(n^2)의 시간 복잡도를 가지지만, 거의 정렬된 경우 O(n)까지 성능이 향상됩니다. 적은 데이터셋이나 정렬이 거의 완료된 데이터에서 효과적입니다.
84	1	1	1	Spring Bean이란 무엇인가요?	IoC 컨테이너 안에 들어있는 객체로 필요할 때 IoC컨테이너에서 가져와서 사용합니다. Bean 을 사용하거나 xml설정을 통해 일반 객체를 Bean으로 등록할 수 있습니다.
83	1	1	1	Spring DI/IoC는 어떻게 동작하나요?	IoC(제어의 역전)은 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것으로 코드의 최종호출은 개발자가 제어하는 것이 아닌 프레임워크의 내부에서 결정된 대로 이루어집니다. DI(의존관계 주입)은 Spring 프레임워크에서 지원하는 IoC의 형태로 클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해줍니다. 스프링에서는 스프링 컨테이너 ApplicationContext를 이용하여 설정 정보를 생성, 등록하고 필요한 객체를 생성자 혹은 setter를 통해 주입합니다.
434	2	4	2	외부 단편화와 내부 단편화에 대해 설명해주세요.	외부 단편화(External Fragmentation)는 메모리가 여러 개의 작은 조각으로 나뉘어 사용되지 못하는 현상입니다. 내부 단편화(Internal Fragmentation)는 할당된 블록 내에서 실제 사용되지 않는 공간이 남아 낭비되는 현상입니다. 이를 해결하기 위해 메모리 압축, 페이징 기법 등이 사용됩니다.
509	1	1	1	안드로이드의 BroadcastReceiver는 무엇인가요?	BroadcastReceiver는 시스템 또는 다른 앱에서 발생하는 이벤트를 감지하여 반응할 수 있도록 하는 컴포넌트입니다. 예를 들어, 네트워크 상태 변경, 배터리 부족 등의 이벤트를 감지할 때 사용됩니다.
86	1	1	1	스프링 Bean의 Scope에 대해서 설명해주세요.	빈 스코프는 빈이 존재할 수 있는 범위를 뜻하며 싱글톤, 프로토타입, request, session, application 등이 있습니다. 싱글톤은 기본 스코프로 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프입니다. 프로토타입은 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프입니다. request는 웹 요청이 들어오고 나갈때까지 유지하는 스코프, session은 웹 세션이 생성, 종료할때까지, application은 웹 서블릿 컨텍스트와 같은 범위로 유지하는 스코프입니다.
6	1	2	2	GET과 POST의 차이점에 대해서 설명해보세요.	대개의 경우 아래의 HTTP 메서드 질문을 더 많이합니다. 하지만 둘의 차이만을 물을 수도 있습니다. GET요청은 서버에 존재하는 정보를 요청합니다. 이 때 반환되는 정보는 정보 자체가 아니라 정보의 표현입니다.(뒤의 내용은 REST와 연관이 있고, 굳이 답변하지 않으셔도 됩니다.) 일반적으로 Request Body는 입력하지 않는 것이 일반적이며, 레거시 시스템의 경우 요청을 받아들이지 않을 수 있습니다. 캐싱을 수행하기 때문에 캐싱되지 않는 요청은 GET 요청이 맞지 않을 수 있습니다. POST요청은 서버에 정보를 생성하는 것을 요청합니다. 예전 HTTP 통신은 POST 요청으로 데이터 삭제, 수정도 form요청으로 같이 수행했습니다. POST 요청은 서버의 상태를 변경시키기 때문에 멱등성이 유지되지 않습니다. 보통 Request Body에 요청하는 데이터를 담아 전송합니다.
123	1	1	1	전략 패턴에 대해서 설명해주세요.	전략 패턴은 알고리즘을 객체 단위로 캡슐화하는 디자인 패턴입니다. 해당 패턴에서 알고리즘은 인터페이스를 통해 정의 및 이용되고 해당 인터페이스를 따르는 클래스를 통해 구현됩니다. 해당 패턴을 통해서 사용자는 알고리즘을 필요에 따라 바꿔서 사용할 수 있게 됩니다. 전략 패턴은 객체지향 설계의 SOLID 원칙 중 개방 폐쇄 원칙(OCP)에 부합한 패턴입니다. 전략 패턴은 가교 패턴과 구조가 비슷하지만 목적에 차이가 있습니다. 가교 패턴이 추상과 구현의 분리를 통한 독립적 개발의 용이성에 중점을 둔다면 전략 패턴은 알고리즘의 캡슐화를 통한 알고리즘 변경의 유연성에 중점을 둡니다.
2	2.5	5	2	TCP와 UDP의 차이점에 대해서 설명해보세요.	TCP는 연결 지향형 프로토콜이고 UDP는 데이터를 데이터그램단위로 전송하는 프로토콜입니다. TCP는 가상 회선을 만들어 신뢰성을 보장하도록(흐름 제어, 혼잡 제어, 오류 제어) 하는 프로토콜로 따로 신뢰성을 보장하기 위한 절차가 없는 UDP에 비해 속도가 느린편입니다. TCP는 그래서 파일전송과 같은 신뢰성이 중요한 서비스에 사용되고, UDP는 스트리밍, RTP와 같이 연속성이 더 중요한 서비스에 사용됩니다. +) 하지만 UDP도 신뢰성을 UDP자체에서 보장하지 않는 것 뿐이지, 개발자가 직접 신뢰성을 보장하도록 할 수 있습니다. 그래서 HTTP/3은 QUIC이라는 프로토콜을 기반으로 하는데, QUIC은 UDP를 기반으로 합니다. 즉, UDP 자체는 신뢰성을 보장하지 않지만, 추가적인 정의를 통해 신뢰성을 보장받을 수 있습니다.
492	1	1	1	엔진 없이 게임을 개발할 수 있나요?	네, 엔진 없이도 게임을 개발할 수 있습니다. 직접 그래픽 API(OpenGL, DirectX, Vulkan)를 사용하여 렌더링을 처리하거나, 물리 연산 및 오디오 시스템을 직접 구현할 수도 있습니다. 하지만, 엔진을 사용하면 반복적인 작업을 줄이고 효율적인 개발이 가능하기 때문에 대부분의 게임 개발에서는 Unity, Unreal Engine 등의 게임 엔진을 활용합니다.
397	2	2	1	Java Primitive type와 Reference type에 대해 설명해주세요.	Java의 Primitive Type은 int, double, char 등과 같은 기본 데이터 타입이며, 스택 메모리에 저장됩니다. Reference Type은 배열, 클래스, 인터페이스 등의 객체를 가리키며, 실제 데이터는 힙 메모리에 저장되고 변수는 객체의 주소를 참조합니다.
519	1	1	1	iOS에서 앱이 백그라운드에서 실행되도록 하는 방법은 무엇인가요?	iOS 앱이 백그라운드에서 실행되도록 하려면 Background Modes를 활성화하고, Background Fetch, Silent Push Notification, URLSession Background Transfer 등을 활용할 수 있습니다. 하지만, 과도한 백그라운드 작업은 배터리 소모를 초래할 수 있습니다.
307	2	4	2	기수 정렬(Radix sort)에 대해 설명해주세요.	기수 정렬은 자릿수를 기준으로 정렬하는 비교 기반이 아닌 정렬 알고리즘입니다. 가장 낮은 자리수부터 정렬하여 상위 자리수로 진행하는 방식이며, 보통 큐를 사용하여 구현됩니다. 시간 복잡도는 O(nk)이며, 비교 정렬보다 빠를 수 있습니다. 다만, 숫자와 같은 고정된 길이의 데이터에 적합하고, 범용적인 정렬로는 잘 사용되지 않습니다.
100	1	1	1	의존성과 설정값을 생성자 인자로 주입해야 하는 이유에 대해 설명해주세요.	모든 의존성을 생성자를 통해 주입하면, 인스턴스 생성 시 즉시 어떠한 동작을 실행할 수 있습니다. 또한 추가적인 설정은 필요하지 않으며, 뜻하지 않게 의존성과 설정값을 빠뜨리는 일이 발생하지 않고 테스트에도 용이합니다.
341	1	1	1	CPU 스케줄링에 대해 설명해주세요.	CPU 스케줄링은 프로세스가 CPU를 사용할 수 있도록 순서를 결정하는 운영체제의 핵심 기능입니다. 선점형(Preemptive)과 비선점형(Non-Preemptive) 방식이 있으며, FCFS, SJF, Round Robin, Priority Scheduling 등의 알고리즘이 사용됩니다. 효율적인 CPU 스케줄링을 통해 시스템 성능을 최적화하고 응답 시간을 줄일 수 있습니다.
466	1	1	1	PM이 팀 내 커뮤니케이션을 원활하게 하기 위한 방법에 대해 설명해주세요.	PM은 주기적인 회의, 명확한 목표 설정, 효과적인 협업 툴 사용, 피드백 문화를 조성하여 팀 내 커뮤니케이션을 원활하게 할 수 있습니다. 또한, 개방적인 환경을 조성하여 팀원이 자유롭게 의견을 나눌 수 있도록 유도해야 합니다.
\.


--
-- Data for Name: question_job; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.question_job (question_job_id, job_id, question_id) FROM stdin;
1	1	301
2	2	301
3	3	301
4	1	302
5	2	302
6	3	302
7	1	303
8	2	303
9	3	303
10	1	304
11	2	304
12	3	304
13	1	305
14	2	305
15	3	305
16	1	306
17	2	306
18	3	306
19	1	307
20	2	307
21	3	307
22	1	308
23	2	308
24	3	308
25	1	309
26	2	309
27	3	309
28	1	310
29	2	310
30	3	310
31	1	311
32	2	311
33	3	311
34	1	312
35	2	312
36	3	312
37	1	313
38	2	313
39	3	313
40	1	314
41	2	314
42	3	314
43	1	315
44	2	315
45	3	315
46	1	316
47	2	316
48	3	316
49	1	317
50	2	317
51	3	317
52	1	318
53	2	318
54	3	318
55	1	319
56	2	319
57	3	319
58	1	320
59	2	320
60	3	320
61	1	321
62	2	321
63	3	321
64	1	322
65	2	322
66	3	322
67	1	323
68	2	323
69	3	323
70	1	324
71	2	324
72	3	324
73	1	325
74	2	325
75	3	325
76	1	326
77	2	326
78	3	326
79	1	327
80	2	327
81	3	327
82	1	328
83	2	328
84	3	328
85	1	329
86	2	329
87	3	329
88	1	330
89	2	330
90	3	330
91	1	331
92	2	331
93	3	331
94	1	332
95	2	332
96	3	332
97	1	333
98	2	333
99	3	333
100	1	334
101	2	334
102	17	334
103	3	334
104	1	335
105	2	335
106	17	335
107	3	335
108	1	336
109	2	336
110	17	336
111	3	336
112	1	337
113	2	337
114	17	337
115	3	337
116	1	338
117	2	338
118	17	338
119	3	338
120	1	339
121	2	339
122	17	339
123	3	339
124	1	340
125	2	340
126	17	340
127	3	340
128	1	341
129	2	341
130	17	341
131	3	341
132	1	342
133	2	342
134	17	342
135	3	342
136	1	343
137	2	343
138	17	343
139	3	343
140	1	344
141	2	344
142	17	344
143	3	344
144	1	345
145	2	345
146	17	345
147	3	345
148	1	346
149	2	346
150	17	346
151	3	346
152	1	347
153	2	347
154	17	347
155	3	347
156	1	348
157	2	348
158	17	348
159	3	348
160	1	349
161	2	349
162	6	349
163	3	349
164	1	350
165	2	350
166	6	350
167	3	350
168	1	351
169	2	351
170	6	351
171	14	351
172	3	351
173	1	352
174	2	352
175	6	352
176	3	352
177	1	353
178	2	353
179	6	353
180	3	353
181	1	354
182	2	354
183	6	354
184	3	354
185	1	355
186	2	355
187	6	355
188	3	355
189	1	356
190	2	356
191	6	356
192	3	356
193	1	357
194	2	357
195	6	357
196	3	357
197	1	358
198	2	358
199	6	358
200	3	358
201	1	359
202	2	359
203	6	359
204	3	359
205	1	360
206	2	360
207	17	360
208	3	360
209	1	361
210	2	361
211	17	361
212	3	361
213	1	362
214	2	362
215	17	362
216	3	362
217	1	363
218	2	363
219	17	363
220	3	363
221	1	364
222	2	364
223	17	364
224	3	364
225	1	365
226	2	365
227	17	365
228	3	365
229	1	366
230	2	366
231	17	366
232	3	366
233	1	367
234	2	367
235	17	367
236	3	367
237	1	368
238	2	368
239	17	368
240	3	368
241	1	369
242	2	369
243	17	369
244	3	369
245	14	370
246	2	370
247	2	371
248	2	372
249	2	373
250	1	374
251	2	374
252	3	374
253	2	375
254	7	375
255	2	376
256	2	377
257	7	377
258	3	377
259	2	378
260	1	378
261	3	378
262	2	379
263	1	379
264	3	379
265	2	380
266	1	380
267	3	380
268	2	381
269	1	381
270	3	381
271	2	382
272	1	382
273	3	382
274	2	383
275	1	383
276	3	383
277	2	384
278	1	384
279	3	384
280	2	385
281	1	385
282	3	385
283	2	386
284	1	386
285	13	387
286	13	388
287	13	389
288	13	390
289	13	391
290	13	392
291	13	393
292	2	394
293	2	396
294	2	397
295	2	398
296	2	399
297	2	400
298	2	401
299	2	402
300	2	403
301	2	404
302	2	405
303	2	406
304	1	407
305	1	408
306	3	408
307	2	409
308	1	409
309	3	409
310	2	410
311	1	410
312	3	410
313	2	411
314	1	411
315	3	411
316	2	412
317	1	412
318	3	412
319	2	413
320	1	413
321	3	413
322	2	414
323	1	414
324	3	414
325	2	415
326	1	415
327	3	415
328	14	415
329	2	416
330	1	416
331	3	416
332	14	416
333	2	417
334	1	417
335	3	417
336	14	417
337	1	418
338	1	419
339	2	420
340	1	420
341	2	421
342	2	422
343	2	423
344	2	424
345	1	425
346	1	426
347	1	427
348	2	428
349	2	429
350	1	429
351	3	429
352	2	430
353	2	431
354	2	432
355	1	432
356	3	432
357	1	433
358	2	433
359	17	433
360	3	433
361	1	434
362	2	434
363	17	434
364	3	434
365	1	435
366	2	435
367	17	435
368	3	435
369	1	436
370	2	436
371	17	436
372	3	436
373	1	437
374	2	437
375	17	437
376	3	437
377	1	438
378	2	438
379	17	438
380	3	438
381	1	439
382	2	439
383	17	439
384	3	439
385	1	440
386	2	440
387	17	440
388	3	440
389	6	440
390	1	441
391	2	441
392	17	441
393	3	441
394	1	442
395	2	442
396	17	442
397	3	442
398	1	443
399	2	443
400	17	443
401	3	443
402	1	444
403	2	444
404	17	444
405	3	444
406	2	445
407	1	445
408	3	445
409	2	446
410	2	447
411	2	448
412	2	449
413	2	450
414	2	451
415	2	452
416	2	453
417	2	454
418	2	455
1181	1	1
1182	2	1
1183	3	1
1184	8	1
1185	1	2
1186	2	2
1187	3	2
1188	8	2
1189	1	3
1190	2	3
1191	3	3
1192	8	3
1193	1	4
1194	2	4
1195	3	4
1196	8	4
1197	1	5
1198	2	5
1199	3	5
1200	8	5
1201	1	6
1202	2	6
1203	3	6
1204	8	6
1205	1	7
1206	2	7
1207	3	7
1208	8	7
1209	1	8
1210	2	8
1211	3	8
1212	8	8
1213	1	9
1214	2	9
1215	3	9
1216	8	9
1217	1	10
1218	2	10
1219	3	10
1220	8	10
1221	1	11
1222	2	11
1223	3	11
1224	8	11
1225	1	12
1226	2	12
1227	3	12
1228	8	12
1229	1	14
1230	2	14
1231	3	14
1232	13	14
1233	1	15
1234	2	15
1235	3	15
1236	13	15
1237	1	16
1238	2	16
1239	3	16
1240	13	16
1241	1	17
1242	2	17
1243	3	17
1244	13	17
1245	1	18
1246	2	18
1247	3	18
1248	13	18
1249	1	19
1250	2	19
1251	3	19
1252	13	19
1253	1	20
1254	2	20
1255	3	20
1256	13	20
1257	1	21
1258	2	21
1259	3	21
1260	13	21
1261	1	22
1262	2	22
1263	3	22
1264	13	22
1265	1	23
1266	2	23
1267	3	23
1268	13	23
1269	2	24
1270	8	24
1271	6	24
1272	2	25
1273	8	25
1274	6	25
1275	2	26
1276	8	26
1277	6	26
1278	2	27
1279	8	27
1280	6	27
1281	2	28
1282	8	28
1283	6	28
1284	2	29
1285	8	29
1286	6	29
1287	2	30
1288	8	30
1289	6	30
1290	2	31
1291	8	31
1292	6	31
1293	2	32
1294	8	32
1295	6	32
1296	2	33
1297	8	33
1298	6	33
1299	2	34
1300	8	34
1301	6	34
1302	9	34
1303	2	35
1304	8	35
1305	6	35
1306	9	35
1307	2	36
1308	8	36
1309	6	36
1310	2	37
1311	8	37
1312	6	37
1313	1	39
1314	2	39
1315	3	39
1316	13	39
1317	1	40
1318	2	40
1319	3	40
1320	13	40
1321	1	42
1322	2	42
1323	3	42
1324	13	42
1325	1	43
1326	2	43
1327	3	43
1328	13	43
1329	1	46
1330	2	46
1331	3	46
1332	13	46
1333	2	49
1334	2	50
1335	2	51
1336	2	52
1337	2	58
1338	2	59
1339	2	60
1340	2	61
1341	2	62
1342	2	63
1343	2	64
1344	2	65
1345	2	66
1346	2	67
1347	2	68
1348	2	69
1349	2	70
1350	2	71
1351	2	72
1352	2	73
1353	2	74
1354	2	75
1355	2	76
1356	2	77
1357	2	78
1358	2	79
1359	2	80
1360	2	81
1361	2	82
1362	2	83
1363	2	84
1364	2	85
1365	2	86
1366	2	87
1367	2	88
1368	2	89
1369	2	90
1370	2	91
1371	2	92
1372	2	93
1373	2	94
1374	2	95
1375	2	96
1376	2	97
1377	2	98
1378	2	99
1379	2	100
1380	2	101
1381	2	102
1382	2	103
1383	2	104
1384	1	105
1385	2	105
1386	3	105
1387	1	106
1388	2	106
1389	3	106
1390	1	107
1391	2	107
1392	3	107
1393	9	107
1394	1	108
1395	2	108
1396	3	108
1397	9	108
1398	1	109
1399	2	109
1400	3	109
1401	9	109
1402	1	110
1403	2	110
1404	3	110
1405	9	110
1406	1	112
1407	2	112
1408	3	112
1409	9	112
1410	1	113
1411	2	113
1412	3	113
1413	9	113
1414	1	114
1415	2	114
1416	3	114
1417	9	114
1418	1	115
1419	2	115
1420	3	115
1421	9	115
1422	1	116
1423	2	116
1424	3	116
1425	9	116
1426	1	117
1427	2	117
1428	3	117
1429	9	117
1430	1	118
1431	2	118
1432	3	118
1433	9	118
1434	1	119
1435	2	119
1436	3	119
1437	9	119
1438	2	120
1439	8	120
1440	2	122
1441	1	122
1442	3	122
1443	2	123
1444	1	123
1445	3	123
1446	2	124
1447	1	124
1448	3	124
1449	2	126
1450	1	126
1451	3	126
1452	2	127
1453	16	127
1454	2	128
1455	16	128
1456	2	129
1457	16	129
1458	2	130
1459	8	130
1460	17	130
1461	2	131
1462	8	131
1463	17	131
1464	2	132
1465	8	132
1466	17	132
1467	2	133
1468	8	133
1469	9	133
1470	2	134
1471	8	134
1472	2	135
1473	8	135
1474	8	136
1475	7	136
1476	8	137
1477	7	137
1599	18	461
1600	18	462
1601	18	463
1602	18	464
1603	18	465
1604	18	466
1605	18	467
1606	18	468
1607	18	469
1608	18	470
1609	15	471
1610	15	472
1611	15	473
1612	15	474
1613	15	475
1614	15	476
1615	15	477
1616	15	478
1617	15	479
1618	15	480
1619	16	481
1620	16	482
1621	16	483
1622	16	484
1623	16	485
1624	16	486
1625	16	487
1626	16	488
1627	16	489
1628	16	490
1629	7	490
1630	12	491
1631	12	492
1632	12	493
1633	12	494
1634	12	495
1635	12	496
1636	12	497
1637	12	498
1638	12	499
1639	12	500
1640	4	501
1641	4	502
1642	4	503
1643	4	504
1644	4	505
1645	4	506
1646	4	507
1647	4	508
1648	6	508
1649	4	509
1650	4	510
1651	5	511
1652	5	512
1653	5	513
1654	5	514
1655	5	515
1656	5	516
1657	5	517
1658	5	518
1659	6	518
1660	5	519
1661	5	520
1662	5	521
1663	9	522
1664	9	523
1665	9	524
1666	9	525
1667	9	526
1668	9	527
1669	9	528
1670	9	529
1671	9	530
1672	9	531
1673	9	532
1674	9	533
1675	9	534
1676	9	535
1677	10	522
1678	10	522
1679	10	523
1680	10	524
1681	10	525
1682	10	526
1683	10	527
1684	10	528
1685	10	529
1686	10	530
1687	10	531
1688	10	532
1689	10	533
1690	10	534
1691	10	535
1710	11	536
1711	11	537
1712	11	538
1713	11	539
1714	11	540
1715	11	541
1716	11	542
1717	11	543
1718	11	544
1719	11	545
1720	11	546
1721	11	547
1722	11	548
1723	11	549
1724	11	550
1725	11	551
1726	11	552
1727	11	553
1728	11	554
1729	11	555
1730	11	556
1731	11	557
1732	4	301
1733	5	301
1734	6	301
1735	7	301
1736	8	301
1737	9	301
1738	10	301
1739	11	301
1740	12	301
1741	13	301
1742	14	301
1743	15	301
1744	16	301
1745	17	301
1746	4	302
1747	5	302
1748	6	302
1749	7	302
1750	8	302
1751	9	302
1752	10	302
1753	11	302
1754	12	302
1755	13	302
1756	14	302
1757	15	302
1758	16	302
1759	17	302
1760	4	303
1761	5	303
1762	6	303
1763	7	303
1764	8	303
1765	9	303
1766	10	303
1767	11	303
1768	12	303
1769	13	303
1770	14	303
1771	15	303
1772	16	303
1773	17	303
1774	4	304
1775	5	304
1776	6	304
1777	7	304
1778	8	304
1779	9	304
1780	10	304
1781	11	304
1782	12	304
1783	13	304
1784	14	304
1785	15	304
1786	16	304
1787	17	304
1788	4	305
1789	5	305
1790	6	305
1791	7	305
1792	8	305
1793	9	305
1794	10	305
1795	11	305
1796	12	305
1797	13	305
1798	14	305
1799	15	305
1800	16	305
1801	17	305
1802	4	306
1803	5	306
1804	6	306
1805	7	306
1806	8	306
1807	9	306
1808	10	306
1809	11	306
1810	12	306
1811	13	306
1812	14	306
1813	15	306
1814	16	306
1815	17	306
1816	4	307
1817	5	307
1818	6	307
1819	7	307
1820	8	307
1821	9	307
1822	10	307
1823	11	307
1824	12	307
1825	13	307
1826	14	307
1827	15	307
1828	16	307
1829	17	307
1830	4	308
1831	5	308
1832	6	308
1833	7	308
1834	8	308
1835	9	308
1836	10	308
1837	11	308
1838	12	308
1839	13	308
1840	14	308
1841	15	308
1842	16	308
1843	17	308
1844	4	309
1845	5	309
1846	6	309
1847	7	309
1848	8	309
1849	9	309
1850	10	309
1851	11	309
1852	12	309
1853	13	309
1854	14	309
1855	15	309
1856	16	309
1857	17	309
1858	4	310
1859	5	310
1860	6	310
1861	7	310
1862	8	310
1863	9	310
1864	10	310
1865	11	310
1866	12	310
1867	13	310
1868	14	310
1869	15	310
1870	16	310
1871	17	310
1872	4	311
1873	5	311
1874	6	311
1875	7	311
1876	8	311
1877	9	311
1878	10	311
1879	11	311
1880	12	311
1881	13	311
1882	14	311
1883	15	311
1884	16	311
1885	17	311
1886	4	312
1887	5	312
1888	6	312
1889	7	312
1890	8	312
1891	9	312
1892	10	312
1893	11	312
1894	12	312
1895	13	312
1896	14	312
1897	15	312
1898	16	312
1899	17	312
1900	4	313
1901	5	313
1902	6	313
1903	7	313
1904	8	313
1905	9	313
1906	10	313
1907	11	313
1908	12	313
1909	13	313
1910	14	313
1911	15	313
1912	16	313
1913	17	313
1914	4	314
1915	5	314
1916	6	314
1917	7	314
1918	8	314
1919	9	314
1920	10	314
1921	11	314
1922	12	314
1923	13	314
1924	14	314
1925	15	314
1926	16	314
1927	17	314
1928	4	315
1929	5	315
1930	6	315
1931	7	315
1932	8	315
1933	9	315
1934	10	315
1935	11	315
1936	12	315
1937	13	315
1938	14	315
1939	15	315
1940	16	315
1941	17	315
1942	4	316
1943	5	316
1944	6	316
1945	7	316
1946	8	316
1947	9	316
1948	10	316
1949	11	316
1950	12	316
1951	13	316
1952	14	316
1953	15	316
1954	16	316
1955	17	316
1956	4	318
1957	5	318
1958	6	318
1959	7	318
1960	8	318
1961	9	318
1962	10	318
1963	11	318
1964	12	318
1965	13	318
1966	14	318
1967	15	318
1968	16	318
1969	17	318
1970	4	319
1971	5	319
1972	6	319
1973	7	319
1974	8	319
1975	9	319
1976	10	319
1977	11	319
1978	12	319
1979	13	319
1980	14	319
1981	15	319
1982	16	319
1983	17	319
1984	4	320
1985	5	320
1986	6	320
1987	7	320
1988	8	320
1989	9	320
1990	10	320
1991	11	320
1992	12	320
1993	13	320
1994	14	320
1995	15	320
1996	16	320
1997	17	320
1998	4	321
1999	5	321
2000	6	321
2001	7	321
2002	8	321
2003	9	321
2004	10	320
2005	11	320
2006	12	320
2007	13	320
2008	14	320
2009	15	320
2010	16	320
2011	17	320
2012	4	321
2013	5	321
2014	6	321
2015	7	321
2016	8	321
2017	9	321
2018	10	321
2019	11	321
2020	12	321
2021	13	321
2022	14	321
2023	15	321
2024	16	321
2025	17	321
2026	4	322
2027	5	322
2028	6	322
2029	7	322
2030	8	322
2031	9	322
2032	10	322
2033	11	322
2034	12	322
2035	13	322
2036	14	322
2037	15	322
2038	16	322
2039	17	322
2040	4	323
2041	5	323
2042	6	323
2043	7	323
2044	8	323
2045	9	323
2046	10	323
2047	11	323
2048	12	323
2049	13	323
2050	14	323
2051	15	323
2052	16	323
2053	17	323
2054	4	324
2055	5	324
2056	6	324
2057	7	324
2058	8	324
2059	9	324
2060	10	324
2061	11	324
2062	12	324
2063	13	324
2064	14	324
2065	15	324
2066	16	324
2067	17	324
2068	4	325
2069	5	325
2070	6	325
2071	7	325
2072	8	325
2073	9	325
2074	10	325
2075	11	325
2076	12	325
2077	13	325
2078	14	325
2079	15	325
2080	16	325
2081	17	325
2082	4	326
2083	5	326
2084	6	326
2085	7	326
2086	8	326
2087	9	326
2088	10	326
2089	11	326
2090	12	326
2091	13	326
2092	14	326
2093	15	326
2094	16	326
2095	17	326
2096	4	327
2097	5	327
2098	6	327
2099	7	327
2100	8	327
2101	9	327
2102	10	327
2103	11	327
2104	12	327
2105	13	327
2106	14	327
2107	15	327
2108	16	327
2109	17	327
2110	4	328
2111	5	328
2112	6	328
2113	7	328
2114	8	328
2115	9	328
2116	10	328
2117	11	328
2118	12	328
2119	13	328
2120	14	328
2121	15	328
2122	16	328
2123	17	328
2124	4	329
2125	5	329
2126	6	329
2127	7	329
2128	8	329
2129	9	329
2130	10	329
2131	11	329
2132	12	329
2133	13	329
2134	14	329
2135	15	329
2136	16	329
2137	17	329
2138	4	330
2139	5	330
2140	6	330
2141	7	330
2142	8	330
2143	9	330
2144	10	330
2145	11	330
2146	12	330
2147	13	330
2148	14	330
2149	15	330
2150	16	330
2151	17	330
2152	4	331
2153	5	331
2154	6	331
2155	7	331
2156	8	331
2157	9	331
2158	10	331
2159	11	331
2160	12	331
2161	13	331
2162	14	331
2163	15	331
2164	16	331
2165	17	331
2166	4	332
2167	5	332
2168	6	332
2169	7	332
2170	8	332
2171	9	332
2172	10	332
2173	11	332
2174	12	332
2175	13	332
2176	14	332
2177	15	332
2178	16	332
2179	17	332
2180	4	333
2181	5	333
2182	6	333
2183	7	333
2184	8	333
2185	9	333
2186	10	333
2187	11	333
2188	12	333
2189	13	333
2190	14	333
2191	15	333
2192	16	333
2193	17	333
2194	4	334
2195	5	334
2196	6	334
2197	7	334
2198	8	334
2199	9	334
2200	10	334
2201	11	334
2202	12	334
2203	13	334
2204	14	334
2205	15	334
2206	16	334
2207	17	334
2208	4	335
2209	5	335
2210	6	335
2211	7	335
2212	8	335
2213	9	335
2214	10	335
2215	11	335
2216	12	335
2217	13	335
2218	14	335
2219	15	335
2220	16	335
2221	17	335
2222	4	336
2223	5	336
2224	6	336
2225	7	336
2226	8	336
2227	9	336
2228	10	336
2229	11	336
2230	12	336
2231	13	336
2232	14	336
2233	15	336
2234	16	336
2235	17	336
2236	4	337
2237	5	337
2238	6	337
2239	7	337
2240	8	337
2241	9	337
2242	10	337
2243	11	337
2244	12	337
2245	13	337
2246	14	337
2247	15	337
2248	16	337
2249	17	337
2250	4	338
2251	5	338
2252	6	338
2253	7	338
2254	8	338
2255	9	338
2256	10	338
2257	11	338
2258	12	338
2259	13	338
2260	14	338
2261	15	338
2262	16	338
2263	17	338
2264	4	339
2265	5	339
2266	6	339
2267	7	339
2268	8	339
2269	9	339
2270	10	339
2271	11	339
2272	12	339
2273	13	339
2274	14	339
2275	15	339
2276	16	339
2277	17	339
2278	4	340
2279	5	340
2280	6	340
2281	7	340
2282	8	340
2283	9	340
2284	10	340
2285	11	340
2286	12	340
2287	13	340
2288	14	340
2289	15	340
2290	16	340
2291	17	340
2292	4	341
2293	5	341
2294	6	341
2295	7	341
2296	8	341
2297	9	341
2298	10	341
2299	11	341
2300	12	341
2301	13	341
2302	14	341
2303	15	341
2304	16	341
2305	17	341
2306	4	342
2307	5	342
2308	6	342
2309	7	342
2310	8	342
2311	9	342
2312	10	342
2313	11	342
2314	12	342
2315	13	342
2316	14	342
2317	15	342
2318	16	342
2319	17	342
2320	4	343
2321	5	343
2322	6	343
2323	7	343
2324	8	343
2325	9	343
2326	10	343
2327	11	343
2328	12	343
2329	13	343
2330	14	343
2331	15	343
2332	16	343
2333	17	343
2334	4	344
2335	5	344
2336	6	344
2337	7	344
2338	8	344
2339	9	344
2340	10	344
2341	11	344
2342	12	344
2343	13	344
2344	14	344
2345	15	344
2346	16	344
2347	17	344
2348	4	345
2349	5	345
2350	6	345
2351	7	345
2352	8	345
2353	9	345
2354	10	345
2355	11	345
2356	12	345
2357	13	345
2358	14	345
2359	15	345
2360	16	345
2361	17	345
2362	4	346
2363	5	346
2364	6	346
2365	7	346
2366	8	346
2367	9	346
2368	10	346
2369	11	346
2370	12	346
2371	13	346
2372	14	346
2373	15	346
2374	16	346
2375	17	346
2376	4	347
2377	5	347
2378	6	347
2379	7	347
2380	8	347
2381	9	347
2382	10	347
2383	11	347
2384	12	347
2385	13	347
2386	14	347
2387	15	347
2388	16	347
2389	17	347
2390	4	348
2391	5	348
2392	6	348
2393	7	348
2394	8	348
2395	9	348
2396	10	348
2397	11	348
2398	12	348
2399	13	348
2400	14	348
2401	15	348
2402	16	348
2403	17	348
2404	4	349
2405	5	349
2406	6	349
2407	7	349
2408	8	349
2409	9	349
2410	10	349
2411	11	349
2412	12	349
2413	13	349
2414	14	349
2415	15	349
2416	16	349
2417	17	349
2418	4	350
2419	5	350
2420	6	350
2421	7	350
2422	8	350
2423	9	350
2424	10	350
2425	11	350
2426	12	350
2427	13	350
2428	14	350
2429	15	350
2430	16	350
2431	17	350
2432	4	351
2433	5	351
2434	6	351
2435	7	351
2436	8	351
2437	9	351
2438	10	351
2439	11	351
2440	12	351
2441	13	351
2442	14	351
2443	15	351
2444	16	351
2445	17	351
2446	4	352
2447	5	352
2448	6	352
2449	7	352
2450	8	352
2451	9	352
2452	10	352
2453	11	352
2454	12	352
2455	13	352
2456	14	352
2457	15	352
2458	16	352
2459	17	352
2460	4	353
2461	5	353
2462	6	353
2463	7	353
2464	8	353
2465	9	353
2466	10	353
2467	11	353
2468	12	353
2469	13	353
2470	14	353
2471	15	353
2472	16	353
2473	17	353
2474	4	354
2475	5	354
2476	6	354
2477	7	354
2478	8	354
2479	9	354
2480	10	354
2481	11	354
2482	12	354
2483	13	354
2484	14	354
2485	15	354
2486	16	354
2487	17	354
2488	4	355
2489	5	355
2490	6	355
2491	7	355
2492	8	355
2493	9	355
2494	10	355
2495	11	355
2496	12	355
2497	13	355
2498	14	355
2499	15	355
2500	16	355
2501	17	355
2502	4	356
2503	5	356
2504	6	356
2505	7	356
2506	8	356
2507	9	356
2508	10	356
2509	11	356
2510	12	356
2511	13	356
2512	14	356
2513	15	356
2514	16	356
2515	17	356
2516	4	357
2517	5	357
2518	6	357
2519	7	357
2520	8	357
2521	9	357
2522	10	357
2523	11	357
2524	12	357
2525	13	357
2526	14	357
2527	15	357
2528	16	357
2529	17	357
2530	4	358
2531	5	358
2532	6	358
2533	7	358
2534	8	358
2535	9	358
2536	10	358
2537	11	358
2538	12	358
2539	13	358
2540	14	358
2541	15	358
2542	16	358
2543	17	358
2544	4	359
2545	5	359
2546	6	359
2547	7	359
2548	8	359
2549	9	359
2550	10	359
2551	11	359
2552	12	359
2553	13	359
2554	14	359
2555	15	359
2556	16	359
2557	17	359
2558	4	360
2559	5	360
2560	6	360
2561	7	360
2562	8	360
2563	9	360
2564	10	360
2565	11	360
2566	12	360
2567	13	360
2568	14	360
2569	15	360
2570	16	360
2571	17	360
2572	4	361
2573	5	361
2574	6	361
2575	7	361
2576	8	361
2577	9	361
2578	10	361
2579	11	361
2580	12	361
2581	13	361
2582	14	361
2583	15	361
2584	16	361
2585	17	361
2586	4	362
2587	5	362
2588	6	362
2589	7	362
2590	8	362
2591	9	362
2592	10	362
2593	11	362
2594	12	362
2595	13	362
2596	14	362
2597	15	362
2598	16	362
2599	17	362
2600	4	363
2601	5	363
2602	6	363
2603	7	363
2604	8	363
2605	9	363
2606	10	363
2607	11	363
2608	12	363
2609	13	363
2610	14	363
2611	15	363
2612	16	363
2613	17	363
2614	4	364
2615	5	364
2616	6	364
2617	7	364
2618	8	364
2619	9	364
2620	10	364
2621	11	364
2622	12	364
2623	13	364
2624	14	364
2625	15	364
2626	16	364
2627	17	364
2628	4	365
2629	5	365
2630	6	365
2631	7	365
2632	8	365
2633	9	365
2634	10	365
2635	11	365
2636	12	365
2637	13	365
2638	14	365
2639	15	365
2640	16	365
2641	17	365
2642	4	366
2643	5	366
2644	6	366
2645	7	366
2646	8	366
2647	9	366
2648	10	366
2649	11	366
2650	12	366
2651	13	366
2652	14	366
2653	15	366
2654	16	366
2655	17	366
2656	4	367
2657	5	367
2658	6	367
2659	7	367
2660	8	367
2661	9	367
2662	10	367
2663	11	367
2664	12	367
2665	13	367
2666	14	367
2667	15	367
2668	16	367
2669	17	367
2670	4	368
2671	5	368
2672	6	368
2673	7	368
2674	8	368
2675	9	368
2676	10	368
2677	11	368
2678	12	368
2679	13	368
2680	14	368
2681	15	368
2682	16	368
2683	17	368
2684	4	369
2685	5	369
2686	6	369
2687	7	369
2688	8	369
2689	9	369
2690	10	369
2691	11	369
2692	12	369
2693	13	369
2694	14	369
2695	15	369
2696	16	369
2697	17	369
\.


--
-- Data for Name: question_skill; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.question_skill (question_skill, question_id, skill_id) FROM stdin;
1	301	12
2	302	12
3	303	12
4	304	12
5	305	12
6	306	12
7	307	12
8	308	12
9	309	12
10	310	12
11	311	12
12	312	12
13	313	12
14	314	12
15	315	12
16	316	12
17	317	12
18	318	247
19	319	247
20	320	247
21	321	247
22	322	247
23	323	247
24	324	13
25	325	13
26	326	13
27	327	13
28	328	13
29	329	13
30	330	13
31	331	13
32	332	13
33	333	13
34	334	14
35	335	14
36	336	14
37	337	14
38	338	14
39	339	14
40	340	14
41	341	14
42	342	14
43	343	14
44	344	14
45	345	14
46	346	14
47	347	14
48	348	14
49	349	11
50	350	11
51	351	11
52	351	245
53	352	11
54	353	11
55	354	11
56	355	11
57	356	11
58	357	11
59	358	11
60	359	11
61	360	10
62	361	10
63	362	10
64	363	10
65	364	10
66	365	10
67	366	10
68	367	10
69	368	10
70	369	10
71	370	244
72	371	244
73	372	244
74	373	244
75	373	20
76	374	244
77	375	244
78	376	20
79	377	244
80	378	112
81	379	112
82	380	112
83	381	112
84	382	112
85	383	112
86	384	112
87	385	112
88	386	112
89	386	20
90	387	1
91	388	1
92	389	1
93	390	1
94	391	2
95	392	2
96	393	2
97	394	4
98	396	4
99	397	4
100	398	4
101	399	4
102	400	4
103	401	4
104	402	4
105	403	4
106	404	4
107	405	4
108	406	4
109	407	5
110	408	5
111	409	246
112	410	246
113	411	246
114	412	246
115	413	246
116	414	246
117	415	246
118	416	246
119	417	246
120	417	245
121	418	246
122	419	246
123	420	246
124	420	245
125	421	20
126	422	20
127	423	20
128	424	20
129	425	16
130	426	15
131	427	15
132	428	20
133	429	4
134	429	5
135	429	8
136	429	1
137	429	2
138	429	3
139	430	4
140	431	4
141	433	14
142	434	14
143	435	14
144	436	14
145	437	14
146	438	14
147	439	14
148	440	11
149	441	11
150	442	11
151	443	11
152	444	11
153	445	246
154	446	10
155	447	10
156	448	20
157	449	20
158	450	20
159	451	20
160	452	20
161	453	20
162	454	20
163	455	20
466	1	10
467	2	10
468	3	10
469	4	10
470	5	10
471	6	10
472	7	10
473	8	10
474	9	10
475	10	10
476	11	10
477	12	10
478	14	14
479	15	14
480	16	14
481	17	14
482	18	14
483	19	14
484	20	14
485	21	14
486	22	14
487	23	14
488	24	11
489	25	11
490	26	11
491	27	11
492	28	11
493	29	11
494	30	11
495	31	11
496	32	11
497	33	11
498	34	11
499	35	11
500	36	11
501	37	11
502	39	12
503	39	13
504	40	12
505	40	13
506	42	12
507	42	13
508	43	12
509	43	13
510	46	12
511	46	13
512	49	245
513	50	245
514	51	245
515	52	245
516	58	4
517	59	4
518	60	4
519	61	4
520	62	4
521	63	4
522	64	4
523	65	4
524	66	4
525	67	4
526	68	4
527	69	4
528	70	4
529	71	4
530	72	4
531	73	4
532	74	4
533	75	4
534	76	4
535	77	4
536	78	4
537	79	4
538	80	4
539	81	4
540	82	4
541	83	20
542	84	20
543	85	20
544	86	20
545	87	20
546	88	20
547	89	20
548	90	20
549	91	20
550	92	20
551	93	20
552	94	20
553	95	20
554	96	20
555	97	20
556	98	20
557	99	20
558	100	20
559	101	20
560	102	20
561	103	20
562	104	20
563	105	22
564	106	22
565	107	8
566	108	8
567	109	8
568	110	8
569	112	8
570	113	8
571	114	8
572	115	8
573	116	8
574	117	8
575	118	8
576	119	8
577	120	10
578	122	192
579	122	112
580	123	192
581	123	112
582	124	192
583	124	112
584	126	192
585	126	112
586	127	86
587	128	86
588	129	86
589	130	41
590	131	160
591	132	190
592	133	10
593	134	39
594	134	142
595	135	39
596	135	142
597	136	185
598	137	10
740	461	244
741	462	244
742	463	244
743	464	244
744	465	244
745	466	244
746	467	244
747	468	244
748	469	244
749	470	244
750	471	126
751	472	126
752	473	126
753	474	126
754	475	126
755	476	126
756	477	126
757	478	126
758	479	126
759	480	126
760	481	86
761	482	86
762	483	86
763	484	86
764	485	86
765	486	86
766	487	86
767	488	86
768	489	245
769	489	86
770	490	185
771	490	86
772	491	112
773	492	243
774	493	62
775	493	63
776	494	243
777	494	235
778	495	242
779	496	150
780	497	12
781	498	10
782	499	120
783	500	112
784	501	28
785	502	28
786	503	28
787	504	28
788	505	108
789	506	28
790	507	28
791	507	242
792	508	28
793	508	36
794	509	36
795	510	36
796	510	120
797	511	27
798	512	27
799	512	192
800	513	27
801	513	120
802	514	27
803	514	112
804	515	27
805	515	158
806	516	27
807	516	242
808	517	27
809	517	112
810	518	27
811	518	11
812	519	27
813	520	27
814	521	27
815	522	129
816	523	130
817	523	131
818	524	129
819	524	131
820	525	130
821	526	129
822	526	233
823	527	130
824	527	233
825	528	201
826	529	201
827	529	129
828	529	150
829	530	201
830	531	129
831	532	129
832	533	233
833	534	233
834	535	129
871	536	93
872	536	105
873	536	104
874	537	93
875	538	93
876	538	124
877	538	125
878	539	119
879	539	120
880	540	10
881	540	93
882	541	39
883	541	40
884	541	142
885	542	93
886	542	120
887	543	114
888	543	10
889	544	180
890	545	189
891	545	190
892	546	41
893	546	239
894	547	185
895	547	46
896	547	186
897	548	180
898	548	93
899	549	93
900	549	120
901	550	93
902	550	120
903	551	93
904	551	120
905	552	93
906	552	120
907	553	93
908	554	93
909	554	198
910	555	93
911	555	198
912	556	114
913	556	10
914	557	93
915	557	138
\.


--
-- Data for Name: served_question; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.served_question (served_question_id, is_daily, is_solved, served_at, member_id, question_id) FROM stdin;
2	t	f	2025-02-18	1	435
3	t	f	2025-02-18	1	380
92	t	f	2025-02-20	4	334
4	t	f	2025-02-18	2	301
5	t	f	2025-02-18	2	439
6	t	f	2025-02-18	2	312
7	f	t	2025-02-18	2	311
8	f	f	2025-02-18	2	426
9	f	f	2025-02-18	2	387
10	f	f	2025-02-18	2	393
11	t	f	2025-02-18	3	323
12	t	f	2025-02-18	3	335
14	f	t	2025-02-18	3	393
15	t	f	2025-02-19	2	338
16	t	f	2025-02-19	2	427
13	t	t	2025-02-18	3	315
20	t	f	2025-02-18	4	436
21	t	f	2025-02-18	4	335
22	t	f	2025-02-18	4	418
23	f	t	2025-02-18	3	334
24	t	f	2025-02-18	5	349
25	t	f	2025-02-18	5	333
26	t	f	2025-02-18	5	323
35	t	t	2025-02-19	6	399
34	t	t	2025-02-19	6	376
36	t	f	2025-02-19	4	328
37	t	f	2025-02-19	4	432
38	t	f	2025-02-19	4	360
39	f	t	2025-02-19	6	335
40	f	t	2025-02-19	6	413
41	f	t	2025-02-19	6	311
42	f	t	2025-02-19	6	452
43	t	f	2025-02-19	5	324
45	t	f	2025-02-19	5	370
46	t	f	2025-02-19	7	411
48	t	f	2025-02-19	7	367
49	f	t	2025-02-19	5	303
50	f	f	2025-02-19	6	351
47	t	t	2025-02-19	7	356
51	f	t	2025-02-19	6	315
52	f	t	2025-02-19	6	6
53	f	t	2025-02-19	6	59
54	f	t	2025-02-19	3	414
55	f	t	2025-02-19	3	452
56	t	f	2025-02-19	8	37
57	t	f	2025-02-19	8	486
58	t	f	2025-02-19	8	408
60	t	t	2025-02-19	9	63
33	t	t	2025-02-19	6	348
31	t	t	2025-02-19	3	320
61	t	t	2025-02-19	9	346
32	t	t	2025-02-19	3	307
59	t	t	2025-02-19	9	118
62	f	t	2025-02-19	6	4
30	t	t	2025-02-19	3	434
63	f	t	2025-02-19	3	130
64	f	t	2025-02-19	6	130
65	f	f	2025-02-19	9	474
67	f	t	2025-02-19	1	324
108	t	f	2025-02-20	13	88
68	f	t	2025-02-19	1	4
69	f	t	2025-02-19	6	303
70	f	f	2025-02-19	3	84
71	f	t	2025-02-19	1	2
72	f	f	2025-02-19	3	83
73	f	f	2025-02-19	6	434
74	f	f	2025-02-19	3	85
75	f	t	2025-02-19	1	130
76	f	f	2025-02-19	3	86
77	f	t	2025-02-19	3	89
78	f	f	2025-02-19	1	6
79	f	f	2025-02-19	3	87
80	f	t	2025-02-19	3	90
93	t	f	2025-02-20	4	480
109	t	f	2025-02-20	13	397
17	t	t	2025-02-19	2	322
1	t	t	2025-02-18	1	452
29	t	f	2025-02-19	1	376
27	t	f	2025-02-19	1	315
110	t	f	2025-02-20	13	360
81	f	t	2025-02-19	3	77
88	t	t	2025-02-20	2	309
89	t	f	2025-02-20	2	435
84	t	t	2025-02-20	1	107
83	t	t	2025-02-20	1	123
91	t	f	2025-02-20	4	363
111	f	t	2025-02-20	13	523
85	t	t	2025-02-20	6	509
66	f	t	2025-02-20	2	2
97	t	t	2025-02-20	10	492
99	t	t	2025-02-20	10	81
98	t	t	2025-02-20	10	107
96	t	t	2025-02-20	3	67
95	t	t	2025-02-20	3	397
44	t	t	2025-02-20	5	411
100	t	f	2025-02-20	5	392
101	t	f	2025-02-20	5	354
94	t	t	2025-02-20	3	416
86	t	t	2025-02-20	6	519
28	t	t	2025-02-20	1	307
102	t	f	2025-02-20	11	451
103	t	f	2025-02-20	11	63
104	t	f	2025-02-20	11	324
87	t	t	2025-02-20	6	100
105	t	f	2025-02-20	12	126
106	t	f	2025-02-20	12	368
107	t	f	2025-02-20	12	324
82	f	t	2025-02-20	1	328
90	t	t	2025-02-20	2	341
134	t	f	2025-02-21	3	469
136	t	f	2025-02-21	5	340
137	t	f	2025-02-21	5	418
138	t	f	2025-02-21	5	120
139	t	f	2025-02-21	10	481
140	t	f	2025-02-21	10	328
141	t	f	2025-02-21	10	356
142	t	f	2025-02-21	6	469
143	t	f	2025-02-21	6	81
144	t	f	2025-02-21	6	29
133	t	t	2025-02-21	3	466
145	f	t	2025-02-21	10	29
146	f	t	2025-02-21	3	29
147	t	f	2025-02-21	1	109
148	t	f	2025-02-21	1	455
149	t	f	2025-02-21	1	534
150	t	f	2025-02-21	13	515
151	t	f	2025-02-21	13	35
152	t	f	2025-02-21	13	547
153	f	t	2025-02-21	13	350
154	f	t	2025-02-21	3	4
135	t	t	2025-02-21	3	465
155	t	f	2025-02-21	2	11
156	t	f	2025-02-21	2	16
157	t	f	2025-02-21	2	35
\.


--
-- Data for Name: skill; Type: TABLE DATA; Schema: public; Owner: d3v3lop3rs
--

COPY public.skill (skill_id, name) FROM stdin;
1	C
2	C_PLUS
3	C_SHARP
4	JAVA
5	JAVASCRIPT
6	HTML
7	CSS
8	PYTHON
9	GO
10	NETWORK
11	DATABASE
12	ALGORITHM
13	DATA_STRUCTURE
14	OPERATING_SYSTEM
15	REACT
16	VUE
17	ANGULAR
18	TYPESCRIPT
19	SASS
20	SPRING
21	SPRING_BOOT
22	NODE_JS
23	EXPRESS
24	DJANGO
25	FLASK
26	RUBY
27	SWIFT
28	KOTLIN
29	FLUTTER
30	REACT_NATIVE
31	OBJECTIVE_C
32	MYSQL
33	POSTGRESQL
34	MONGODB
35	ORACLE
36	SQLITE
37	REDIS
38	MARIADB
39	DOCKER
40	KUBERNETES
41	AWS
42	AZURE
43	GCP
44	TERRAFORM
45	ANSIBLE
46	JENKINS
47	GITHUB_ACTION
48	GITLAB_RUNNER
49	R
50	NUMPY
51	PANDAS
52	TENSORFLOW
53	PYTORCH
54	MATPLOTLIB
55	SCIKIT_LEARN
56	HADOOP
57	SPARK
58	KERAS
59	MLLIB
60	OPENCV
61	NLTK
62	UNITY
63	UNREAL_ENGINE
64	GODOT
65	BLENDER
66	ASSEMBLY
67	MICROCONTROLLERS
68	RTOS
69	IOT
70	KALI_LINUX
71	WIRESHARK
72	METASPLOIT
73	BURP_SUITE
74	NMAP
75	OWASP
76	ENCRYPTION
77	SOLIDITY
78	ETHEREUM
79	HYPERLEDGER
80	WEB3_JS
81	TRUFFLE
82	GANACHE
83	JUNIT
84	SELENIUM
85	CUCUMBER
86	TESTING
87	APPIUM
88	GRAPHQL
89	SQL
90	HEADLESS_CMS
91	GATSBY
92	NEXT_JS
93	LINUX_KERNEL
94	WEBSOCKET
95	D3_JS
96	SERVERLESS_FRAMEWORK
97	BERT
98	WEBPACK
99	MODULE_FEDERATION
100	GRAPHICS
101	RUST
102	WEBASSEMBLY
103	APOLLO
104	KIBANA
105	LOGSTASH
106	ELASTICSEARCH
107	NUXT
108	JETPACK
109	GIT
110	KAFKA
111	DART
112	DESIGN_PATTERN
113	HTTP
114	TCP
115	UDP
116	REST
117	DATABASE_OPTIMIZATION
118	INDEXING
119	VIRTUAL_MEMORY
120	MEMORY_MANAGEMENT
121	OAUTH
122	AUTHENTICATION
123	API_SECURITY
124	VIRTUALIZATION
125	CONTAINERIZATION
126	BLOCKCHAIN
127	CRYPTOCURRENCY
128	DISTRIBUTED_SYSTEMS
129	MACHINE_LEARNING
130	STATISTICAL_LEARNING
131	MODEL_EVALUATION
132	VIRTUAL_DOM
133	DISTRIBUTED_COMPUTING
134	SYSTEM_DESIGN
135	CONSISTENCY
136	TLS
137	SSL
138	NETWORK_SECURITY
139	VERSION_CONTROL
140	COLLABORATION
141	TREE_STRUCTURES
142	CONTAINER_ORCHESTRATION
143	CLOUD_NATIVE
144	TRANSACTIONS
145	DATA_INTEGRITY
146	FUNCTIONAL_PROGRAMMING
147	HASKELL
148	SCALA
149	PATHFINDING
150	AI
151	GARBAGE_COLLECTION
152	WEB_SECURITY
153	BROWSER_APIS
154	MAPREDUCE
155	DATABASE_INDEXING
156	JWT
157	RXJS
158	REACTIVE_PROGRAMMING
159	ASYNCHRONOUS_PROGRAMMING
160	LOAD_BALANCING
161	SCALABILITY
162	DESIGN_PATTERNS
163	INVERSION_OF_CONTROL
164	PROBABILISTIC_DATA_STRUCTURES
165	SPACE_EFFICIENCY
166	GRPC
167	PROTOCOL_BUFFERS
168	INFORMATION_RETRIEVAL
169	FULL_TEXT_SEARCH
170	CQRS
171	EVENT_SOURCING
172	GOLANG
173	CONCURRENCY
174	PARALLEL_PROGRAMMING
175	SERVERLESS
176	AWS_LAMBDA
177	FAAS
178	NOSQL
179	DISTRIBUTED_DATABASES
180	PERFORMANCE_OPTIMIZATION
181	COMPUTATIONAL_COMPLEXITY
182	MESSAGE_QUEUES
183	EVENT_DRIVEN_ARCHITECTURE
184	MEMORY_SAFETY
185	CI_CD
186	GITLAB_CI
187	API_GATEWAY
188	DISTRIBUTED_LEDGER
189	NGINX
190	REVERSE_PROXY
191	SOLID_PRINCIPLES
192	OBJECT_ORIENTED_DESIGN
193	STREAM_PROCESSING
194	QUBITS
195	QUANTUM_GATES
196	REDUX
197	STATE_MANAGEMENT
198	CONFIGURATION_MANAGEMENT
199	CACHING
200	MEMCACHED
201	DEEP_LEARNING
202	WEBRTC
203	P2P
204	ISTIO
205	SERVICE_MESH
206	RDD
207	DAG
208	WORKFLOW_ORCHESTRATION
209	ACID
210	BASE
211	PWA
212	SERVICE_WORKERS
213	SMART_CONTRACTS
214	ZERO_KNOWLEDGE_PROOFS
215	PRIVACY
216	COROUTINES
217	APACHE_CASSANDRA
218	INFLUXDB
219	DATA_STORAGE
220	WORKSPACE
221	ENVIRONMENT_MANAGEMENT
222	FEDERATION
223	OWNERSHIP
224	SHARDING
225	DATA_PERSISTENCE
226	APACHE_FLINK
227	QUERY_DSL
228	AGGREGATION_FRAMEWORK
229	GRPC_WEB
230	HTTP2
231	CALICO
232	COLUMNAR_FORMAT
233	DATA_PROCESSING
234	FIBER
235	RENDERING_OPTIMIZATION
236	KSQLDB
237	CONTEXT
238	DATALOADER
239	AUTOSCALING
240	RESOURCE_MANAGEMENT
241	GOSSIP_PROTOCOL
242	MULTITHREADING
243	GRAPHICS_PROGRAMMING
244	SOFTWARE_ENGINEERING
245	SECURITY
246	WEB
247	COMPUTER_ARCHITECTURE
\.


--
-- Name: answer_answer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.answer_answer_id_seq', 99, true);


--
-- Name: article_article_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.article_article_id_seq', 17, true);


--
-- Name: article_image_article_image_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.article_image_article_image_id_seq', 14, true);


--
-- Name: bookmark_bookmark_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.bookmark_bookmark_id_seq', 39, true);


--
-- Name: bookmark_question_bookmark_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.bookmark_question_bookmark_question_id_seq', 420, true);


--
-- Name: category_category_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.category_category_id_seq', 1, false);


--
-- Name: comment_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.comment_comment_id_seq', 17, true);


--
-- Name: feedback_feedback_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.feedback_feedback_id_seq', 19, true);


--
-- Name: follow_follow_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.follow_follow_id_seq', 35, true);


--
-- Name: history_history_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.history_history_id_seq', 384, true);


--
-- Name: job_job_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.job_job_id_seq', 18, true);


--
-- Name: job_skill_job_skill_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.job_skill_job_skill_id_seq', 372, true);


--
-- Name: likes_likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.likes_likes_id_seq', 26, true);


--
-- Name: member_member_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.member_member_id_seq', 13, true);


--
-- Name: question_job_question_job_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.question_job_question_job_id_seq', 2697, true);


--
-- Name: question_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.question_question_id_seq', 1, false);


--
-- Name: question_skill_question_skill_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.question_skill_question_skill_seq', 915, true);


--
-- Name: served_question_served_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.served_question_served_question_id_seq', 157, true);


--
-- Name: skill_skill_id_seq; Type: SEQUENCE SET; Schema: public; Owner: d3v3lop3rs
--

SELECT pg_catalog.setval('public.skill_skill_id_seq', 247, true);


--
-- Name: answer answer_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.answer
    ADD CONSTRAINT answer_pkey PRIMARY KEY (answer_id);


--
-- Name: article_image article_image_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.article_image
    ADD CONSTRAINT article_image_pkey PRIMARY KEY (article_image_id);


--
-- Name: article article_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.article
    ADD CONSTRAINT article_pkey PRIMARY KEY (article_id);


--
-- Name: bookmark bookmark_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.bookmark
    ADD CONSTRAINT bookmark_pkey PRIMARY KEY (bookmark_id);


--
-- Name: bookmark_question bookmark_question_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.bookmark_question
    ADD CONSTRAINT bookmark_question_pkey PRIMARY KEY (bookmark_question_id);


--
-- Name: category category_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT category_pkey PRIMARY KEY (category_id);


--
-- Name: comment comment_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.comment
    ADD CONSTRAINT comment_pkey PRIMARY KEY (comment_id);


--
-- Name: feedback feedback_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.feedback
    ADD CONSTRAINT feedback_pkey PRIMARY KEY (feedback_id);


--
-- Name: follow follow_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.follow
    ADD CONSTRAINT follow_pkey PRIMARY KEY (follow_id);


--
-- Name: history history_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.history
    ADD CONSTRAINT history_pkey PRIMARY KEY (history_id);


--
-- Name: job job_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.job
    ADD CONSTRAINT job_pkey PRIMARY KEY (job_id);


--
-- Name: job_skill job_skill_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.job_skill
    ADD CONSTRAINT job_skill_pkey PRIMARY KEY (job_skill_id);


--
-- Name: likes likes_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.likes
    ADD CONSTRAINT likes_pkey PRIMARY KEY (likes_id);


--
-- Name: member member_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.member
    ADD CONSTRAINT member_pkey PRIMARY KEY (member_id);


--
-- Name: question_job question_job_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question_job
    ADD CONSTRAINT question_job_pkey PRIMARY KEY (question_job_id);


--
-- Name: question question_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question
    ADD CONSTRAINT question_pkey PRIMARY KEY (question_id);


--
-- Name: question_skill question_skill_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question_skill
    ADD CONSTRAINT question_skill_pkey PRIMARY KEY (question_skill);


--
-- Name: served_question served_question_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.served_question
    ADD CONSTRAINT served_question_pkey PRIMARY KEY (served_question_id);


--
-- Name: skill skill_pkey; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.skill
    ADD CONSTRAINT skill_pkey PRIMARY KEY (skill_id);


--
-- Name: follow ukfb7ln73htigy8q3cx7ebyho3c; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.follow
    ADD CONSTRAINT ukfb7ln73htigy8q3cx7ebyho3c UNIQUE (follower_id, following_id);


--
-- Name: served_question ukn7c5y5hgcdx5tk7x1fy1h4cp1; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.served_question
    ADD CONSTRAINT ukn7c5y5hgcdx5tk7x1fy1h4cp1 UNIQUE (member_id, question_id);


--
-- Name: bookmark_question uq_bookmark_question; Type: CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.bookmark_question
    ADD CONSTRAINT uq_bookmark_question UNIQUE (bookmark_id, question_id);


--
-- Name: bookmark_question fk2cpcr254javo8gej7o63j85px; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.bookmark_question
    ADD CONSTRAINT fk2cpcr254javo8gej7o63j85px FOREIGN KEY (bookmark_id) REFERENCES public.bookmark(bookmark_id);


--
-- Name: bookmark_question fk2ln8k69r4478yrh2gacwwuy5v; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.bookmark_question
    ADD CONSTRAINT fk2ln8k69r4478yrh2gacwwuy5v FOREIGN KEY (question_id) REFERENCES public.question(question_id);


--
-- Name: feedback fk34t0rxbpyi0xkd4u200o0f5xs; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.feedback
    ADD CONSTRAINT fk34t0rxbpyi0xkd4u200o0f5xs FOREIGN KEY (answer_id) REFERENCES public.answer(answer_id);


--
-- Name: likes fk3p9ex2qw452lgox5sboky1e98; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.likes
    ADD CONSTRAINT fk3p9ex2qw452lgox5sboky1e98 FOREIGN KEY (answer_id) REFERENCES public.answer(answer_id);


--
-- Name: bookmark fk5bm7rup91j277mc7gg63akie2; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.bookmark
    ADD CONSTRAINT fk5bm7rup91j277mc7gg63akie2 FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: comment fk5yx0uphgjc6ik6hb82kkw501y; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.comment
    ADD CONSTRAINT fk5yx0uphgjc6ik6hb82kkw501y FOREIGN KEY (article_id) REFERENCES public.article(article_id);


--
-- Name: article fk6l9vkfd5ixw8o8kph5rj1k7gu; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.article
    ADD CONSTRAINT fk6l9vkfd5ixw8o8kph5rj1k7gu FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: answer fk8frr4bcabmmeyyu60qt7iiblo; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.answer
    ADD CONSTRAINT fk8frr4bcabmmeyyu60qt7iiblo FOREIGN KEY (question_id) REFERENCES public.question(question_id);


--
-- Name: question_job fk8qjpqvmj70ubpdx2wm9cmaaa1; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question_job
    ADD CONSTRAINT fk8qjpqvmj70ubpdx2wm9cmaaa1 FOREIGN KEY (question_id) REFERENCES public.question(question_id);


--
-- Name: job_skill fk9ix4wg520ii2gu2felxdhdup6; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.job_skill
    ADD CONSTRAINT fk9ix4wg520ii2gu2felxdhdup6 FOREIGN KEY (job_id) REFERENCES public.job(job_id);


--
-- Name: likes fka4vkf1skcfu5r6o5gfb5jf295; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.likes
    ADD CONSTRAINT fka4vkf1skcfu5r6o5gfb5jf295 FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: served_question fkanadyuljvtw0v9xni6ydn4f3p; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.served_question
    ADD CONSTRAINT fkanadyuljvtw0v9xni6ydn4f3p FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: history fkbnwj6i7md9xd8vr1pfqqbf1q5; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.history
    ADD CONSTRAINT fkbnwj6i7md9xd8vr1pfqqbf1q5 FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: job_skill fkj33qbbf3vk1lvhqpcosnh54u1; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.job_skill
    ADD CONSTRAINT fkj33qbbf3vk1lvhqpcosnh54u1 FOREIGN KEY (skill_id) REFERENCES public.skill(skill_id);


--
-- Name: follow fkkcoemc64xrm83cdmhyaphcuiu; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.follow
    ADD CONSTRAINT fkkcoemc64xrm83cdmhyaphcuiu FOREIGN KEY (following_id) REFERENCES public.member(member_id);


--
-- Name: served_question fklnjke58jo6qyi24ckpisn9hpj; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.served_question
    ADD CONSTRAINT fklnjke58jo6qyi24ckpisn9hpj FOREIGN KEY (question_id) REFERENCES public.question(question_id);


--
-- Name: feedback fkmonjtjt92g6gruqyfumtmg8m8; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.feedback
    ADD CONSTRAINT fkmonjtjt92g6gruqyfumtmg8m8 FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: comment fkmrrrpi513ssu63i2783jyiv9m; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.comment
    ADD CONSTRAINT fkmrrrpi513ssu63i2783jyiv9m FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: answer fkn2sp5pa6h0u2kixjl2r4vfluf; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.answer
    ADD CONSTRAINT fkn2sp5pa6h0u2kixjl2r4vfluf FOREIGN KEY (member_id) REFERENCES public.member(member_id);


--
-- Name: question_job fkoxbf8ke2sl09ipyixoq8m04oo; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question_job
    ADD CONSTRAINT fkoxbf8ke2sl09ipyixoq8m04oo FOREIGN KEY (job_id) REFERENCES public.job(job_id);


--
-- Name: question_skill fkqhhbq03evtr3gclu4y50nuprf; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question_skill
    ADD CONSTRAINT fkqhhbq03evtr3gclu4y50nuprf FOREIGN KEY (question_id) REFERENCES public.question(question_id);


--
-- Name: question_skill fkrygh5l2c7m3mqtkg7vc9w3ulw; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.question_skill
    ADD CONSTRAINT fkrygh5l2c7m3mqtkg7vc9w3ulw FOREIGN KEY (skill_id) REFERENCES public.skill(skill_id);


--
-- Name: article_image fkt3rm1gwoysmll8kpy7lt1vpwc; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.article_image
    ADD CONSTRAINT fkt3rm1gwoysmll8kpy7lt1vpwc FOREIGN KEY (article_id) REFERENCES public.article(article_id);


--
-- Name: follow fktps7gpodlrhxlji90u6r3mlng; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.follow
    ADD CONSTRAINT fktps7gpodlrhxlji90u6r3mlng FOREIGN KEY (follower_id) REFERENCES public.member(member_id);


--
-- Name: article fky5kkohbk00g0w88fi05k2hcw; Type: FK CONSTRAINT; Schema: public; Owner: d3v3lop3rs
--

ALTER TABLE ONLY public.article
    ADD CONSTRAINT fky5kkohbk00g0w88fi05k2hcw FOREIGN KEY (category_id) REFERENCES public.category(category_id);


--
-- PostgreSQL database dump complete
--

